#
# Copyright (C) 2015 Mohammad Javad Dousti, Alireza Shafaei, and Massoud Pedram, SPORT lab,
# University of Southern California. All rights reserved.
#
# Please refer to the LICENSE file for terms of use.
#
-------QASM Generation Pass:

module INITIALIZE ( qbit reg ) {
 	PrepZ ( reg , 0 );
 	H ( reg );
 }

module ToffoliImpl ( qbit target , qbit control1 , qbit control2 ) {
 	H ( target );
 	CNOT ( control2 , target );
 	Tdag ( target );
 	CNOT ( control1 , target );
 	T ( target );
 	CNOT ( control2 , target );
 	Tdag ( target );
 	CNOT ( control1 , target );
 	Tdag ( control2 );
 	T ( target );
 	CNOT ( control1 , control2 );
 	H ( target );
 	Tdag ( control2 );
 	CNOT ( control1 , control2 );
 	T ( control1 );
 	S ( control2 );
 }

module SUB_16 ( qbit* x , qbit* d ) {
 	qbit c1[12];
	qbit c2[12];
	qbit yi[1];
	qbit tmp[2];
	qbit d1[11];
	PrepZ ( c1[0] , 0 );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[1] , tmp[0] , x[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[0] , x[0] );
 	CNOT ( c1[1] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[0] , x[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[0] );
 	CNOT ( c1[1] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[0] );
 	CNOT ( tmp[0] , c1[0] );
 	CNOT ( tmp[0] , x[0] );
 	CNOT ( d1[0] , tmp[0] );
 	CNOT ( tmp[0] , x[0] );
 	CNOT ( tmp[0] , c1[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[2] , tmp[0] , x[1] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[1] , x[1] );
 	CNOT ( c1[2] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[1] , x[1] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[1] );
 	CNOT ( c1[2] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[1] );
 	CNOT ( tmp[0] , c1[1] );
 	CNOT ( tmp[0] , x[1] );
 	CNOT ( d1[1] , tmp[0] );
 	CNOT ( tmp[0] , x[1] );
 	CNOT ( tmp[0] , c1[1] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[3] , tmp[0] , x[2] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[2] , x[2] );
 	CNOT ( c1[3] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[2] , x[2] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[2] );
 	CNOT ( c1[3] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[2] );
 	CNOT ( tmp[0] , c1[2] );
 	CNOT ( tmp[0] , x[2] );
 	CNOT ( d1[2] , tmp[0] );
 	CNOT ( tmp[0] , x[2] );
 	CNOT ( tmp[0] , c1[2] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[4] , tmp[0] , x[3] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[3] , x[3] );
 	CNOT ( c1[4] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[3] , x[3] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[3] );
 	CNOT ( c1[4] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[3] );
 	CNOT ( tmp[0] , c1[3] );
 	CNOT ( tmp[0] , x[3] );
 	CNOT ( d1[3] , tmp[0] );
 	CNOT ( tmp[0] , x[3] );
 	CNOT ( tmp[0] , c1[3] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[5] , tmp[0] , x[4] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[4] , x[4] );
 	CNOT ( c1[5] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[4] , x[4] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[4] );
 	CNOT ( c1[5] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[4] );
 	CNOT ( tmp[0] , c1[4] );
 	CNOT ( tmp[0] , x[4] );
 	CNOT ( d1[4] , tmp[0] );
 	CNOT ( tmp[0] , x[4] );
 	CNOT ( tmp[0] , c1[4] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[6] , tmp[0] , x[5] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[5] , x[5] );
 	CNOT ( c1[6] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[5] , x[5] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[5] );
 	CNOT ( c1[6] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[5] );
 	CNOT ( tmp[0] , c1[5] );
 	CNOT ( tmp[0] , x[5] );
 	CNOT ( d1[5] , tmp[0] );
 	CNOT ( tmp[0] , x[5] );
 	CNOT ( tmp[0] , c1[5] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[7] , tmp[0] , x[6] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[6] , x[6] );
 	CNOT ( c1[7] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[6] , x[6] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[6] );
 	CNOT ( c1[7] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[6] );
 	CNOT ( tmp[0] , c1[6] );
 	CNOT ( tmp[0] , x[6] );
 	CNOT ( d1[6] , tmp[0] );
 	CNOT ( tmp[0] , x[6] );
 	CNOT ( tmp[0] , c1[6] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[8] , tmp[0] , x[7] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[7] , x[7] );
 	CNOT ( c1[8] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[7] , x[7] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[7] );
 	CNOT ( c1[8] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[7] );
 	CNOT ( tmp[0] , c1[7] );
 	CNOT ( tmp[0] , x[7] );
 	CNOT ( d1[7] , tmp[0] );
 	CNOT ( tmp[0] , x[7] );
 	CNOT ( tmp[0] , c1[7] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[9] , tmp[0] , x[8] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[8] , x[8] );
 	CNOT ( c1[9] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[8] , x[8] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[8] );
 	CNOT ( c1[9] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[8] );
 	CNOT ( tmp[0] , c1[8] );
 	CNOT ( tmp[0] , x[8] );
 	CNOT ( d1[8] , tmp[0] );
 	CNOT ( tmp[0] , x[8] );
 	CNOT ( tmp[0] , c1[8] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[10] , tmp[0] , x[9] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[9] , x[9] );
 	CNOT ( c1[10] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[9] , x[9] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[9] );
 	CNOT ( c1[10] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[9] );
 	CNOT ( tmp[0] , c1[9] );
 	CNOT ( tmp[0] , x[9] );
 	CNOT ( d1[9] , tmp[0] );
 	CNOT ( tmp[0] , x[9] );
 	CNOT ( tmp[0] , c1[9] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( c1[11] , tmp[0] , x[10] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	ToffoliImpl ( tmp[0] , c1[10] , x[10] );
 	CNOT ( c1[11] , tmp[0] );
 	ToffoliImpl ( tmp[0] , c1[10] , x[10] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[10] );
 	CNOT ( c1[11] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[10] );
 	CNOT ( tmp[0] , c1[10] );
 	CNOT ( tmp[0] , x[10] );
 	CNOT ( d1[10] , tmp[0] );
 	CNOT ( tmp[0] , x[10] );
 	CNOT ( tmp[0] , c1[10] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( c2[0] , c1[11] );
 	ToffoliImpl ( c2[1] , d1[0] , c2[0] );
 	CNOT ( tmp[0] , c2[0] );
 	CNOT ( tmp[0] , d1[0] );
 	CNOT ( d[0] , tmp[0] );
 	CNOT ( tmp[0] , d1[0] );
 	CNOT ( tmp[0] , c2[0] );
 	ToffoliImpl ( c2[2] , d1[1] , c2[1] );
 	CNOT ( tmp[0] , c2[1] );
 	CNOT ( tmp[0] , d1[1] );
 	CNOT ( d[1] , tmp[0] );
 	CNOT ( tmp[0] , d1[1] );
 	CNOT ( tmp[0] , c2[1] );
 	ToffoliImpl ( c2[3] , d1[2] , c2[2] );
 	CNOT ( tmp[0] , c2[2] );
 	CNOT ( tmp[0] , d1[2] );
 	CNOT ( d[2] , tmp[0] );
 	CNOT ( tmp[0] , d1[2] );
 	CNOT ( tmp[0] , c2[2] );
 	ToffoliImpl ( c2[4] , d1[3] , c2[3] );
 	CNOT ( tmp[0] , c2[3] );
 	CNOT ( tmp[0] , d1[3] );
 	CNOT ( d[3] , tmp[0] );
 	CNOT ( tmp[0] , d1[3] );
 	CNOT ( tmp[0] , c2[3] );
 	ToffoliImpl ( c2[5] , d1[4] , c2[4] );
 	CNOT ( tmp[0] , c2[4] );
 	CNOT ( tmp[0] , d1[4] );
 	CNOT ( d[4] , tmp[0] );
 	CNOT ( tmp[0] , d1[4] );
 	CNOT ( tmp[0] , c2[4] );
 	ToffoliImpl ( c2[6] , d1[5] , c2[5] );
 	CNOT ( tmp[0] , c2[5] );
 	CNOT ( tmp[0] , d1[5] );
 	CNOT ( d[5] , tmp[0] );
 	CNOT ( tmp[0] , d1[5] );
 	CNOT ( tmp[0] , c2[5] );
 	ToffoliImpl ( c2[7] , d1[6] , c2[6] );
 	CNOT ( tmp[0] , c2[6] );
 	CNOT ( tmp[0] , d1[6] );
 	CNOT ( d[6] , tmp[0] );
 	CNOT ( tmp[0] , d1[6] );
 	CNOT ( tmp[0] , c2[6] );
 	ToffoliImpl ( c2[8] , d1[7] , c2[7] );
 	CNOT ( tmp[0] , c2[7] );
 	CNOT ( tmp[0] , d1[7] );
 	CNOT ( d[7] , tmp[0] );
 	CNOT ( tmp[0] , d1[7] );
 	CNOT ( tmp[0] , c2[7] );
 	ToffoliImpl ( c2[9] , d1[8] , c2[8] );
 	CNOT ( tmp[0] , c2[8] );
 	CNOT ( tmp[0] , d1[8] );
 	CNOT ( d[8] , tmp[0] );
 	CNOT ( tmp[0] , d1[8] );
 	CNOT ( tmp[0] , c2[8] );
 	ToffoliImpl ( c2[10] , d1[9] , c2[9] );
 	CNOT ( tmp[0] , c2[9] );
 	CNOT ( tmp[0] , d1[9] );
 	CNOT ( d[9] , tmp[0] );
 	CNOT ( tmp[0] , d1[9] );
 	CNOT ( tmp[0] , c2[9] );
 	ToffoliImpl ( c2[11] , d1[10] , c2[10] );
 	CNOT ( tmp[0] , c2[10] );
 	CNOT ( tmp[0] , d1[10] );
 	CNOT ( d[10] , tmp[0] );
 	CNOT ( tmp[0] , d1[10] );
 	CNOT ( tmp[0] , c2[10] );
 	CNOT ( d[0] , c2[11] );
 	ToffoliImpl ( c2[11] , d1[10] , c2[10] );
 	ToffoliImpl ( c2[10] , d1[9] , c2[9] );
 	ToffoliImpl ( c2[9] , d1[8] , c2[8] );
 	ToffoliImpl ( c2[8] , d1[7] , c2[7] );
 	ToffoliImpl ( c2[7] , d1[6] , c2[6] );
 	ToffoliImpl ( c2[6] , d1[5] , c2[5] );
 	ToffoliImpl ( c2[5] , d1[4] , c2[4] );
 	ToffoliImpl ( c2[4] , d1[3] , c2[3] );
 	ToffoliImpl ( c2[3] , d1[2] , c2[2] );
 	ToffoliImpl ( c2[2] , d1[1] , c2[1] );
 	ToffoliImpl ( c2[1] , d1[0] , c2[0] );
 	CNOT ( c2[0] , c1[11] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[10] );
 	CNOT ( tmp[0] , x[10] );
 	CNOT ( d1[10] , tmp[0] );
 	CNOT ( tmp[0] , c1[10] );
 	CNOT ( tmp[0] , x[10] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[10] );
 	CNOT ( c1[11] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[10] );
 	ToffoliImpl ( tmp[1] , c1[10] , x[10] );
 	CNOT ( c1[11] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[10] , x[10] );
 	ToffoliImpl ( c1[11] , x[10] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[9] );
 	CNOT ( tmp[0] , x[9] );
 	CNOT ( d1[9] , tmp[0] );
 	CNOT ( tmp[0] , c1[9] );
 	CNOT ( tmp[0] , x[9] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[9] );
 	CNOT ( c1[10] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[9] );
 	ToffoliImpl ( tmp[1] , c1[9] , x[9] );
 	CNOT ( c1[10] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[9] , x[9] );
 	ToffoliImpl ( c1[10] , x[9] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[8] );
 	CNOT ( tmp[0] , x[8] );
 	CNOT ( d1[8] , tmp[0] );
 	CNOT ( tmp[0] , c1[8] );
 	CNOT ( tmp[0] , x[8] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[8] );
 	CNOT ( c1[9] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[8] );
 	ToffoliImpl ( tmp[1] , c1[8] , x[8] );
 	CNOT ( c1[9] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[8] , x[8] );
 	ToffoliImpl ( c1[9] , x[8] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[7] );
 	CNOT ( tmp[0] , x[7] );
 	CNOT ( d1[7] , tmp[0] );
 	CNOT ( tmp[0] , c1[7] );
 	CNOT ( tmp[0] , x[7] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[7] );
 	CNOT ( c1[8] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[7] );
 	ToffoliImpl ( tmp[1] , c1[7] , x[7] );
 	CNOT ( c1[8] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[7] , x[7] );
 	ToffoliImpl ( c1[8] , x[7] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[6] );
 	CNOT ( tmp[0] , x[6] );
 	CNOT ( d1[6] , tmp[0] );
 	CNOT ( tmp[0] , c1[6] );
 	CNOT ( tmp[0] , x[6] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[6] );
 	CNOT ( c1[7] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[6] );
 	ToffoliImpl ( tmp[1] , c1[6] , x[6] );
 	CNOT ( c1[7] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[6] , x[6] );
 	ToffoliImpl ( c1[7] , x[6] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[5] );
 	CNOT ( tmp[0] , x[5] );
 	CNOT ( d1[5] , tmp[0] );
 	CNOT ( tmp[0] , c1[5] );
 	CNOT ( tmp[0] , x[5] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[5] );
 	CNOT ( c1[6] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[5] );
 	ToffoliImpl ( tmp[1] , c1[5] , x[5] );
 	CNOT ( c1[6] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[5] , x[5] );
 	ToffoliImpl ( c1[6] , x[5] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[4] );
 	CNOT ( tmp[0] , x[4] );
 	CNOT ( d1[4] , tmp[0] );
 	CNOT ( tmp[0] , c1[4] );
 	CNOT ( tmp[0] , x[4] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[4] );
 	CNOT ( c1[5] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[4] );
 	ToffoliImpl ( tmp[1] , c1[4] , x[4] );
 	CNOT ( c1[5] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[4] , x[4] );
 	ToffoliImpl ( c1[5] , x[4] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[3] );
 	CNOT ( tmp[0] , x[3] );
 	CNOT ( d1[3] , tmp[0] );
 	CNOT ( tmp[0] , c1[3] );
 	CNOT ( tmp[0] , x[3] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[3] );
 	CNOT ( c1[4] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[3] );
 	ToffoliImpl ( tmp[1] , c1[3] , x[3] );
 	CNOT ( c1[4] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[3] , x[3] );
 	ToffoliImpl ( c1[4] , x[3] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[2] );
 	CNOT ( tmp[0] , x[2] );
 	CNOT ( d1[2] , tmp[0] );
 	CNOT ( tmp[0] , c1[2] );
 	CNOT ( tmp[0] , x[2] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[2] );
 	CNOT ( c1[3] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[2] );
 	ToffoliImpl ( tmp[1] , c1[2] , x[2] );
 	CNOT ( c1[3] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[2] , x[2] );
 	ToffoliImpl ( c1[3] , x[2] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[1] );
 	CNOT ( tmp[0] , x[1] );
 	CNOT ( d1[1] , tmp[0] );
 	CNOT ( tmp[0] , c1[1] );
 	CNOT ( tmp[0] , x[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[1] );
 	CNOT ( c1[2] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[1] );
 	ToffoliImpl ( tmp[1] , c1[1] , x[1] );
 	CNOT ( c1[2] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[1] , x[1] );
 	ToffoliImpl ( c1[2] , x[1] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 	CNOT ( tmp[0] , yi[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , c1[0] );
 	CNOT ( tmp[0] , x[0] );
 	CNOT ( d1[0] , tmp[0] );
 	CNOT ( tmp[0] , c1[0] );
 	CNOT ( tmp[0] , x[0] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[0] );
 	CNOT ( c1[1] , tmp[1] );
 	ToffoliImpl ( tmp[1] , tmp[0] , c1[0] );
 	ToffoliImpl ( tmp[1] , c1[0] , x[0] );
 	CNOT ( c1[1] , tmp[1] );
 	ToffoliImpl ( tmp[1] , c1[0] , x[0] );
 	ToffoliImpl ( c1[1] , x[0] , tmp[0] );
 	X ( tmp[0] );
 	CNOT ( tmp[0] , yi[0] );
 }

module ConvertNode_0_16 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module ConvertNode_16_5 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[5] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[6] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[7] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[8] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[9] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module TestEqual ( qbit* x , qbit* y , qbit t ) {
 	qbit dum[11];
	qbit dum2[11];
	ToffoliImpl ( dum[0] , x[0] , y[0] );
 	ToffoliImpl ( dum[1] , x[1] , y[1] );
 	ToffoliImpl ( dum[2] , x[2] , y[2] );
 	ToffoliImpl ( dum[3] , x[3] , y[3] );
 	ToffoliImpl ( dum[4] , x[4] , y[4] );
 	ToffoliImpl ( dum[5] , x[5] , y[5] );
 	ToffoliImpl ( dum[6] , x[6] , y[6] );
 	ToffoliImpl ( dum[7] , x[7] , y[7] );
 	ToffoliImpl ( dum[8] , x[8] , y[8] );
 	ToffoliImpl ( dum[9] , x[9] , y[9] );
 	ToffoliImpl ( dum[10] , x[10] , y[10] );
 	ToffoliImpl ( dum2[0] , dum[1] , dum[0] );
 	ToffoliImpl ( dum2[1] , dum2[0] , dum[2] );
 	ToffoliImpl ( dum2[2] , dum2[1] , dum[3] );
 	ToffoliImpl ( dum2[3] , dum2[2] , dum[4] );
 	ToffoliImpl ( dum2[4] , dum2[3] , dum[5] );
 	ToffoliImpl ( dum2[5] , dum2[4] , dum[6] );
 	ToffoliImpl ( dum2[6] , dum2[5] , dum[7] );
 	ToffoliImpl ( dum2[7] , dum2[6] , dum[8] );
 	ToffoliImpl ( dum2[8] , dum2[7] , dum[9] );
 	ToffoliImpl ( dum2[9] , dum2[8] , dum[10] );
 	CNOT ( t , dum2[9] );
 	ToffoliImpl ( dum2[9] , dum2[8] , dum[10] );
 	ToffoliImpl ( dum2[8] , dum2[7] , dum[9] );
 	ToffoliImpl ( dum2[7] , dum2[6] , dum[8] );
 	ToffoliImpl ( dum2[6] , dum2[5] , dum[7] );
 	ToffoliImpl ( dum2[5] , dum2[4] , dum[6] );
 	ToffoliImpl ( dum2[4] , dum2[3] , dum[5] );
 	ToffoliImpl ( dum2[3] , dum2[2] , dum[4] );
 	ToffoliImpl ( dum2[2] , dum2[1] , dum[3] );
 	ToffoliImpl ( dum2[1] , dum2[0] , dum[2] );
 	ToffoliImpl ( dum2[0] , dum[1] , dum[0] );
 	ToffoliImpl ( dum[0] , x[0] , y[0] );
 	ToffoliImpl ( dum[1] , x[1] , y[1] );
 	ToffoliImpl ( dum[2] , x[2] , y[2] );
 	ToffoliImpl ( dum[3] , x[3] , y[3] );
 	ToffoliImpl ( dum[4] , x[4] , y[4] );
 	ToffoliImpl ( dum[5] , x[5] , y[5] );
 	ToffoliImpl ( dum[6] , x[6] , y[6] );
 	ToffoliImpl ( dum[7] , x[7] , y[7] );
 	ToffoliImpl ( dum[8] , x[8] , y[8] );
 	ToffoliImpl ( dum[9] , x[9] , y[9] );
 	ToffoliImpl ( dum[10] , x[10] , y[10] );
 }

module C_Toffoli ( qbit target , qbit ctrl1 , qbit ctrl2 , qbit ctrl3 ) {
 	CNOT ( ctrl1 , ctrl2 );
 	ToffoliImpl ( target , ctrl1 , ctrl3 );
 }

module C_EvaluateOR ( qbit target , qbit ctr2 , qbit ctr1 , qbit ctrl ) {
 	CNOT ( ctr1 , ctrl );
 	CNOT ( ctr2 , ctrl );
 	C_Toffoli ( target , ctr2 , ctr1 , ctrl );
 	CNOT ( target , ctrl );
 }

module C_InvEvaluateOR ( qbit target , qbit ctr2 , qbit ctr1 , qbit ctrl ) {
 	CNOT ( target , ctrl );
 	C_Toffoli ( target , ctr2 , ctr1 , ctrl );
 	CNOT ( ctr2 , ctrl );
 	CNOT ( ctr1 , ctrl );
 }

module C_ADD ( qbit* x , qbit* y , qbit* s , qbit ctrl ) {
 	qbit c1[12];
	qbit c2[12];
	qbit tmp[2];
	qbit s1[11];
	PrepZ ( c1[0] , 0 );
 	C_Toffoli ( c1[1] , x[0] , y[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[0] , c1[0] , ctrl );
 	ToffoliImpl ( c1[1] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[0] , c1[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[0] , c1[0] , ctrl );
 	ToffoliImpl ( c1[1] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[0] , c1[0] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[0] , c1[0] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[0] , ctrl );
 	ToffoliImpl ( s1[0] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[0] , c1[0] , ctrl );
 	C_Toffoli ( c1[2] , x[1] , y[1] , ctrl );
 	C_Toffoli ( tmp[0] , x[1] , c1[1] , ctrl );
 	ToffoliImpl ( c1[2] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[1] , c1[1] , ctrl );
 	C_Toffoli ( tmp[0] , y[1] , c1[1] , ctrl );
 	ToffoliImpl ( c1[2] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[1] , c1[1] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[1] , c1[1] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[1] , ctrl );
 	ToffoliImpl ( s1[1] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[1] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[1] , c1[1] , ctrl );
 	C_Toffoli ( c1[3] , x[2] , y[2] , ctrl );
 	C_Toffoli ( tmp[0] , x[2] , c1[2] , ctrl );
 	ToffoliImpl ( c1[3] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[2] , c1[2] , ctrl );
 	C_Toffoli ( tmp[0] , y[2] , c1[2] , ctrl );
 	ToffoliImpl ( c1[3] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[2] , c1[2] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[2] , c1[2] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[2] , ctrl );
 	ToffoliImpl ( s1[2] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[2] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[2] , c1[2] , ctrl );
 	C_Toffoli ( c1[4] , x[3] , y[3] , ctrl );
 	C_Toffoli ( tmp[0] , x[3] , c1[3] , ctrl );
 	ToffoliImpl ( c1[4] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[3] , c1[3] , ctrl );
 	C_Toffoli ( tmp[0] , y[3] , c1[3] , ctrl );
 	ToffoliImpl ( c1[4] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[3] , c1[3] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[3] , c1[3] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[3] , ctrl );
 	ToffoliImpl ( s1[3] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[3] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[3] , c1[3] , ctrl );
 	C_Toffoli ( c1[5] , x[4] , y[4] , ctrl );
 	C_Toffoli ( tmp[0] , x[4] , c1[4] , ctrl );
 	ToffoliImpl ( c1[5] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[4] , c1[4] , ctrl );
 	C_Toffoli ( tmp[0] , y[4] , c1[4] , ctrl );
 	ToffoliImpl ( c1[5] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[4] , c1[4] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[4] , c1[4] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[4] , ctrl );
 	ToffoliImpl ( s1[4] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[4] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[4] , c1[4] , ctrl );
 	C_Toffoli ( c1[6] , x[5] , y[5] , ctrl );
 	C_Toffoli ( tmp[0] , x[5] , c1[5] , ctrl );
 	ToffoliImpl ( c1[6] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[5] , c1[5] , ctrl );
 	C_Toffoli ( tmp[0] , y[5] , c1[5] , ctrl );
 	ToffoliImpl ( c1[6] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[5] , c1[5] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[5] , c1[5] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[5] , ctrl );
 	ToffoliImpl ( s1[5] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[5] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[5] , c1[5] , ctrl );
 	C_Toffoli ( c1[7] , x[6] , y[6] , ctrl );
 	C_Toffoli ( tmp[0] , x[6] , c1[6] , ctrl );
 	ToffoliImpl ( c1[7] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[6] , c1[6] , ctrl );
 	C_Toffoli ( tmp[0] , y[6] , c1[6] , ctrl );
 	ToffoliImpl ( c1[7] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[6] , c1[6] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[6] , c1[6] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[6] , ctrl );
 	ToffoliImpl ( s1[6] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[6] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[6] , c1[6] , ctrl );
 	C_Toffoli ( c1[8] , x[7] , y[7] , ctrl );
 	C_Toffoli ( tmp[0] , x[7] , c1[7] , ctrl );
 	ToffoliImpl ( c1[8] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[7] , c1[7] , ctrl );
 	C_Toffoli ( tmp[0] , y[7] , c1[7] , ctrl );
 	ToffoliImpl ( c1[8] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[7] , c1[7] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[7] , c1[7] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[7] , ctrl );
 	ToffoliImpl ( s1[7] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[7] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[7] , c1[7] , ctrl );
 	C_Toffoli ( c1[9] , x[8] , y[8] , ctrl );
 	C_Toffoli ( tmp[0] , x[8] , c1[8] , ctrl );
 	ToffoliImpl ( c1[9] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[8] , c1[8] , ctrl );
 	C_Toffoli ( tmp[0] , y[8] , c1[8] , ctrl );
 	ToffoliImpl ( c1[9] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[8] , c1[8] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[8] , c1[8] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[8] , ctrl );
 	ToffoliImpl ( s1[8] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[8] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[8] , c1[8] , ctrl );
 	C_Toffoli ( c1[10] , x[9] , y[9] , ctrl );
 	C_Toffoli ( tmp[0] , x[9] , c1[9] , ctrl );
 	ToffoliImpl ( c1[10] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[9] , c1[9] , ctrl );
 	C_Toffoli ( tmp[0] , y[9] , c1[9] , ctrl );
 	ToffoliImpl ( c1[10] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[9] , c1[9] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[9] , c1[9] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[9] , ctrl );
 	ToffoliImpl ( s1[9] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[9] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[9] , c1[9] , ctrl );
 	C_Toffoli ( c1[11] , x[10] , y[10] , ctrl );
 	C_Toffoli ( tmp[0] , x[10] , c1[10] , ctrl );
 	ToffoliImpl ( c1[11] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[10] , c1[10] , ctrl );
 	C_Toffoli ( tmp[0] , y[10] , c1[10] , ctrl );
 	ToffoliImpl ( c1[11] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[10] , c1[10] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[10] , c1[10] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[10] , ctrl );
 	ToffoliImpl ( s1[10] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[10] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[10] , c1[10] , ctrl );
 	ToffoliImpl ( c2[0] , c1[11] , ctrl );
 	C_Toffoli ( c2[1] , s1[0] , c2[0] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[0] , c2[0] , ctrl );
 	ToffoliImpl ( s[0] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[0] , c2[0] , ctrl );
 	C_Toffoli ( c2[2] , s1[1] , c2[1] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[1] , c2[1] , ctrl );
 	ToffoliImpl ( s[1] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[1] , c2[1] , ctrl );
 	C_Toffoli ( c2[3] , s1[2] , c2[2] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[2] , c2[2] , ctrl );
 	ToffoliImpl ( s[2] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[2] , c2[2] , ctrl );
 	C_Toffoli ( c2[4] , s1[3] , c2[3] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[3] , c2[3] , ctrl );
 	ToffoliImpl ( s[3] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[3] , c2[3] , ctrl );
 	C_Toffoli ( c2[5] , s1[4] , c2[4] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[4] , c2[4] , ctrl );
 	ToffoliImpl ( s[4] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[4] , c2[4] , ctrl );
 	C_Toffoli ( c2[6] , s1[5] , c2[5] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[5] , c2[5] , ctrl );
 	ToffoliImpl ( s[5] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[5] , c2[5] , ctrl );
 	C_Toffoli ( c2[7] , s1[6] , c2[6] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[6] , c2[6] , ctrl );
 	ToffoliImpl ( s[6] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[6] , c2[6] , ctrl );
 	C_Toffoli ( c2[8] , s1[7] , c2[7] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[7] , c2[7] , ctrl );
 	ToffoliImpl ( s[7] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[7] , c2[7] , ctrl );
 	C_Toffoli ( c2[9] , s1[8] , c2[8] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[8] , c2[8] , ctrl );
 	ToffoliImpl ( s[8] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[8] , c2[8] , ctrl );
 	C_Toffoli ( c2[10] , s1[9] , c2[9] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[9] , c2[9] , ctrl );
 	ToffoliImpl ( s[9] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[9] , c2[9] , ctrl );
 	C_Toffoli ( c2[11] , s1[10] , c2[10] , ctrl );
 	C_EvaluateOR ( tmp[0] , s1[10] , c2[10] , ctrl );
 	ToffoliImpl ( s[10] , tmp[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , s1[10] , c2[10] , ctrl );
 	ToffoliImpl ( s[1] , c2[11] , ctrl );
 	C_Toffoli ( c2[11] , s1[10] , c2[10] , ctrl );
 	C_Toffoli ( c2[10] , s1[9] , c2[9] , ctrl );
 	C_Toffoli ( c2[9] , s1[8] , c2[8] , ctrl );
 	C_Toffoli ( c2[8] , s1[7] , c2[7] , ctrl );
 	C_Toffoli ( c2[7] , s1[6] , c2[6] , ctrl );
 	C_Toffoli ( c2[6] , s1[5] , c2[5] , ctrl );
 	C_Toffoli ( c2[5] , s1[4] , c2[4] , ctrl );
 	C_Toffoli ( c2[4] , s1[3] , c2[3] , ctrl );
 	C_Toffoli ( c2[3] , s1[2] , c2[2] , ctrl );
 	C_Toffoli ( c2[2] , s1[1] , c2[1] , ctrl );
 	C_Toffoli ( c2[1] , s1[0] , c2[0] , ctrl );
 	ToffoliImpl ( c2[0] , c1[11] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[10] , c1[10] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[10] , ctrl );
 	ToffoliImpl ( s1[10] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[10] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[10] , c1[10] , ctrl );
 	C_Toffoli ( tmp[0] , y[10] , c1[10] , ctrl );
 	ToffoliImpl ( c1[11] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[10] , c1[10] , ctrl );
 	C_Toffoli ( tmp[0] , x[10] , c1[10] , ctrl );
 	ToffoliImpl ( c1[11] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[10] , c1[10] , ctrl );
 	C_Toffoli ( c1[11] , x[10] , y[10] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[9] , c1[9] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[9] , ctrl );
 	ToffoliImpl ( s1[9] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[9] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[9] , c1[9] , ctrl );
 	C_Toffoli ( tmp[0] , y[9] , c1[9] , ctrl );
 	ToffoliImpl ( c1[10] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[9] , c1[9] , ctrl );
 	C_Toffoli ( tmp[0] , x[9] , c1[9] , ctrl );
 	ToffoliImpl ( c1[10] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[9] , c1[9] , ctrl );
 	C_Toffoli ( c1[10] , x[9] , y[9] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[8] , c1[8] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[8] , ctrl );
 	ToffoliImpl ( s1[8] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[8] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[8] , c1[8] , ctrl );
 	C_Toffoli ( tmp[0] , y[8] , c1[8] , ctrl );
 	ToffoliImpl ( c1[9] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[8] , c1[8] , ctrl );
 	C_Toffoli ( tmp[0] , x[8] , c1[8] , ctrl );
 	ToffoliImpl ( c1[9] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[8] , c1[8] , ctrl );
 	C_Toffoli ( c1[9] , x[8] , y[8] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[7] , c1[7] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[7] , ctrl );
 	ToffoliImpl ( s1[7] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[7] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[7] , c1[7] , ctrl );
 	C_Toffoli ( tmp[0] , y[7] , c1[7] , ctrl );
 	ToffoliImpl ( c1[8] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[7] , c1[7] , ctrl );
 	C_Toffoli ( tmp[0] , x[7] , c1[7] , ctrl );
 	ToffoliImpl ( c1[8] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[7] , c1[7] , ctrl );
 	C_Toffoli ( c1[8] , x[7] , y[7] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[6] , c1[6] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[6] , ctrl );
 	ToffoliImpl ( s1[6] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[6] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[6] , c1[6] , ctrl );
 	C_Toffoli ( tmp[0] , y[6] , c1[6] , ctrl );
 	ToffoliImpl ( c1[7] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[6] , c1[6] , ctrl );
 	C_Toffoli ( tmp[0] , x[6] , c1[6] , ctrl );
 	ToffoliImpl ( c1[7] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[6] , c1[6] , ctrl );
 	C_Toffoli ( c1[7] , x[6] , y[6] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[5] , c1[5] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[5] , ctrl );
 	ToffoliImpl ( s1[5] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[5] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[5] , c1[5] , ctrl );
 	C_Toffoli ( tmp[0] , y[5] , c1[5] , ctrl );
 	ToffoliImpl ( c1[6] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[5] , c1[5] , ctrl );
 	C_Toffoli ( tmp[0] , x[5] , c1[5] , ctrl );
 	ToffoliImpl ( c1[6] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[5] , c1[5] , ctrl );
 	C_Toffoli ( c1[6] , x[5] , y[5] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[4] , c1[4] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[4] , ctrl );
 	ToffoliImpl ( s1[4] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[4] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[4] , c1[4] , ctrl );
 	C_Toffoli ( tmp[0] , y[4] , c1[4] , ctrl );
 	ToffoliImpl ( c1[5] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[4] , c1[4] , ctrl );
 	C_Toffoli ( tmp[0] , x[4] , c1[4] , ctrl );
 	ToffoliImpl ( c1[5] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[4] , c1[4] , ctrl );
 	C_Toffoli ( c1[5] , x[4] , y[4] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[3] , c1[3] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[3] , ctrl );
 	ToffoliImpl ( s1[3] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[3] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[3] , c1[3] , ctrl );
 	C_Toffoli ( tmp[0] , y[3] , c1[3] , ctrl );
 	ToffoliImpl ( c1[4] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[3] , c1[3] , ctrl );
 	C_Toffoli ( tmp[0] , x[3] , c1[3] , ctrl );
 	ToffoliImpl ( c1[4] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[3] , c1[3] , ctrl );
 	C_Toffoli ( c1[4] , x[3] , y[3] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[2] , c1[2] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[2] , ctrl );
 	ToffoliImpl ( s1[2] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[2] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[2] , c1[2] , ctrl );
 	C_Toffoli ( tmp[0] , y[2] , c1[2] , ctrl );
 	ToffoliImpl ( c1[3] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[2] , c1[2] , ctrl );
 	C_Toffoli ( tmp[0] , x[2] , c1[2] , ctrl );
 	ToffoliImpl ( c1[3] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[2] , c1[2] , ctrl );
 	C_Toffoli ( c1[3] , x[2] , y[2] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[1] , c1[1] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[1] , ctrl );
 	ToffoliImpl ( s1[1] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[1] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[1] , c1[1] , ctrl );
 	C_Toffoli ( tmp[0] , y[1] , c1[1] , ctrl );
 	ToffoliImpl ( c1[2] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[1] , c1[1] , ctrl );
 	C_Toffoli ( tmp[0] , x[1] , c1[1] , ctrl );
 	ToffoliImpl ( c1[2] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[1] , c1[1] , ctrl );
 	C_Toffoli ( c1[2] , x[1] , y[1] , ctrl );
 	C_EvaluateOR ( tmp[0] , y[0] , c1[0] , ctrl );
 	C_EvaluateOR ( tmp[1] , tmp[0] , x[0] , ctrl );
 	ToffoliImpl ( s1[0] , tmp[1] , ctrl );
 	C_InvEvaluateOR ( tmp[1] , tmp[0] , x[0] , ctrl );
 	C_InvEvaluateOR ( tmp[0] , y[0] , c1[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[0] , c1[0] , ctrl );
 	ToffoliImpl ( c1[1] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , y[0] , c1[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[0] , c1[0] , ctrl );
 	ToffoliImpl ( c1[1] , tmp[0] , ctrl );
 	C_Toffoli ( tmp[0] , x[0] , c1[0] , ctrl );
 	C_Toffoli ( c1[1] , x[0] , y[0] , ctrl );
 }

module MUL ( qbit* x , qbit* y , qbit* p ) {
 	qbit tmp[11];
	qbit wrk[11];
	qbit wrk2[11];
	PrepZ ( p[0] , 0 );
 	CNOT ( tmp[0] , y[0] );
 	PrepZ ( p[1] , 0 );
 	CNOT ( tmp[1] , y[1] );
 	PrepZ ( p[2] , 0 );
 	CNOT ( tmp[2] , y[2] );
 	PrepZ ( p[3] , 0 );
 	CNOT ( tmp[3] , y[3] );
 	PrepZ ( p[4] , 0 );
 	CNOT ( tmp[4] , y[4] );
 	PrepZ ( p[5] , 0 );
 	CNOT ( tmp[5] , y[5] );
 	PrepZ ( p[6] , 0 );
 	CNOT ( tmp[6] , y[6] );
 	PrepZ ( p[7] , 0 );
 	CNOT ( tmp[7] , y[7] );
 	PrepZ ( p[8] , 0 );
 	CNOT ( tmp[8] , y[8] );
 	PrepZ ( p[9] , 0 );
 	CNOT ( tmp[9] , y[9] );
 	PrepZ ( p[10] , 0 );
 	CNOT ( tmp[10] , y[10] );
 	C_ADD ( p , tmp , wrk , x[0] );
 	ToffoliImpl ( p[0] , wrk[0] , x[0] );
 	ToffoliImpl ( wrk[0] , p[0] , x[0] );
 	ToffoliImpl ( p[0] , wrk[0] , x[0] );
 	ToffoliImpl ( p[1] , wrk[1] , x[0] );
 	ToffoliImpl ( wrk[1] , p[1] , x[0] );
 	ToffoliImpl ( p[1] , wrk[1] , x[0] );
 	ToffoliImpl ( p[2] , wrk[2] , x[0] );
 	ToffoliImpl ( wrk[2] , p[2] , x[0] );
 	ToffoliImpl ( p[2] , wrk[2] , x[0] );
 	ToffoliImpl ( p[3] , wrk[3] , x[0] );
 	ToffoliImpl ( wrk[3] , p[3] , x[0] );
 	ToffoliImpl ( p[3] , wrk[3] , x[0] );
 	ToffoliImpl ( p[4] , wrk[4] , x[0] );
 	ToffoliImpl ( wrk[4] , p[4] , x[0] );
 	ToffoliImpl ( p[4] , wrk[4] , x[0] );
 	ToffoliImpl ( p[5] , wrk[5] , x[0] );
 	ToffoliImpl ( wrk[5] , p[5] , x[0] );
 	ToffoliImpl ( p[5] , wrk[5] , x[0] );
 	ToffoliImpl ( p[6] , wrk[6] , x[0] );
 	ToffoliImpl ( wrk[6] , p[6] , x[0] );
 	ToffoliImpl ( p[6] , wrk[6] , x[0] );
 	ToffoliImpl ( p[7] , wrk[7] , x[0] );
 	ToffoliImpl ( wrk[7] , p[7] , x[0] );
 	ToffoliImpl ( p[7] , wrk[7] , x[0] );
 	ToffoliImpl ( p[8] , wrk[8] , x[0] );
 	ToffoliImpl ( wrk[8] , p[8] , x[0] );
 	ToffoliImpl ( p[8] , wrk[8] , x[0] );
 	ToffoliImpl ( p[9] , wrk[9] , x[0] );
 	ToffoliImpl ( wrk[9] , p[9] , x[0] );
 	ToffoliImpl ( p[9] , wrk[9] , x[0] );
 	ToffoliImpl ( p[10] , wrk[10] , x[0] );
 	ToffoliImpl ( wrk[10] , p[10] , x[0] );
 	ToffoliImpl ( p[10] , wrk[10] , x[0] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[1] );
 	C_ADD ( wrk2 , tmp , p , x[1] );
 	ToffoliImpl ( p[0] , wrk[0] , x[1] );
 	ToffoliImpl ( wrk[0] , p[0] , x[1] );
 	ToffoliImpl ( p[0] , wrk[0] , x[1] );
 	ToffoliImpl ( p[1] , wrk[1] , x[1] );
 	ToffoliImpl ( wrk[1] , p[1] , x[1] );
 	ToffoliImpl ( p[1] , wrk[1] , x[1] );
 	ToffoliImpl ( p[2] , wrk[2] , x[1] );
 	ToffoliImpl ( wrk[2] , p[2] , x[1] );
 	ToffoliImpl ( p[2] , wrk[2] , x[1] );
 	ToffoliImpl ( p[3] , wrk[3] , x[1] );
 	ToffoliImpl ( wrk[3] , p[3] , x[1] );
 	ToffoliImpl ( p[3] , wrk[3] , x[1] );
 	ToffoliImpl ( p[4] , wrk[4] , x[1] );
 	ToffoliImpl ( wrk[4] , p[4] , x[1] );
 	ToffoliImpl ( p[4] , wrk[4] , x[1] );
 	ToffoliImpl ( p[5] , wrk[5] , x[1] );
 	ToffoliImpl ( wrk[5] , p[5] , x[1] );
 	ToffoliImpl ( p[5] , wrk[5] , x[1] );
 	ToffoliImpl ( p[6] , wrk[6] , x[1] );
 	ToffoliImpl ( wrk[6] , p[6] , x[1] );
 	ToffoliImpl ( p[6] , wrk[6] , x[1] );
 	ToffoliImpl ( p[7] , wrk[7] , x[1] );
 	ToffoliImpl ( wrk[7] , p[7] , x[1] );
 	ToffoliImpl ( p[7] , wrk[7] , x[1] );
 	ToffoliImpl ( p[8] , wrk[8] , x[1] );
 	ToffoliImpl ( wrk[8] , p[8] , x[1] );
 	ToffoliImpl ( p[8] , wrk[8] , x[1] );
 	ToffoliImpl ( p[9] , wrk[9] , x[1] );
 	ToffoliImpl ( wrk[9] , p[9] , x[1] );
 	ToffoliImpl ( p[9] , wrk[9] , x[1] );
 	ToffoliImpl ( p[10] , wrk[10] , x[1] );
 	ToffoliImpl ( wrk[10] , p[10] , x[1] );
 	ToffoliImpl ( p[10] , wrk[10] , x[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[2] );
 	C_ADD ( wrk2 , tmp , p , x[2] );
 	C_ADD ( wrk2 , tmp , p , x[2] );
 	ToffoliImpl ( p[0] , wrk[0] , x[2] );
 	ToffoliImpl ( wrk[0] , p[0] , x[2] );
 	ToffoliImpl ( p[0] , wrk[0] , x[2] );
 	ToffoliImpl ( p[1] , wrk[1] , x[2] );
 	ToffoliImpl ( wrk[1] , p[1] , x[2] );
 	ToffoliImpl ( p[1] , wrk[1] , x[2] );
 	ToffoliImpl ( p[2] , wrk[2] , x[2] );
 	ToffoliImpl ( wrk[2] , p[2] , x[2] );
 	ToffoliImpl ( p[2] , wrk[2] , x[2] );
 	ToffoliImpl ( p[3] , wrk[3] , x[2] );
 	ToffoliImpl ( wrk[3] , p[3] , x[2] );
 	ToffoliImpl ( p[3] , wrk[3] , x[2] );
 	ToffoliImpl ( p[4] , wrk[4] , x[2] );
 	ToffoliImpl ( wrk[4] , p[4] , x[2] );
 	ToffoliImpl ( p[4] , wrk[4] , x[2] );
 	ToffoliImpl ( p[5] , wrk[5] , x[2] );
 	ToffoliImpl ( wrk[5] , p[5] , x[2] );
 	ToffoliImpl ( p[5] , wrk[5] , x[2] );
 	ToffoliImpl ( p[6] , wrk[6] , x[2] );
 	ToffoliImpl ( wrk[6] , p[6] , x[2] );
 	ToffoliImpl ( p[6] , wrk[6] , x[2] );
 	ToffoliImpl ( p[7] , wrk[7] , x[2] );
 	ToffoliImpl ( wrk[7] , p[7] , x[2] );
 	ToffoliImpl ( p[7] , wrk[7] , x[2] );
 	ToffoliImpl ( p[8] , wrk[8] , x[2] );
 	ToffoliImpl ( wrk[8] , p[8] , x[2] );
 	ToffoliImpl ( p[8] , wrk[8] , x[2] );
 	ToffoliImpl ( p[9] , wrk[9] , x[2] );
 	ToffoliImpl ( wrk[9] , p[9] , x[2] );
 	ToffoliImpl ( p[9] , wrk[9] , x[2] );
 	ToffoliImpl ( p[10] , wrk[10] , x[2] );
 	ToffoliImpl ( wrk[10] , p[10] , x[2] );
 	ToffoliImpl ( p[10] , wrk[10] , x[2] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[3] );
 	C_ADD ( wrk2 , tmp , p , x[3] );
 	C_ADD ( wrk2 , tmp , p , x[3] );
 	C_ADD ( wrk2 , tmp , p , x[3] );
 	ToffoliImpl ( p[0] , wrk[0] , x[3] );
 	ToffoliImpl ( wrk[0] , p[0] , x[3] );
 	ToffoliImpl ( p[0] , wrk[0] , x[3] );
 	ToffoliImpl ( p[1] , wrk[1] , x[3] );
 	ToffoliImpl ( wrk[1] , p[1] , x[3] );
 	ToffoliImpl ( p[1] , wrk[1] , x[3] );
 	ToffoliImpl ( p[2] , wrk[2] , x[3] );
 	ToffoliImpl ( wrk[2] , p[2] , x[3] );
 	ToffoliImpl ( p[2] , wrk[2] , x[3] );
 	ToffoliImpl ( p[3] , wrk[3] , x[3] );
 	ToffoliImpl ( wrk[3] , p[3] , x[3] );
 	ToffoliImpl ( p[3] , wrk[3] , x[3] );
 	ToffoliImpl ( p[4] , wrk[4] , x[3] );
 	ToffoliImpl ( wrk[4] , p[4] , x[3] );
 	ToffoliImpl ( p[4] , wrk[4] , x[3] );
 	ToffoliImpl ( p[5] , wrk[5] , x[3] );
 	ToffoliImpl ( wrk[5] , p[5] , x[3] );
 	ToffoliImpl ( p[5] , wrk[5] , x[3] );
 	ToffoliImpl ( p[6] , wrk[6] , x[3] );
 	ToffoliImpl ( wrk[6] , p[6] , x[3] );
 	ToffoliImpl ( p[6] , wrk[6] , x[3] );
 	ToffoliImpl ( p[7] , wrk[7] , x[3] );
 	ToffoliImpl ( wrk[7] , p[7] , x[3] );
 	ToffoliImpl ( p[7] , wrk[7] , x[3] );
 	ToffoliImpl ( p[8] , wrk[8] , x[3] );
 	ToffoliImpl ( wrk[8] , p[8] , x[3] );
 	ToffoliImpl ( p[8] , wrk[8] , x[3] );
 	ToffoliImpl ( p[9] , wrk[9] , x[3] );
 	ToffoliImpl ( wrk[9] , p[9] , x[3] );
 	ToffoliImpl ( p[9] , wrk[9] , x[3] );
 	ToffoliImpl ( p[10] , wrk[10] , x[3] );
 	ToffoliImpl ( wrk[10] , p[10] , x[3] );
 	ToffoliImpl ( p[10] , wrk[10] , x[3] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[4] );
 	C_ADD ( wrk2 , tmp , p , x[4] );
 	C_ADD ( wrk2 , tmp , p , x[4] );
 	C_ADD ( wrk2 , tmp , p , x[4] );
 	C_ADD ( wrk2 , tmp , p , x[4] );
 	ToffoliImpl ( p[0] , wrk[0] , x[4] );
 	ToffoliImpl ( wrk[0] , p[0] , x[4] );
 	ToffoliImpl ( p[0] , wrk[0] , x[4] );
 	ToffoliImpl ( p[1] , wrk[1] , x[4] );
 	ToffoliImpl ( wrk[1] , p[1] , x[4] );
 	ToffoliImpl ( p[1] , wrk[1] , x[4] );
 	ToffoliImpl ( p[2] , wrk[2] , x[4] );
 	ToffoliImpl ( wrk[2] , p[2] , x[4] );
 	ToffoliImpl ( p[2] , wrk[2] , x[4] );
 	ToffoliImpl ( p[3] , wrk[3] , x[4] );
 	ToffoliImpl ( wrk[3] , p[3] , x[4] );
 	ToffoliImpl ( p[3] , wrk[3] , x[4] );
 	ToffoliImpl ( p[4] , wrk[4] , x[4] );
 	ToffoliImpl ( wrk[4] , p[4] , x[4] );
 	ToffoliImpl ( p[4] , wrk[4] , x[4] );
 	ToffoliImpl ( p[5] , wrk[5] , x[4] );
 	ToffoliImpl ( wrk[5] , p[5] , x[4] );
 	ToffoliImpl ( p[5] , wrk[5] , x[4] );
 	ToffoliImpl ( p[6] , wrk[6] , x[4] );
 	ToffoliImpl ( wrk[6] , p[6] , x[4] );
 	ToffoliImpl ( p[6] , wrk[6] , x[4] );
 	ToffoliImpl ( p[7] , wrk[7] , x[4] );
 	ToffoliImpl ( wrk[7] , p[7] , x[4] );
 	ToffoliImpl ( p[7] , wrk[7] , x[4] );
 	ToffoliImpl ( p[8] , wrk[8] , x[4] );
 	ToffoliImpl ( wrk[8] , p[8] , x[4] );
 	ToffoliImpl ( p[8] , wrk[8] , x[4] );
 	ToffoliImpl ( p[9] , wrk[9] , x[4] );
 	ToffoliImpl ( wrk[9] , p[9] , x[4] );
 	ToffoliImpl ( p[9] , wrk[9] , x[4] );
 	ToffoliImpl ( p[10] , wrk[10] , x[4] );
 	ToffoliImpl ( wrk[10] , p[10] , x[4] );
 	ToffoliImpl ( p[10] , wrk[10] , x[4] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[5] );
 	C_ADD ( wrk2 , tmp , p , x[5] );
 	C_ADD ( wrk2 , tmp , p , x[5] );
 	C_ADD ( wrk2 , tmp , p , x[5] );
 	C_ADD ( wrk2 , tmp , p , x[5] );
 	C_ADD ( wrk2 , tmp , p , x[5] );
 	ToffoliImpl ( p[0] , wrk[0] , x[5] );
 	ToffoliImpl ( wrk[0] , p[0] , x[5] );
 	ToffoliImpl ( p[0] , wrk[0] , x[5] );
 	ToffoliImpl ( p[1] , wrk[1] , x[5] );
 	ToffoliImpl ( wrk[1] , p[1] , x[5] );
 	ToffoliImpl ( p[1] , wrk[1] , x[5] );
 	ToffoliImpl ( p[2] , wrk[2] , x[5] );
 	ToffoliImpl ( wrk[2] , p[2] , x[5] );
 	ToffoliImpl ( p[2] , wrk[2] , x[5] );
 	ToffoliImpl ( p[3] , wrk[3] , x[5] );
 	ToffoliImpl ( wrk[3] , p[3] , x[5] );
 	ToffoliImpl ( p[3] , wrk[3] , x[5] );
 	ToffoliImpl ( p[4] , wrk[4] , x[5] );
 	ToffoliImpl ( wrk[4] , p[4] , x[5] );
 	ToffoliImpl ( p[4] , wrk[4] , x[5] );
 	ToffoliImpl ( p[5] , wrk[5] , x[5] );
 	ToffoliImpl ( wrk[5] , p[5] , x[5] );
 	ToffoliImpl ( p[5] , wrk[5] , x[5] );
 	ToffoliImpl ( p[6] , wrk[6] , x[5] );
 	ToffoliImpl ( wrk[6] , p[6] , x[5] );
 	ToffoliImpl ( p[6] , wrk[6] , x[5] );
 	ToffoliImpl ( p[7] , wrk[7] , x[5] );
 	ToffoliImpl ( wrk[7] , p[7] , x[5] );
 	ToffoliImpl ( p[7] , wrk[7] , x[5] );
 	ToffoliImpl ( p[8] , wrk[8] , x[5] );
 	ToffoliImpl ( wrk[8] , p[8] , x[5] );
 	ToffoliImpl ( p[8] , wrk[8] , x[5] );
 	ToffoliImpl ( p[9] , wrk[9] , x[5] );
 	ToffoliImpl ( wrk[9] , p[9] , x[5] );
 	ToffoliImpl ( p[9] , wrk[9] , x[5] );
 	ToffoliImpl ( p[10] , wrk[10] , x[5] );
 	ToffoliImpl ( wrk[10] , p[10] , x[5] );
 	ToffoliImpl ( p[10] , wrk[10] , x[5] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[6] );
 	C_ADD ( wrk2 , tmp , p , x[6] );
 	C_ADD ( wrk2 , tmp , p , x[6] );
 	C_ADD ( wrk2 , tmp , p , x[6] );
 	C_ADD ( wrk2 , tmp , p , x[6] );
 	C_ADD ( wrk2 , tmp , p , x[6] );
 	C_ADD ( wrk2 , tmp , p , x[6] );
 	ToffoliImpl ( p[0] , wrk[0] , x[6] );
 	ToffoliImpl ( wrk[0] , p[0] , x[6] );
 	ToffoliImpl ( p[0] , wrk[0] , x[6] );
 	ToffoliImpl ( p[1] , wrk[1] , x[6] );
 	ToffoliImpl ( wrk[1] , p[1] , x[6] );
 	ToffoliImpl ( p[1] , wrk[1] , x[6] );
 	ToffoliImpl ( p[2] , wrk[2] , x[6] );
 	ToffoliImpl ( wrk[2] , p[2] , x[6] );
 	ToffoliImpl ( p[2] , wrk[2] , x[6] );
 	ToffoliImpl ( p[3] , wrk[3] , x[6] );
 	ToffoliImpl ( wrk[3] , p[3] , x[6] );
 	ToffoliImpl ( p[3] , wrk[3] , x[6] );
 	ToffoliImpl ( p[4] , wrk[4] , x[6] );
 	ToffoliImpl ( wrk[4] , p[4] , x[6] );
 	ToffoliImpl ( p[4] , wrk[4] , x[6] );
 	ToffoliImpl ( p[5] , wrk[5] , x[6] );
 	ToffoliImpl ( wrk[5] , p[5] , x[6] );
 	ToffoliImpl ( p[5] , wrk[5] , x[6] );
 	ToffoliImpl ( p[6] , wrk[6] , x[6] );
 	ToffoliImpl ( wrk[6] , p[6] , x[6] );
 	ToffoliImpl ( p[6] , wrk[6] , x[6] );
 	ToffoliImpl ( p[7] , wrk[7] , x[6] );
 	ToffoliImpl ( wrk[7] , p[7] , x[6] );
 	ToffoliImpl ( p[7] , wrk[7] , x[6] );
 	ToffoliImpl ( p[8] , wrk[8] , x[6] );
 	ToffoliImpl ( wrk[8] , p[8] , x[6] );
 	ToffoliImpl ( p[8] , wrk[8] , x[6] );
 	ToffoliImpl ( p[9] , wrk[9] , x[6] );
 	ToffoliImpl ( wrk[9] , p[9] , x[6] );
 	ToffoliImpl ( p[9] , wrk[9] , x[6] );
 	ToffoliImpl ( p[10] , wrk[10] , x[6] );
 	ToffoliImpl ( wrk[10] , p[10] , x[6] );
 	ToffoliImpl ( p[10] , wrk[10] , x[6] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[7] );
 	C_ADD ( wrk2 , tmp , p , x[7] );
 	C_ADD ( wrk2 , tmp , p , x[7] );
 	C_ADD ( wrk2 , tmp , p , x[7] );
 	C_ADD ( wrk2 , tmp , p , x[7] );
 	C_ADD ( wrk2 , tmp , p , x[7] );
 	C_ADD ( wrk2 , tmp , p , x[7] );
 	C_ADD ( wrk2 , tmp , p , x[7] );
 	ToffoliImpl ( p[0] , wrk[0] , x[7] );
 	ToffoliImpl ( wrk[0] , p[0] , x[7] );
 	ToffoliImpl ( p[0] , wrk[0] , x[7] );
 	ToffoliImpl ( p[1] , wrk[1] , x[7] );
 	ToffoliImpl ( wrk[1] , p[1] , x[7] );
 	ToffoliImpl ( p[1] , wrk[1] , x[7] );
 	ToffoliImpl ( p[2] , wrk[2] , x[7] );
 	ToffoliImpl ( wrk[2] , p[2] , x[7] );
 	ToffoliImpl ( p[2] , wrk[2] , x[7] );
 	ToffoliImpl ( p[3] , wrk[3] , x[7] );
 	ToffoliImpl ( wrk[3] , p[3] , x[7] );
 	ToffoliImpl ( p[3] , wrk[3] , x[7] );
 	ToffoliImpl ( p[4] , wrk[4] , x[7] );
 	ToffoliImpl ( wrk[4] , p[4] , x[7] );
 	ToffoliImpl ( p[4] , wrk[4] , x[7] );
 	ToffoliImpl ( p[5] , wrk[5] , x[7] );
 	ToffoliImpl ( wrk[5] , p[5] , x[7] );
 	ToffoliImpl ( p[5] , wrk[5] , x[7] );
 	ToffoliImpl ( p[6] , wrk[6] , x[7] );
 	ToffoliImpl ( wrk[6] , p[6] , x[7] );
 	ToffoliImpl ( p[6] , wrk[6] , x[7] );
 	ToffoliImpl ( p[7] , wrk[7] , x[7] );
 	ToffoliImpl ( wrk[7] , p[7] , x[7] );
 	ToffoliImpl ( p[7] , wrk[7] , x[7] );
 	ToffoliImpl ( p[8] , wrk[8] , x[7] );
 	ToffoliImpl ( wrk[8] , p[8] , x[7] );
 	ToffoliImpl ( p[8] , wrk[8] , x[7] );
 	ToffoliImpl ( p[9] , wrk[9] , x[7] );
 	ToffoliImpl ( wrk[9] , p[9] , x[7] );
 	ToffoliImpl ( p[9] , wrk[9] , x[7] );
 	ToffoliImpl ( p[10] , wrk[10] , x[7] );
 	ToffoliImpl ( wrk[10] , p[10] , x[7] );
 	ToffoliImpl ( p[10] , wrk[10] , x[7] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[8] );
 	C_ADD ( wrk2 , tmp , p , x[8] );
 	C_ADD ( wrk2 , tmp , p , x[8] );
 	C_ADD ( wrk2 , tmp , p , x[8] );
 	C_ADD ( wrk2 , tmp , p , x[8] );
 	C_ADD ( wrk2 , tmp , p , x[8] );
 	C_ADD ( wrk2 , tmp , p , x[8] );
 	C_ADD ( wrk2 , tmp , p , x[8] );
 	C_ADD ( wrk2 , tmp , p , x[8] );
 	ToffoliImpl ( p[0] , wrk[0] , x[8] );
 	ToffoliImpl ( wrk[0] , p[0] , x[8] );
 	ToffoliImpl ( p[0] , wrk[0] , x[8] );
 	ToffoliImpl ( p[1] , wrk[1] , x[8] );
 	ToffoliImpl ( wrk[1] , p[1] , x[8] );
 	ToffoliImpl ( p[1] , wrk[1] , x[8] );
 	ToffoliImpl ( p[2] , wrk[2] , x[8] );
 	ToffoliImpl ( wrk[2] , p[2] , x[8] );
 	ToffoliImpl ( p[2] , wrk[2] , x[8] );
 	ToffoliImpl ( p[3] , wrk[3] , x[8] );
 	ToffoliImpl ( wrk[3] , p[3] , x[8] );
 	ToffoliImpl ( p[3] , wrk[3] , x[8] );
 	ToffoliImpl ( p[4] , wrk[4] , x[8] );
 	ToffoliImpl ( wrk[4] , p[4] , x[8] );
 	ToffoliImpl ( p[4] , wrk[4] , x[8] );
 	ToffoliImpl ( p[5] , wrk[5] , x[8] );
 	ToffoliImpl ( wrk[5] , p[5] , x[8] );
 	ToffoliImpl ( p[5] , wrk[5] , x[8] );
 	ToffoliImpl ( p[6] , wrk[6] , x[8] );
 	ToffoliImpl ( wrk[6] , p[6] , x[8] );
 	ToffoliImpl ( p[6] , wrk[6] , x[8] );
 	ToffoliImpl ( p[7] , wrk[7] , x[8] );
 	ToffoliImpl ( wrk[7] , p[7] , x[8] );
 	ToffoliImpl ( p[7] , wrk[7] , x[8] );
 	ToffoliImpl ( p[8] , wrk[8] , x[8] );
 	ToffoliImpl ( wrk[8] , p[8] , x[8] );
 	ToffoliImpl ( p[8] , wrk[8] , x[8] );
 	ToffoliImpl ( p[9] , wrk[9] , x[8] );
 	ToffoliImpl ( wrk[9] , p[9] , x[8] );
 	ToffoliImpl ( p[9] , wrk[9] , x[8] );
 	ToffoliImpl ( p[10] , wrk[10] , x[8] );
 	ToffoliImpl ( wrk[10] , p[10] , x[8] );
 	ToffoliImpl ( p[10] , wrk[10] , x[8] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[9] );
 	C_ADD ( wrk2 , tmp , p , x[9] );
 	C_ADD ( wrk2 , tmp , p , x[9] );
 	C_ADD ( wrk2 , tmp , p , x[9] );
 	C_ADD ( wrk2 , tmp , p , x[9] );
 	C_ADD ( wrk2 , tmp , p , x[9] );
 	C_ADD ( wrk2 , tmp , p , x[9] );
 	C_ADD ( wrk2 , tmp , p , x[9] );
 	C_ADD ( wrk2 , tmp , p , x[9] );
 	C_ADD ( wrk2 , tmp , p , x[9] );
 	ToffoliImpl ( p[0] , wrk[0] , x[9] );
 	ToffoliImpl ( wrk[0] , p[0] , x[9] );
 	ToffoliImpl ( p[0] , wrk[0] , x[9] );
 	ToffoliImpl ( p[1] , wrk[1] , x[9] );
 	ToffoliImpl ( wrk[1] , p[1] , x[9] );
 	ToffoliImpl ( p[1] , wrk[1] , x[9] );
 	ToffoliImpl ( p[2] , wrk[2] , x[9] );
 	ToffoliImpl ( wrk[2] , p[2] , x[9] );
 	ToffoliImpl ( p[2] , wrk[2] , x[9] );
 	ToffoliImpl ( p[3] , wrk[3] , x[9] );
 	ToffoliImpl ( wrk[3] , p[3] , x[9] );
 	ToffoliImpl ( p[3] , wrk[3] , x[9] );
 	ToffoliImpl ( p[4] , wrk[4] , x[9] );
 	ToffoliImpl ( wrk[4] , p[4] , x[9] );
 	ToffoliImpl ( p[4] , wrk[4] , x[9] );
 	ToffoliImpl ( p[5] , wrk[5] , x[9] );
 	ToffoliImpl ( wrk[5] , p[5] , x[9] );
 	ToffoliImpl ( p[5] , wrk[5] , x[9] );
 	ToffoliImpl ( p[6] , wrk[6] , x[9] );
 	ToffoliImpl ( wrk[6] , p[6] , x[9] );
 	ToffoliImpl ( p[6] , wrk[6] , x[9] );
 	ToffoliImpl ( p[7] , wrk[7] , x[9] );
 	ToffoliImpl ( wrk[7] , p[7] , x[9] );
 	ToffoliImpl ( p[7] , wrk[7] , x[9] );
 	ToffoliImpl ( p[8] , wrk[8] , x[9] );
 	ToffoliImpl ( wrk[8] , p[8] , x[9] );
 	ToffoliImpl ( p[8] , wrk[8] , x[9] );
 	ToffoliImpl ( p[9] , wrk[9] , x[9] );
 	ToffoliImpl ( wrk[9] , p[9] , x[9] );
 	ToffoliImpl ( p[9] , wrk[9] , x[9] );
 	ToffoliImpl ( p[10] , wrk[10] , x[9] );
 	ToffoliImpl ( wrk[10] , p[10] , x[9] );
 	ToffoliImpl ( p[10] , wrk[10] , x[9] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( p , tmp , wrk , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	C_ADD ( wrk2 , tmp , p , x[10] );
 	ToffoliImpl ( p[0] , wrk[0] , x[10] );
 	ToffoliImpl ( wrk[0] , p[0] , x[10] );
 	ToffoliImpl ( p[0] , wrk[0] , x[10] );
 	ToffoliImpl ( p[1] , wrk[1] , x[10] );
 	ToffoliImpl ( wrk[1] , p[1] , x[10] );
 	ToffoliImpl ( p[1] , wrk[1] , x[10] );
 	ToffoliImpl ( p[2] , wrk[2] , x[10] );
 	ToffoliImpl ( wrk[2] , p[2] , x[10] );
 	ToffoliImpl ( p[2] , wrk[2] , x[10] );
 	ToffoliImpl ( p[3] , wrk[3] , x[10] );
 	ToffoliImpl ( wrk[3] , p[3] , x[10] );
 	ToffoliImpl ( p[3] , wrk[3] , x[10] );
 	ToffoliImpl ( p[4] , wrk[4] , x[10] );
 	ToffoliImpl ( wrk[4] , p[4] , x[10] );
 	ToffoliImpl ( p[4] , wrk[4] , x[10] );
 	ToffoliImpl ( p[5] , wrk[5] , x[10] );
 	ToffoliImpl ( wrk[5] , p[5] , x[10] );
 	ToffoliImpl ( p[5] , wrk[5] , x[10] );
 	ToffoliImpl ( p[6] , wrk[6] , x[10] );
 	ToffoliImpl ( wrk[6] , p[6] , x[10] );
 	ToffoliImpl ( p[6] , wrk[6] , x[10] );
 	ToffoliImpl ( p[7] , wrk[7] , x[10] );
 	ToffoliImpl ( wrk[7] , p[7] , x[10] );
 	ToffoliImpl ( p[7] , wrk[7] , x[10] );
 	ToffoliImpl ( p[8] , wrk[8] , x[10] );
 	ToffoliImpl ( wrk[8] , p[8] , x[10] );
 	ToffoliImpl ( p[8] , wrk[8] , x[10] );
 	ToffoliImpl ( p[9] , wrk[9] , x[10] );
 	ToffoliImpl ( wrk[9] , p[9] , x[10] );
 	ToffoliImpl ( p[9] , wrk[9] , x[10] );
 	ToffoliImpl ( p[10] , wrk[10] , x[10] );
 	ToffoliImpl ( wrk[10] , p[10] , x[10] );
 	ToffoliImpl ( p[10] , wrk[10] , x[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , y[10] );
 	CNOT ( tmp[9] , y[9] );
 	CNOT ( tmp[8] , y[8] );
 	CNOT ( tmp[7] , y[7] );
 	CNOT ( tmp[6] , y[6] );
 	CNOT ( tmp[5] , y[5] );
 	CNOT ( tmp[4] , y[4] );
 	CNOT ( tmp[3] , y[3] );
 	CNOT ( tmp[2] , y[2] );
 	CNOT ( tmp[1] , y[1] );
 	CNOT ( tmp[0] , y[0] );
 }

module C_C_Toffoli ( qbit target , qbit ctrl1 , qbit ctrl2 , qbit ctrl3 , qbit ctrl4 ) {
 	CNOT ( ctrl1 , ctrl2 );
 	ToffoliImpl ( target , ctrl1 , ctrl3 );
 	X ( ctrl4 );
 }

module C_C_EvaluateOR ( qbit target , qbit ctr2 , qbit ctr1 , qbit ctrl1 , qbit ctrl2 ) {
 	ToffoliImpl ( ctr1 , ctrl1 , ctrl2 );
 	ToffoliImpl ( ctr2 , ctrl1 , ctrl2 );
 	C_C_Toffoli ( target , ctr2 , ctr1 , ctrl1 , ctrl2 );
 	ToffoliImpl ( target , ctrl1 , ctrl2 );
 }

module C_C_InvEvaluateOR ( qbit target , qbit ctr2 , qbit ctr1 , qbit ctrl1 , qbit ctrl2 ) {
 	ToffoliImpl ( target , ctrl1 , ctrl2 );
 	C_C_Toffoli ( target , ctr2 , ctr1 , ctrl1 , ctrl2 );
 	ToffoliImpl ( ctr2 , ctrl1 , ctrl2 );
 	ToffoliImpl ( ctr1 , ctrl1 , ctrl2 );
 }

module C_C_ADD ( qbit* x , qbit* y , qbit* s , qbit ctrl1 , qbit ctrl2 ) {
 	qbit c1[12];
	qbit c2[12];
	qbit tmp[2];
	qbit s1[11];
	PrepZ ( c1[0] , 0 );
 	C_C_Toffoli ( c1[1] , x[0] , y[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[0] , c1[0] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[1] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[0] , c1[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[0] , c1[0] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[1] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[0] , c1[0] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[0] , c1[0] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[0] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[0] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[0] , c1[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[2] , x[1] , y[1] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[1] , c1[1] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[2] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[1] , c1[1] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[1] , c1[1] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[2] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[1] , c1[1] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[1] , c1[1] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[1] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[1] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[1] , c1[1] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[3] , x[2] , y[2] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[2] , c1[2] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[3] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[2] , c1[2] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[2] , c1[2] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[3] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[2] , c1[2] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[2] , c1[2] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[2] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[2] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[2] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[2] , c1[2] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[4] , x[3] , y[3] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[3] , c1[3] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[4] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[3] , c1[3] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[3] , c1[3] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[4] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[3] , c1[3] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[3] , c1[3] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[3] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[3] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[3] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[3] , c1[3] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[5] , x[4] , y[4] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[4] , c1[4] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[5] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[4] , c1[4] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[4] , c1[4] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[5] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[4] , c1[4] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[4] , c1[4] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[4] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[4] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[4] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[4] , c1[4] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[6] , x[5] , y[5] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[5] , c1[5] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[6] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[5] , c1[5] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[5] , c1[5] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[6] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[5] , c1[5] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[5] , c1[5] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[5] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[5] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[5] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[5] , c1[5] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[7] , x[6] , y[6] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[6] , c1[6] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[7] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[6] , c1[6] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[6] , c1[6] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[7] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[6] , c1[6] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[6] , c1[6] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[6] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[6] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[6] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[6] , c1[6] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[8] , x[7] , y[7] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[7] , c1[7] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[8] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[7] , c1[7] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[7] , c1[7] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[8] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[7] , c1[7] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[7] , c1[7] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[7] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[7] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[7] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[7] , c1[7] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[9] , x[8] , y[8] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[8] , c1[8] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[9] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[8] , c1[8] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[8] , c1[8] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[9] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[8] , c1[8] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[8] , c1[8] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[8] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[8] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[8] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[8] , c1[8] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[10] , x[9] , y[9] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[9] , c1[9] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[10] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[9] , c1[9] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[9] , c1[9] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[10] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[9] , c1[9] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[9] , c1[9] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[9] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[9] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[9] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[9] , c1[9] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[11] , x[10] , y[10] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[10] , c1[10] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[11] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[10] , c1[10] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[10] , c1[10] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[11] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[10] , c1[10] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[10] , c1[10] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[10] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[10] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[10] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[10] , c1[10] , ctrl1 , ctrl2 );
 	C_Toffoli ( c2[0] , c1[11] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[1] , s1[0] , c2[0] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[0] , c2[0] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[0] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[0] , c2[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[2] , s1[1] , c2[1] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[1] , c2[1] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[1] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[1] , c2[1] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[3] , s1[2] , c2[2] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[2] , c2[2] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[2] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[2] , c2[2] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[4] , s1[3] , c2[3] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[3] , c2[3] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[3] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[3] , c2[3] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[5] , s1[4] , c2[4] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[4] , c2[4] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[4] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[4] , c2[4] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[6] , s1[5] , c2[5] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[5] , c2[5] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[5] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[5] , c2[5] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[7] , s1[6] , c2[6] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[6] , c2[6] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[6] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[6] , c2[6] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[8] , s1[7] , c2[7] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[7] , c2[7] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[7] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[7] , c2[7] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[9] , s1[8] , c2[8] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[8] , c2[8] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[8] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[8] , c2[8] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[10] , s1[9] , c2[9] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[9] , c2[9] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[9] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[9] , c2[9] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[11] , s1[10] , c2[10] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , s1[10] , c2[10] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[10] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , s1[10] , c2[10] , ctrl1 , ctrl2 );
 	C_Toffoli ( s[1] , c2[11] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[11] , s1[10] , c2[10] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[10] , s1[9] , c2[9] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[9] , s1[8] , c2[8] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[8] , s1[7] , c2[7] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[7] , s1[6] , c2[6] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[6] , s1[5] , c2[5] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[5] , s1[4] , c2[4] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[4] , s1[3] , c2[3] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[3] , s1[2] , c2[2] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[2] , s1[1] , c2[1] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c2[1] , s1[0] , c2[0] , ctrl1 , ctrl2 );
 	C_Toffoli ( c2[0] , c1[11] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[10] , c1[10] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[10] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[10] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[10] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[10] , c1[10] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[10] , c1[10] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[11] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[10] , c1[10] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[10] , c1[10] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[11] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[10] , c1[10] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[11] , x[10] , y[10] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[9] , c1[9] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[9] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[9] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[9] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[9] , c1[9] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[9] , c1[9] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[10] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[9] , c1[9] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[9] , c1[9] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[10] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[9] , c1[9] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[10] , x[9] , y[9] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[8] , c1[8] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[8] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[8] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[8] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[8] , c1[8] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[8] , c1[8] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[9] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[8] , c1[8] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[8] , c1[8] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[9] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[8] , c1[8] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[9] , x[8] , y[8] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[7] , c1[7] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[7] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[7] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[7] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[7] , c1[7] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[7] , c1[7] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[8] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[7] , c1[7] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[7] , c1[7] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[8] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[7] , c1[7] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[8] , x[7] , y[7] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[6] , c1[6] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[6] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[6] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[6] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[6] , c1[6] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[6] , c1[6] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[7] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[6] , c1[6] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[6] , c1[6] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[7] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[6] , c1[6] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[7] , x[6] , y[6] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[5] , c1[5] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[5] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[5] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[5] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[5] , c1[5] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[5] , c1[5] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[6] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[5] , c1[5] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[5] , c1[5] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[6] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[5] , c1[5] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[6] , x[5] , y[5] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[4] , c1[4] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[4] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[4] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[4] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[4] , c1[4] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[4] , c1[4] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[5] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[4] , c1[4] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[4] , c1[4] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[5] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[4] , c1[4] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[5] , x[4] , y[4] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[3] , c1[3] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[3] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[3] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[3] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[3] , c1[3] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[3] , c1[3] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[4] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[3] , c1[3] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[3] , c1[3] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[4] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[3] , c1[3] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[4] , x[3] , y[3] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[2] , c1[2] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[2] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[2] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[2] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[2] , c1[2] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[2] , c1[2] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[3] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[2] , c1[2] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[2] , c1[2] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[3] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[2] , c1[2] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[3] , x[2] , y[2] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[1] , c1[1] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[1] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[1] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[1] , c1[1] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[1] , c1[1] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[2] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[1] , c1[1] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[1] , c1[1] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[2] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[1] , c1[1] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[2] , x[1] , y[1] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[0] , y[0] , c1[0] , ctrl1 , ctrl2 );
 	C_C_EvaluateOR ( tmp[1] , tmp[0] , x[0] , ctrl1 , ctrl2 );
 	C_Toffoli ( s1[0] , tmp[1] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[1] , tmp[0] , x[0] , ctrl1 , ctrl2 );
 	C_C_InvEvaluateOR ( tmp[0] , y[0] , c1[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[0] , c1[0] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[1] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , y[0] , c1[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[0] , c1[0] , ctrl1 , ctrl2 );
 	C_Toffoli ( c1[1] , tmp[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( tmp[0] , x[0] , c1[0] , ctrl1 , ctrl2 );
 	C_C_Toffoli ( c1[1] , x[0] , y[0] , ctrl1 , ctrl2 );
 }

module C_MUL ( qbit* x , qbit* y , qbit* p , qbit ctrl ) {
 	qbit tmp[11];
	qbit wrk[11];
	qbit wrk2[11];
	PrepZ ( p[0] , 0 );
 	ToffoliImpl ( tmp[0] , y[0] , ctrl );
 	PrepZ ( p[1] , 0 );
 	ToffoliImpl ( tmp[1] , y[1] , ctrl );
 	PrepZ ( p[2] , 0 );
 	ToffoliImpl ( tmp[2] , y[2] , ctrl );
 	PrepZ ( p[3] , 0 );
 	ToffoliImpl ( tmp[3] , y[3] , ctrl );
 	PrepZ ( p[4] , 0 );
 	ToffoliImpl ( tmp[4] , y[4] , ctrl );
 	PrepZ ( p[5] , 0 );
 	ToffoliImpl ( tmp[5] , y[5] , ctrl );
 	PrepZ ( p[6] , 0 );
 	ToffoliImpl ( tmp[6] , y[6] , ctrl );
 	PrepZ ( p[7] , 0 );
 	ToffoliImpl ( tmp[7] , y[7] , ctrl );
 	PrepZ ( p[8] , 0 );
 	ToffoliImpl ( tmp[8] , y[8] , ctrl );
 	PrepZ ( p[9] , 0 );
 	ToffoliImpl ( tmp[9] , y[9] , ctrl );
 	PrepZ ( p[10] , 0 );
 	ToffoliImpl ( tmp[10] , y[10] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[0] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[0] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[0] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[0] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[0] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[0] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[0] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[0] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[0] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[0] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[0] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[0] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[0] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[0] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[0] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[0] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[0] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[0] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[0] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[0] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[0] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[0] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[0] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[0] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[0] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[0] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[0] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[0] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[0] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[0] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[0] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[0] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[0] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[1] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[1] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[1] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[1] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[1] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[1] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[1] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[1] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[1] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[1] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[1] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[1] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[1] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[1] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[1] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[1] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[1] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[1] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[1] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[1] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[1] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[1] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[1] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[1] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[1] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[1] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[1] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[1] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[1] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[1] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[1] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[1] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[1] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[1] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[2] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[2] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[2] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[2] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[2] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[2] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[2] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[2] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[2] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[2] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[2] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[2] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[2] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[2] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[2] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[2] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[2] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[2] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[2] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[2] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[2] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[2] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[2] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[2] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[2] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[2] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[2] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[2] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[2] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[2] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[2] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[2] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[2] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[2] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[2] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[3] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[3] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[3] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[3] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[3] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[3] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[3] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[3] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[3] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[3] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[3] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[3] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[3] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[3] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[3] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[3] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[3] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[3] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[3] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[3] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[3] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[3] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[3] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[3] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[3] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[3] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[3] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[3] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[3] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[3] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[3] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[3] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[3] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[3] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[3] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[3] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[4] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[4] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[4] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[4] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[4] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[4] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[4] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[4] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[4] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[4] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[4] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[4] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[4] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[4] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[4] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[4] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[4] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[4] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[4] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[4] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[4] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[4] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[4] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[4] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[4] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[4] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[4] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[4] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[4] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[4] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[4] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[4] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[4] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[4] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[4] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[4] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[4] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[5] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[5] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[5] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[5] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[5] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[5] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[5] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[5] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[5] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[5] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[5] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[5] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[5] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[5] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[5] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[5] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[5] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[5] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[5] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[5] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[5] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[5] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[5] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[5] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[5] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[5] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[5] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[5] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[5] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[5] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[5] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[5] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[5] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[6] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[6] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[6] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[6] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[6] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[6] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[6] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[6] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[6] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[6] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[6] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[6] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[6] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[6] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[6] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[6] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[6] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[6] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[6] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[6] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[6] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[6] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[6] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[6] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[6] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[6] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[6] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[6] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[6] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[6] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[6] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[6] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[6] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[7] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[7] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[7] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[7] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[7] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[7] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[7] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[7] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[7] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[7] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[7] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[7] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[7] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[7] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[7] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[7] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[7] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[7] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[7] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[7] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[7] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[7] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[7] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[7] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[7] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[7] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[7] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[7] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[7] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[7] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[7] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[7] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[7] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[8] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[8] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[8] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[8] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[8] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[8] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[8] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[8] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[8] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[8] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[8] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[8] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[8] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[8] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[8] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[8] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[8] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[8] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[8] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[8] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[8] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[8] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[8] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[8] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[8] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[8] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[8] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[8] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[8] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[8] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[8] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[8] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[8] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[9] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[9] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[9] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[9] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[9] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[9] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[9] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[9] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[9] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[9] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[9] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[9] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[9] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[9] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[9] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[9] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[9] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[9] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[9] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[9] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[9] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[9] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[9] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[9] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[9] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[9] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[9] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[9] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[9] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[9] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[9] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[9] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[9] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( p , tmp , wrk , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , p , x[10] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[10] , ctrl );
 	C_Toffoli ( wrk[0] , p[0] , x[10] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[10] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[10] , ctrl );
 	C_Toffoli ( wrk[1] , p[1] , x[10] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[10] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[10] , ctrl );
 	C_Toffoli ( wrk[2] , p[2] , x[10] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[10] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[10] , ctrl );
 	C_Toffoli ( wrk[3] , p[3] , x[10] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[10] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[10] , ctrl );
 	C_Toffoli ( wrk[4] , p[4] , x[10] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[10] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[10] , ctrl );
 	C_Toffoli ( wrk[5] , p[5] , x[10] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[10] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[10] , ctrl );
 	C_Toffoli ( wrk[6] , p[6] , x[10] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[10] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[10] , ctrl );
 	C_Toffoli ( wrk[7] , p[7] , x[10] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[10] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[10] , ctrl );
 	C_Toffoli ( wrk[8] , p[8] , x[10] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[10] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[10] , ctrl );
 	C_Toffoli ( wrk[9] , p[9] , x[10] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[10] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[10] , ctrl );
 	C_Toffoli ( wrk[10] , p[10] , x[10] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , y[10] , ctrl );
 	ToffoliImpl ( tmp[9] , y[9] , ctrl );
 	ToffoliImpl ( tmp[8] , y[8] , ctrl );
 	ToffoliImpl ( tmp[7] , y[7] , ctrl );
 	ToffoliImpl ( tmp[6] , y[6] , ctrl );
 	ToffoliImpl ( tmp[5] , y[5] , ctrl );
 	ToffoliImpl ( tmp[4] , y[4] , ctrl );
 	ToffoliImpl ( tmp[3] , y[3] , ctrl );
 	ToffoliImpl ( tmp[2] , y[2] , ctrl );
 	ToffoliImpl ( tmp[1] , y[1] , ctrl );
 	ToffoliImpl ( tmp[0] , y[0] , ctrl );
 }

module C_unMUL ( qbit* x , qbit* y , qbit* p , qbit ctrl ) {
 	qbit tmp[11];
	qbit wrk[11];
	qbit tp[11];
	qbit wrk2[11];
	ToffoliImpl ( tmp[0] , y[0] , ctrl );
 	ToffoliImpl ( tmp[1] , y[1] , ctrl );
 	ToffoliImpl ( tmp[2] , y[2] , ctrl );
 	ToffoliImpl ( tmp[3] , y[3] , ctrl );
 	ToffoliImpl ( tmp[4] , y[4] , ctrl );
 	ToffoliImpl ( tmp[5] , y[5] , ctrl );
 	ToffoliImpl ( tmp[6] , y[6] , ctrl );
 	ToffoliImpl ( tmp[7] , y[7] , ctrl );
 	ToffoliImpl ( tmp[8] , y[8] , ctrl );
 	ToffoliImpl ( tmp[9] , y[9] , ctrl );
 	ToffoliImpl ( tmp[10] , y[10] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[0] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[0] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[0] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[0] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[0] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[0] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[0] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[0] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[0] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[0] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[0] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[0] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[0] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[0] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[0] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[0] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[0] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[0] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[0] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[0] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[0] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[0] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[0] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[0] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[0] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[0] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[0] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[0] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[0] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[0] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[0] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[0] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[0] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[0] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[0] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[0] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[0] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[0] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[0] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[0] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[0] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[0] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[0] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[0] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[1] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[1] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[1] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[1] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[1] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[1] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[1] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[1] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[1] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[1] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[1] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[1] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[1] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[1] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[1] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[1] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[1] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[1] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[1] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[1] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[1] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[1] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[1] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[1] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[1] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[1] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[1] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[1] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[1] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[1] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[1] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[1] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[1] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[1] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[1] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[1] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[1] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[1] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[1] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[1] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[1] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[1] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[1] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[1] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[1] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[2] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[2] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[2] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[2] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[2] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[2] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[2] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[2] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[2] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[2] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[2] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[2] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[2] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[2] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[2] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[2] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[2] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[2] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[2] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[2] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[2] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[2] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[2] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[2] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[2] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[2] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[2] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[2] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[2] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[2] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[2] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[2] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[2] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[2] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[2] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[2] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[2] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[2] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[2] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[2] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[2] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[2] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[2] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[2] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[2] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[2] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[3] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[3] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[3] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[3] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[3] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[3] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[3] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[3] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[3] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[3] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[3] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[3] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[3] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[3] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[3] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[3] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[3] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[3] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[3] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[3] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[3] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[3] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[3] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[3] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[3] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[3] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[3] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[3] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[3] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[3] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[3] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[3] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[3] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[3] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[3] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[3] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[3] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[3] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[3] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[3] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[3] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[3] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[3] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[3] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[3] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[3] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[3] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[4] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[4] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[4] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[4] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[4] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[4] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[4] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[4] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[4] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[4] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[4] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[4] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[4] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[4] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[4] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[4] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[4] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[4] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[4] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[4] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[4] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[4] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[4] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[4] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[4] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[4] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[4] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[4] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[4] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[4] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[4] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[4] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[4] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[4] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[4] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[4] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[4] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[4] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[4] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[4] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[4] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[4] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[4] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[4] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[4] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[4] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[4] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[4] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[5] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[5] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[5] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[5] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[5] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[5] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[5] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[5] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[5] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[5] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[5] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[5] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[5] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[5] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[5] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[5] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[5] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[5] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[5] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[5] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[5] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[5] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[5] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[5] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[5] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[5] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[5] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[5] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[5] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[5] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[5] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[5] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[5] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[5] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[5] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[5] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[5] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[5] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[5] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[5] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[5] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[5] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[5] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[5] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[5] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[6] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[6] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[6] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[6] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[6] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[6] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[6] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[6] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[6] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[6] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[6] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[6] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[6] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[6] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[6] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[6] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[6] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[6] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[6] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[6] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[6] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[6] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[6] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[6] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[6] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[6] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[6] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[6] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[6] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[6] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[6] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[6] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[6] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[6] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[6] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[6] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[6] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[6] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[6] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[6] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[6] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[6] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[6] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[6] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[6] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[7] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[7] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[7] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[7] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[7] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[7] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[7] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[7] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[7] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[7] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[7] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[7] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[7] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[7] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[7] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[7] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[7] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[7] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[7] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[7] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[7] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[7] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[7] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[7] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[7] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[7] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[7] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[7] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[7] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[7] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[7] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[7] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[7] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[7] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[7] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[7] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[7] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[7] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[7] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[7] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[7] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[7] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[7] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[7] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[7] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[8] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[8] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[8] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[8] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[8] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[8] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[8] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[8] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[8] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[8] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[8] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[8] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[8] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[8] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[8] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[8] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[8] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[8] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[8] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[8] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[8] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[8] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[8] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[8] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[8] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[8] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[8] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[8] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[8] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[8] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[8] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[8] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[8] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[8] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[8] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[8] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[8] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[8] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[8] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[8] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[8] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[8] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[8] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[8] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[8] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[9] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[9] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[9] , ctrl );
 	C_Toffoli ( wrk[0] , tp[0] , x[9] , ctrl );
 	C_Toffoli ( tp[0] , wrk[0] , x[9] , ctrl );
 	C_Toffoli ( p[0] , tp[0] , x[9] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[9] , ctrl );
 	C_Toffoli ( wrk[1] , tp[1] , x[9] , ctrl );
 	C_Toffoli ( tp[1] , wrk[1] , x[9] , ctrl );
 	C_Toffoli ( p[1] , tp[1] , x[9] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[9] , ctrl );
 	C_Toffoli ( wrk[2] , tp[2] , x[9] , ctrl );
 	C_Toffoli ( tp[2] , wrk[2] , x[9] , ctrl );
 	C_Toffoli ( p[2] , tp[2] , x[9] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[9] , ctrl );
 	C_Toffoli ( wrk[3] , tp[3] , x[9] , ctrl );
 	C_Toffoli ( tp[3] , wrk[3] , x[9] , ctrl );
 	C_Toffoli ( p[3] , tp[3] , x[9] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[9] , ctrl );
 	C_Toffoli ( wrk[4] , tp[4] , x[9] , ctrl );
 	C_Toffoli ( tp[4] , wrk[4] , x[9] , ctrl );
 	C_Toffoli ( p[4] , tp[4] , x[9] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[9] , ctrl );
 	C_Toffoli ( wrk[5] , tp[5] , x[9] , ctrl );
 	C_Toffoli ( tp[5] , wrk[5] , x[9] , ctrl );
 	C_Toffoli ( p[5] , tp[5] , x[9] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[9] , ctrl );
 	C_Toffoli ( wrk[6] , tp[6] , x[9] , ctrl );
 	C_Toffoli ( tp[6] , wrk[6] , x[9] , ctrl );
 	C_Toffoli ( p[6] , tp[6] , x[9] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[9] , ctrl );
 	C_Toffoli ( wrk[7] , tp[7] , x[9] , ctrl );
 	C_Toffoli ( tp[7] , wrk[7] , x[9] , ctrl );
 	C_Toffoli ( p[7] , tp[7] , x[9] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[9] , ctrl );
 	C_Toffoli ( wrk[8] , tp[8] , x[9] , ctrl );
 	C_Toffoli ( tp[8] , wrk[8] , x[9] , ctrl );
 	C_Toffoli ( p[8] , tp[8] , x[9] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[9] , ctrl );
 	C_Toffoli ( wrk[9] , tp[9] , x[9] , ctrl );
 	C_Toffoli ( tp[9] , wrk[9] , x[9] , ctrl );
 	C_Toffoli ( p[9] , tp[9] , x[9] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[9] , ctrl );
 	C_Toffoli ( wrk[10] , tp[10] , x[9] , ctrl );
 	C_Toffoli ( tp[10] , wrk[10] , x[9] , ctrl );
 	C_Toffoli ( p[10] , tp[10] , x[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[10] , ctrl );
 	C_Toffoli ( p[0] , wrk[0] , x[10] , ctrl );
 	C_Toffoli ( p[1] , wrk[1] , x[10] , ctrl );
 	C_Toffoli ( p[2] , wrk[2] , x[10] , ctrl );
 	C_Toffoli ( p[3] , wrk[3] , x[10] , ctrl );
 	C_Toffoli ( p[4] , wrk[4] , x[10] , ctrl );
 	C_Toffoli ( p[5] , wrk[5] , x[10] , ctrl );
 	C_Toffoli ( p[6] , wrk[6] , x[10] , ctrl );
 	C_Toffoli ( p[7] , wrk[7] , x[10] , ctrl );
 	C_Toffoli ( p[8] , wrk[8] , x[10] , ctrl );
 	C_Toffoli ( p[9] , wrk[9] , x[10] , ctrl );
 	C_Toffoli ( p[10] , wrk[10] , x[10] , ctrl );
 	C_C_ADD ( tp , tmp , wrk , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	C_C_ADD ( wrk2 , tmp , tp , x[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[9] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[9] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[8] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[8] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[7] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[7] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[6] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[6] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[5] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[5] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[4] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[4] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[3] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[3] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[2] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[2] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[1] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[1] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[0] , tmp[10] , ctrl );
 	ToffoliImpl ( tmp[10] , tmp[0] , ctrl );
 	ToffoliImpl ( tmp[10] , y[10] , ctrl );
 	ToffoliImpl ( tmp[9] , y[9] , ctrl );
 	ToffoliImpl ( tmp[8] , y[8] , ctrl );
 	ToffoliImpl ( tmp[7] , y[7] , ctrl );
 	ToffoliImpl ( tmp[6] , y[6] , ctrl );
 	ToffoliImpl ( tmp[5] , y[5] , ctrl );
 	ToffoliImpl ( tmp[4] , y[4] , ctrl );
 	ToffoliImpl ( tmp[3] , y[3] , ctrl );
 	ToffoliImpl ( tmp[2] , y[2] , ctrl );
 	ToffoliImpl ( tmp[1] , y[1] , ctrl );
 	ToffoliImpl ( tmp[0] , y[0] , ctrl );
 }

module unMUL ( qbit* x , qbit* y , qbit* p ) {
 	qbit tmp[11];
	qbit wrk[11];
	qbit tp[11];
	qbit wrk2[11];
	CNOT ( tmp[0] , y[0] );
 	CNOT ( tmp[1] , y[1] );
 	CNOT ( tmp[2] , y[2] );
 	CNOT ( tmp[3] , y[3] );
 	CNOT ( tmp[4] , y[4] );
 	CNOT ( tmp[5] , y[5] );
 	CNOT ( tmp[6] , y[6] );
 	CNOT ( tmp[7] , y[7] );
 	CNOT ( tmp[8] , y[8] );
 	CNOT ( tmp[9] , y[9] );
 	CNOT ( tmp[10] , y[10] );
 	C_ADD ( tp , tmp , wrk , x[0] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[0] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[0] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[0] );
 	ToffoliImpl ( p[0] , tp[0] , x[0] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[0] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[0] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[0] );
 	ToffoliImpl ( p[1] , tp[1] , x[0] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[0] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[0] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[0] );
 	ToffoliImpl ( p[2] , tp[2] , x[0] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[0] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[0] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[0] );
 	ToffoliImpl ( p[3] , tp[3] , x[0] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[0] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[0] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[0] );
 	ToffoliImpl ( p[4] , tp[4] , x[0] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[0] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[0] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[0] );
 	ToffoliImpl ( p[5] , tp[5] , x[0] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[0] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[0] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[0] );
 	ToffoliImpl ( p[6] , tp[6] , x[0] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[0] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[0] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[0] );
 	ToffoliImpl ( p[7] , tp[7] , x[0] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[0] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[0] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[0] );
 	ToffoliImpl ( p[8] , tp[8] , x[0] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[0] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[0] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[0] );
 	ToffoliImpl ( p[9] , tp[9] , x[0] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[0] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[0] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[0] );
 	ToffoliImpl ( p[10] , tp[10] , x[0] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[1] );
 	C_ADD ( wrk2 , tmp , tp , x[1] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[1] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[1] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[1] );
 	ToffoliImpl ( p[0] , tp[0] , x[1] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[1] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[1] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[1] );
 	ToffoliImpl ( p[1] , tp[1] , x[1] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[1] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[1] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[1] );
 	ToffoliImpl ( p[2] , tp[2] , x[1] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[1] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[1] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[1] );
 	ToffoliImpl ( p[3] , tp[3] , x[1] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[1] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[1] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[1] );
 	ToffoliImpl ( p[4] , tp[4] , x[1] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[1] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[1] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[1] );
 	ToffoliImpl ( p[5] , tp[5] , x[1] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[1] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[1] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[1] );
 	ToffoliImpl ( p[6] , tp[6] , x[1] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[1] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[1] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[1] );
 	ToffoliImpl ( p[7] , tp[7] , x[1] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[1] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[1] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[1] );
 	ToffoliImpl ( p[8] , tp[8] , x[1] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[1] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[1] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[1] );
 	ToffoliImpl ( p[9] , tp[9] , x[1] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[1] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[1] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[1] );
 	ToffoliImpl ( p[10] , tp[10] , x[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[2] );
 	C_ADD ( wrk2 , tmp , tp , x[2] );
 	C_ADD ( wrk2 , tmp , tp , x[2] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[2] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[2] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[2] );
 	ToffoliImpl ( p[0] , tp[0] , x[2] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[2] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[2] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[2] );
 	ToffoliImpl ( p[1] , tp[1] , x[2] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[2] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[2] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[2] );
 	ToffoliImpl ( p[2] , tp[2] , x[2] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[2] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[2] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[2] );
 	ToffoliImpl ( p[3] , tp[3] , x[2] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[2] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[2] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[2] );
 	ToffoliImpl ( p[4] , tp[4] , x[2] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[2] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[2] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[2] );
 	ToffoliImpl ( p[5] , tp[5] , x[2] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[2] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[2] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[2] );
 	ToffoliImpl ( p[6] , tp[6] , x[2] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[2] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[2] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[2] );
 	ToffoliImpl ( p[7] , tp[7] , x[2] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[2] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[2] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[2] );
 	ToffoliImpl ( p[8] , tp[8] , x[2] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[2] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[2] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[2] );
 	ToffoliImpl ( p[9] , tp[9] , x[2] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[2] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[2] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[2] );
 	ToffoliImpl ( p[10] , tp[10] , x[2] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[3] );
 	C_ADD ( wrk2 , tmp , tp , x[3] );
 	C_ADD ( wrk2 , tmp , tp , x[3] );
 	C_ADD ( wrk2 , tmp , tp , x[3] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[3] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[3] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[3] );
 	ToffoliImpl ( p[0] , tp[0] , x[3] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[3] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[3] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[3] );
 	ToffoliImpl ( p[1] , tp[1] , x[3] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[3] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[3] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[3] );
 	ToffoliImpl ( p[2] , tp[2] , x[3] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[3] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[3] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[3] );
 	ToffoliImpl ( p[3] , tp[3] , x[3] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[3] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[3] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[3] );
 	ToffoliImpl ( p[4] , tp[4] , x[3] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[3] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[3] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[3] );
 	ToffoliImpl ( p[5] , tp[5] , x[3] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[3] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[3] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[3] );
 	ToffoliImpl ( p[6] , tp[6] , x[3] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[3] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[3] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[3] );
 	ToffoliImpl ( p[7] , tp[7] , x[3] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[3] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[3] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[3] );
 	ToffoliImpl ( p[8] , tp[8] , x[3] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[3] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[3] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[3] );
 	ToffoliImpl ( p[9] , tp[9] , x[3] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[3] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[3] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[3] );
 	ToffoliImpl ( p[10] , tp[10] , x[3] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[4] );
 	C_ADD ( wrk2 , tmp , tp , x[4] );
 	C_ADD ( wrk2 , tmp , tp , x[4] );
 	C_ADD ( wrk2 , tmp , tp , x[4] );
 	C_ADD ( wrk2 , tmp , tp , x[4] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[4] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[4] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[4] );
 	ToffoliImpl ( p[0] , tp[0] , x[4] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[4] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[4] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[4] );
 	ToffoliImpl ( p[1] , tp[1] , x[4] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[4] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[4] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[4] );
 	ToffoliImpl ( p[2] , tp[2] , x[4] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[4] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[4] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[4] );
 	ToffoliImpl ( p[3] , tp[3] , x[4] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[4] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[4] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[4] );
 	ToffoliImpl ( p[4] , tp[4] , x[4] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[4] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[4] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[4] );
 	ToffoliImpl ( p[5] , tp[5] , x[4] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[4] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[4] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[4] );
 	ToffoliImpl ( p[6] , tp[6] , x[4] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[4] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[4] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[4] );
 	ToffoliImpl ( p[7] , tp[7] , x[4] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[4] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[4] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[4] );
 	ToffoliImpl ( p[8] , tp[8] , x[4] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[4] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[4] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[4] );
 	ToffoliImpl ( p[9] , tp[9] , x[4] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[4] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[4] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[4] );
 	ToffoliImpl ( p[10] , tp[10] , x[4] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[5] );
 	C_ADD ( wrk2 , tmp , tp , x[5] );
 	C_ADD ( wrk2 , tmp , tp , x[5] );
 	C_ADD ( wrk2 , tmp , tp , x[5] );
 	C_ADD ( wrk2 , tmp , tp , x[5] );
 	C_ADD ( wrk2 , tmp , tp , x[5] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[5] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[5] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[5] );
 	ToffoliImpl ( p[0] , tp[0] , x[5] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[5] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[5] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[5] );
 	ToffoliImpl ( p[1] , tp[1] , x[5] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[5] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[5] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[5] );
 	ToffoliImpl ( p[2] , tp[2] , x[5] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[5] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[5] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[5] );
 	ToffoliImpl ( p[3] , tp[3] , x[5] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[5] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[5] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[5] );
 	ToffoliImpl ( p[4] , tp[4] , x[5] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[5] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[5] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[5] );
 	ToffoliImpl ( p[5] , tp[5] , x[5] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[5] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[5] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[5] );
 	ToffoliImpl ( p[6] , tp[6] , x[5] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[5] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[5] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[5] );
 	ToffoliImpl ( p[7] , tp[7] , x[5] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[5] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[5] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[5] );
 	ToffoliImpl ( p[8] , tp[8] , x[5] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[5] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[5] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[5] );
 	ToffoliImpl ( p[9] , tp[9] , x[5] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[5] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[5] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[5] );
 	ToffoliImpl ( p[10] , tp[10] , x[5] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[6] );
 	C_ADD ( wrk2 , tmp , tp , x[6] );
 	C_ADD ( wrk2 , tmp , tp , x[6] );
 	C_ADD ( wrk2 , tmp , tp , x[6] );
 	C_ADD ( wrk2 , tmp , tp , x[6] );
 	C_ADD ( wrk2 , tmp , tp , x[6] );
 	C_ADD ( wrk2 , tmp , tp , x[6] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[6] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[6] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[6] );
 	ToffoliImpl ( p[0] , tp[0] , x[6] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[6] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[6] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[6] );
 	ToffoliImpl ( p[1] , tp[1] , x[6] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[6] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[6] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[6] );
 	ToffoliImpl ( p[2] , tp[2] , x[6] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[6] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[6] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[6] );
 	ToffoliImpl ( p[3] , tp[3] , x[6] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[6] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[6] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[6] );
 	ToffoliImpl ( p[4] , tp[4] , x[6] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[6] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[6] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[6] );
 	ToffoliImpl ( p[5] , tp[5] , x[6] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[6] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[6] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[6] );
 	ToffoliImpl ( p[6] , tp[6] , x[6] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[6] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[6] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[6] );
 	ToffoliImpl ( p[7] , tp[7] , x[6] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[6] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[6] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[6] );
 	ToffoliImpl ( p[8] , tp[8] , x[6] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[6] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[6] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[6] );
 	ToffoliImpl ( p[9] , tp[9] , x[6] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[6] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[6] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[6] );
 	ToffoliImpl ( p[10] , tp[10] , x[6] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[7] );
 	C_ADD ( wrk2 , tmp , tp , x[7] );
 	C_ADD ( wrk2 , tmp , tp , x[7] );
 	C_ADD ( wrk2 , tmp , tp , x[7] );
 	C_ADD ( wrk2 , tmp , tp , x[7] );
 	C_ADD ( wrk2 , tmp , tp , x[7] );
 	C_ADD ( wrk2 , tmp , tp , x[7] );
 	C_ADD ( wrk2 , tmp , tp , x[7] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[7] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[7] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[7] );
 	ToffoliImpl ( p[0] , tp[0] , x[7] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[7] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[7] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[7] );
 	ToffoliImpl ( p[1] , tp[1] , x[7] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[7] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[7] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[7] );
 	ToffoliImpl ( p[2] , tp[2] , x[7] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[7] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[7] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[7] );
 	ToffoliImpl ( p[3] , tp[3] , x[7] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[7] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[7] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[7] );
 	ToffoliImpl ( p[4] , tp[4] , x[7] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[7] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[7] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[7] );
 	ToffoliImpl ( p[5] , tp[5] , x[7] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[7] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[7] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[7] );
 	ToffoliImpl ( p[6] , tp[6] , x[7] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[7] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[7] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[7] );
 	ToffoliImpl ( p[7] , tp[7] , x[7] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[7] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[7] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[7] );
 	ToffoliImpl ( p[8] , tp[8] , x[7] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[7] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[7] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[7] );
 	ToffoliImpl ( p[9] , tp[9] , x[7] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[7] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[7] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[7] );
 	ToffoliImpl ( p[10] , tp[10] , x[7] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[8] );
 	C_ADD ( wrk2 , tmp , tp , x[8] );
 	C_ADD ( wrk2 , tmp , tp , x[8] );
 	C_ADD ( wrk2 , tmp , tp , x[8] );
 	C_ADD ( wrk2 , tmp , tp , x[8] );
 	C_ADD ( wrk2 , tmp , tp , x[8] );
 	C_ADD ( wrk2 , tmp , tp , x[8] );
 	C_ADD ( wrk2 , tmp , tp , x[8] );
 	C_ADD ( wrk2 , tmp , tp , x[8] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[8] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[8] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[8] );
 	ToffoliImpl ( p[0] , tp[0] , x[8] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[8] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[8] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[8] );
 	ToffoliImpl ( p[1] , tp[1] , x[8] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[8] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[8] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[8] );
 	ToffoliImpl ( p[2] , tp[2] , x[8] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[8] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[8] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[8] );
 	ToffoliImpl ( p[3] , tp[3] , x[8] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[8] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[8] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[8] );
 	ToffoliImpl ( p[4] , tp[4] , x[8] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[8] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[8] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[8] );
 	ToffoliImpl ( p[5] , tp[5] , x[8] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[8] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[8] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[8] );
 	ToffoliImpl ( p[6] , tp[6] , x[8] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[8] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[8] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[8] );
 	ToffoliImpl ( p[7] , tp[7] , x[8] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[8] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[8] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[8] );
 	ToffoliImpl ( p[8] , tp[8] , x[8] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[8] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[8] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[8] );
 	ToffoliImpl ( p[9] , tp[9] , x[8] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[8] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[8] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[8] );
 	ToffoliImpl ( p[10] , tp[10] , x[8] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[9] );
 	C_ADD ( wrk2 , tmp , tp , x[9] );
 	C_ADD ( wrk2 , tmp , tp , x[9] );
 	C_ADD ( wrk2 , tmp , tp , x[9] );
 	C_ADD ( wrk2 , tmp , tp , x[9] );
 	C_ADD ( wrk2 , tmp , tp , x[9] );
 	C_ADD ( wrk2 , tmp , tp , x[9] );
 	C_ADD ( wrk2 , tmp , tp , x[9] );
 	C_ADD ( wrk2 , tmp , tp , x[9] );
 	C_ADD ( wrk2 , tmp , tp , x[9] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[9] );
 	ToffoliImpl ( wrk[0] , tp[0] , x[9] );
 	ToffoliImpl ( tp[0] , wrk[0] , x[9] );
 	ToffoliImpl ( p[0] , tp[0] , x[9] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[9] );
 	ToffoliImpl ( wrk[1] , tp[1] , x[9] );
 	ToffoliImpl ( tp[1] , wrk[1] , x[9] );
 	ToffoliImpl ( p[1] , tp[1] , x[9] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[9] );
 	ToffoliImpl ( wrk[2] , tp[2] , x[9] );
 	ToffoliImpl ( tp[2] , wrk[2] , x[9] );
 	ToffoliImpl ( p[2] , tp[2] , x[9] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[9] );
 	ToffoliImpl ( wrk[3] , tp[3] , x[9] );
 	ToffoliImpl ( tp[3] , wrk[3] , x[9] );
 	ToffoliImpl ( p[3] , tp[3] , x[9] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[9] );
 	ToffoliImpl ( wrk[4] , tp[4] , x[9] );
 	ToffoliImpl ( tp[4] , wrk[4] , x[9] );
 	ToffoliImpl ( p[4] , tp[4] , x[9] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[9] );
 	ToffoliImpl ( wrk[5] , tp[5] , x[9] );
 	ToffoliImpl ( tp[5] , wrk[5] , x[9] );
 	ToffoliImpl ( p[5] , tp[5] , x[9] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[9] );
 	ToffoliImpl ( wrk[6] , tp[6] , x[9] );
 	ToffoliImpl ( tp[6] , wrk[6] , x[9] );
 	ToffoliImpl ( p[6] , tp[6] , x[9] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[9] );
 	ToffoliImpl ( wrk[7] , tp[7] , x[9] );
 	ToffoliImpl ( tp[7] , wrk[7] , x[9] );
 	ToffoliImpl ( p[7] , tp[7] , x[9] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[9] );
 	ToffoliImpl ( wrk[8] , tp[8] , x[9] );
 	ToffoliImpl ( tp[8] , wrk[8] , x[9] );
 	ToffoliImpl ( p[8] , tp[8] , x[9] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[9] );
 	ToffoliImpl ( wrk[9] , tp[9] , x[9] );
 	ToffoliImpl ( tp[9] , wrk[9] , x[9] );
 	ToffoliImpl ( p[9] , tp[9] , x[9] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[9] );
 	ToffoliImpl ( wrk[10] , tp[10] , x[9] );
 	ToffoliImpl ( tp[10] , wrk[10] , x[9] );
 	ToffoliImpl ( p[10] , tp[10] , x[9] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	C_ADD ( tp , tmp , wrk , x[10] );
 	ToffoliImpl ( p[0] , wrk[0] , x[10] );
 	ToffoliImpl ( p[1] , wrk[1] , x[10] );
 	ToffoliImpl ( p[2] , wrk[2] , x[10] );
 	ToffoliImpl ( p[3] , wrk[3] , x[10] );
 	ToffoliImpl ( p[4] , wrk[4] , x[10] );
 	ToffoliImpl ( p[5] , wrk[5] , x[10] );
 	ToffoliImpl ( p[6] , wrk[6] , x[10] );
 	ToffoliImpl ( p[7] , wrk[7] , x[10] );
 	ToffoliImpl ( p[8] , wrk[8] , x[10] );
 	ToffoliImpl ( p[9] , wrk[9] , x[10] );
 	ToffoliImpl ( p[10] , wrk[10] , x[10] );
 	C_ADD ( tp , tmp , wrk , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	C_ADD ( wrk2 , tmp , tp , x[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[9] , tmp[10] );
 	CNOT ( tmp[10] , tmp[9] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[8] , tmp[10] );
 	CNOT ( tmp[10] , tmp[8] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[7] , tmp[10] );
 	CNOT ( tmp[10] , tmp[7] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[6] , tmp[10] );
 	CNOT ( tmp[10] , tmp[6] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[5] , tmp[10] );
 	CNOT ( tmp[10] , tmp[5] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[4] , tmp[10] );
 	CNOT ( tmp[10] , tmp[4] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[3] , tmp[10] );
 	CNOT ( tmp[10] , tmp[3] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[2] , tmp[10] );
 	CNOT ( tmp[10] , tmp[2] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[1] , tmp[10] );
 	CNOT ( tmp[10] , tmp[1] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[0] , tmp[10] );
 	CNOT ( tmp[10] , tmp[0] );
 	CNOT ( tmp[10] , y[10] );
 	CNOT ( tmp[9] , y[9] );
 	CNOT ( tmp[8] , y[8] );
 	CNOT ( tmp[7] , y[7] );
 	CNOT ( tmp[6] , y[6] );
 	CNOT ( tmp[5] , y[5] );
 	CNOT ( tmp[4] , y[4] );
 	CNOT ( tmp[3] , y[3] );
 	CNOT ( tmp[2] , y[2] );
 	CNOT ( tmp[1] , y[1] );
 	CNOT ( tmp[0] , y[0] );
 }

module Pow17 ( qbit* x , qbit* x17 , qbit flg ) {
 	qbit w[11];
	qbit alpha[11];
	qbit beta[11];
	qbit gamma[11];
	MUL ( x , x , alpha );
 	MUL ( alpha , alpha , w );
 	MUL ( w , w , beta );
 	MUL ( beta , beta , gamma );
 	C_MUL ( gamma , x , x17 , flg );
 	X ( flg );
 	C_unMUL ( gamma , x , x17 , flg );
 	unMUL ( beta , beta , gamma );
 	unMUL ( w , w , beta );
 	unMUL ( alpha , alpha , w );
 	unMUL ( x , x , alpha );
 }

module MOD3 ( qbit* x , qbit* m ) {
 	qbit s3[3];
	qbit s5[5];
	qbit tmp[3];
	X ( s5[0] );
 	X ( s5[1] );
 	X ( s5[2] );
 	X ( s5[3] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[0] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[0] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[0] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[0] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[0] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[0] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[0] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[0] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[0] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[0] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[0] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[0] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[0] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[0] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[0] );
 	ToffoliImpl ( s5[1] , s5[0] , x[0] );
 	CNOT ( s5[0] , x[0] );
 	CNOT ( s5[0] , x[1] );
 	ToffoliImpl ( s5[1] , s5[0] , x[1] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[1] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[1] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[1] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[1] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[1] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[1] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[1] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[1] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[1] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[1] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[1] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[1] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[1] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[1] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[1] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[2] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[2] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[2] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[2] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[2] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[2] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[2] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[2] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[2] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[2] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[2] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[2] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[2] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[2] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[2] );
 	ToffoliImpl ( s5[1] , s5[0] , x[2] );
 	CNOT ( s5[0] , x[2] );
 	CNOT ( s5[0] , x[3] );
 	ToffoliImpl ( s5[1] , s5[0] , x[3] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[3] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[3] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[3] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[3] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[3] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[3] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[3] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[3] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[3] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[3] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[3] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[3] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[3] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[3] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[3] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[4] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[4] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[4] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[4] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[4] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[4] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[4] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[4] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[4] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[4] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[4] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[4] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[4] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[4] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[4] );
 	ToffoliImpl ( s5[1] , s5[0] , x[4] );
 	CNOT ( s5[0] , x[4] );
 	CNOT ( s5[0] , x[5] );
 	ToffoliImpl ( s5[1] , s5[0] , x[5] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[5] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[5] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[5] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[5] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[5] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[5] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[5] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[5] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[5] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[5] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[5] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[5] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[5] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[5] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[5] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[6] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[6] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[6] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[6] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[6] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[6] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[6] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[6] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[6] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[6] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[6] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[6] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[6] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[6] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[6] );
 	ToffoliImpl ( s5[1] , s5[0] , x[6] );
 	CNOT ( s5[0] , x[6] );
 	CNOT ( s5[0] , x[7] );
 	ToffoliImpl ( s5[1] , s5[0] , x[7] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[7] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[7] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[7] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[7] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[7] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[7] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[7] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[7] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[7] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[7] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[7] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[7] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[7] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[7] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[7] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[8] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[8] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[8] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[8] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[8] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[8] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[8] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[8] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[8] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[8] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[8] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[8] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[8] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[8] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[8] );
 	ToffoliImpl ( s5[1] , s5[0] , x[8] );
 	CNOT ( s5[0] , x[8] );
 	CNOT ( s5[0] , x[9] );
 	ToffoliImpl ( s5[1] , s5[0] , x[9] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[9] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[9] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[9] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[9] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[9] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[9] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[9] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[9] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[9] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[9] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[9] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[9] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[9] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[9] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[9] );
 	X ( s3[0] );
 	X ( s3[1] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[0] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[0] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[0] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[0] );
 	CNOT ( s3[0] , s5[0] );
 	CNOT ( s3[0] , s5[1] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[1] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[1] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[1] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[1] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[2] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[2] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[2] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[2] );
 	CNOT ( s3[0] , s5[2] );
 	CNOT ( s3[0] , s5[3] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[3] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[3] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[3] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[3] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[4] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[4] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[4] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[4] );
 	CNOT ( s3[0] , s5[4] );
 	ToffoliImpl ( s3[1] , s3[0] , s3[2] );
 	CNOT ( s3[0] , s3[2] );
 	CNOT ( m[0] , s3[0] );
 	CNOT ( m[1] , s3[1] );
 	CNOT ( s3[0] , s3[2] );
 	ToffoliImpl ( s3[1] , s3[0] , s3[2] );
 	CNOT ( s3[0] , s5[4] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[4] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[4] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[4] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[4] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[4] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[4] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[4] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[4] );
 	CNOT ( s3[0] , s5[4] );
 	CNOT ( s3[0] , s5[3] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[3] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[3] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[3] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[3] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[2] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[2] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[2] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[2] );
 	CNOT ( s3[0] , s5[2] );
 	CNOT ( s3[0] , s5[1] );
 	ToffoliImpl ( s3[1] , s3[0] , s5[1] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[1] );
 	ToffoliImpl ( s3[2] , tmp[0] , s5[1] );
 	C_Toffoli ( tmp[0] , s3[0] , s3[1] , s5[1] );
 	X ( s3[0] );
 	X ( s3[1] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[10] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[10] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[10] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[10] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[10] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[10] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[10] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[10] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[10] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[10] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[10] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[10] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[10] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[10] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[10] );
 	ToffoliImpl ( s5[1] , s5[0] , x[10] );
 	CNOT ( s5[0] , x[10] );
 	CNOT ( s5[0] , x[9] );
 	ToffoliImpl ( s5[1] , s5[0] , x[9] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[9] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[9] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[9] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[9] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[9] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[9] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[9] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[9] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[9] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[9] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[9] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[9] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[9] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[9] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[9] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[8] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[8] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[8] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[8] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[8] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[8] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[8] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[8] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[8] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[8] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[8] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[8] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[8] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[8] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[8] );
 	ToffoliImpl ( s5[1] , s5[0] , x[8] );
 	CNOT ( s5[0] , x[8] );
 	CNOT ( s5[0] , x[7] );
 	ToffoliImpl ( s5[1] , s5[0] , x[7] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[7] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[7] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[7] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[7] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[7] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[7] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[7] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[7] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[7] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[7] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[7] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[7] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[7] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[7] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[7] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[6] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[6] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[6] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[6] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[6] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[6] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[6] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[6] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[6] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[6] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[6] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[6] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[6] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[6] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[6] );
 	ToffoliImpl ( s5[1] , s5[0] , x[6] );
 	CNOT ( s5[0] , x[6] );
 	CNOT ( s5[0] , x[5] );
 	ToffoliImpl ( s5[1] , s5[0] , x[5] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[5] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[5] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[5] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[5] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[5] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[5] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[5] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[5] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[5] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[5] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[5] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[5] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[5] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[5] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[5] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[4] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[4] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[4] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[4] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[4] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[4] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[4] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[4] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[4] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[4] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[4] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[4] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[4] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[4] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[4] );
 	ToffoliImpl ( s5[1] , s5[0] , x[4] );
 	CNOT ( s5[0] , x[4] );
 	CNOT ( s5[0] , x[3] );
 	ToffoliImpl ( s5[1] , s5[0] , x[3] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[3] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[3] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[3] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[3] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[3] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[3] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[3] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[3] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[3] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[3] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[3] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[3] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[3] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[3] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[3] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[2] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[2] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[2] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[2] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[2] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[2] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[2] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[2] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[2] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[2] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[2] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[2] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[2] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[2] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[2] );
 	ToffoliImpl ( s5[1] , s5[0] , x[2] );
 	CNOT ( s5[0] , x[2] );
 	CNOT ( s5[0] , x[1] );
 	ToffoliImpl ( s5[1] , s5[0] , x[1] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[1] );
 	ToffoliImpl ( s5[2] , tmp[0] , x[1] );
 	C_Toffoli ( tmp[0] , s5[0] , s5[1] , x[1] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[1] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[1] );
 	ToffoliImpl ( s5[3] , tmp[1] , x[1] );
 	C_Toffoli ( tmp[1] , s5[0] , tmp[0] , x[1] );
 	C_Toffoli ( tmp[0] , s5[1] , s5[2] , x[1] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[1] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[1] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[1] );
 	ToffoliImpl ( s5[4] , tmp[2] , x[1] );
 	C_Toffoli ( tmp[2] , s5[0] , tmp[1] , x[1] );
 	C_Toffoli ( tmp[1] , s5[1] , tmp[0] , x[1] );
 	C_Toffoli ( tmp[0] , s5[2] , s5[3] , x[1] );
 }

module equalquInt2 ( qbit* x , qbit* y , qbit equal ) {
 	qbit dum[2];
	ToffoliImpl ( dum[0] , x[0] , y[0] );
 	ToffoliImpl ( dum[1] , x[1] , y[1] );
 	ToffoliImpl ( equal , dum[1] , dum[0] );
 	ToffoliImpl ( dum[1] , x[1] , y[1] );
 	ToffoliImpl ( dum[0] , x[0] , y[0] );
 }

module EdgeORACLE_0_5 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_5 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_5 ( v , vint );
 }

module ConvertNode_16_10 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[10] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[11] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[12] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[13] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[14] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_0_10 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_10 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_10 ( v , vint );
 }

module ConvertNode_16_15 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[15] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[16] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[17] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[18] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[19] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_0_15 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_15 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_15 ( v , vint );
 }

module ConvertNode_16_20 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[20] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[21] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[22] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[23] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[24] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_0_20 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_20 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_20 ( v , vint );
 }

module ConvertNode_16_25 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[25] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[26] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[27] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[28] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[29] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_0_25 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 }

module ConvertNode_16_30 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[30] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[31] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[32] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[33] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[34] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_0_30 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 }

module ConvertNode_16_35 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[35] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[36] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[37] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[38] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[39] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_0_35 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 }

module ConvertNode_5_16 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[5] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[6] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[7] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[8] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[9] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_5_10 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_10 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_10 ( v , vint );
 }

module EdgeORACLE_5_15 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_15 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_15 ( v , vint );
 }

module EdgeORACLE_5_20 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_20 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_20 ( v , vint );
 }

module EdgeORACLE_5_25 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 }

module EdgeORACLE_5_30 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 }

module EdgeORACLE_5_35 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 }

module ConvertNode_10_16 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[10] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[11] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[12] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[13] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[14] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_10_15 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_15 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_15 ( v , vint );
 }

module EdgeORACLE_10_20 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_20 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_20 ( v , vint );
 }

module EdgeORACLE_10_25 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 }

module EdgeORACLE_10_30 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 }

module EdgeORACLE_10_35 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 }

module ConvertNode_15_16 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[15] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[16] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[17] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[18] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[19] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_15_20 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_16_20 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_16_20 ( v , vint );
 }

module EdgeORACLE_15_25 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 }

module EdgeORACLE_15_30 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 }

module EdgeORACLE_15_35 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 }

module ConvertNode_20_16 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[20] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[21] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[22] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[23] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[24] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_20_25 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_20_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_20_16 ( u , uint );
 	ConvertNode_16_25 ( v , vint );
 }

module EdgeORACLE_20_30 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_20_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_20_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 }

module EdgeORACLE_20_35 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_20_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_20_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 }

module ConvertNode_25_16 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[25] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[26] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[27] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[28] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[29] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_25_30 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_25_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_25_16 ( u , uint );
 	ConvertNode_16_30 ( v , vint );
 }

module EdgeORACLE_25_35 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_25_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_25_16 ( u , uint );
 	ConvertNode_16_35 ( v , vint );
 }

module ConvertNode_30_16 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[30] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[31] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[32] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[33] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[34] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module ConvertNode_35_16 ( qbit* u , qbit* uint ) {
 	qbit w[11];
	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[35] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[36] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[37] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[38] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[39] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 	SUB_16 ( w , uint );
 	PrepZ ( w[0] , 0 );
 	CNOT ( w[0] , u[0] );
 	PrepZ ( w[1] , 0 );
 	CNOT ( w[1] , u[1] );
 	PrepZ ( w[2] , 0 );
 	CNOT ( w[2] , u[2] );
 	PrepZ ( w[3] , 0 );
 	CNOT ( w[3] , u[3] );
 	PrepZ ( w[4] , 0 );
 	CNOT ( w[4] , u[4] );
 	PrepZ ( w[5] , 0 );
 	PrepZ ( w[6] , 0 );
 	PrepZ ( w[7] , 0 );
 	PrepZ ( w[8] , 0 );
 	PrepZ ( w[9] , 0 );
 	PrepZ ( w[10] , 0 );
 }

module EdgeORACLE_30_35 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_30_16 ( u , uint );
 	ConvertNode_35_16 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_30_16 ( u , uint );
 	ConvertNode_35_16 ( v , vint );
 }

module SETUP ( qbit* E , qbit* T ) {
 	PrepZ ( E[0] , 0 );
 	PrepZ ( E[1] , 0 );
 	PrepZ ( E[2] , 0 );
 	PrepZ ( E[3] , 0 );
 	PrepZ ( E[4] , 0 );
 	PrepZ ( E[5] , 0 );
 	PrepZ ( E[6] , 0 );
 	PrepZ ( E[7] , 0 );
 	PrepZ ( E[8] , 0 );
 	PrepZ ( E[9] , 0 );
 	PrepZ ( E[10] , 0 );
 	PrepZ ( E[11] , 0 );
 	PrepZ ( E[12] , 0 );
 	PrepZ ( E[13] , 0 );
 	PrepZ ( E[14] , 0 );
 	PrepZ ( E[15] , 0 );
 	PrepZ ( E[16] , 0 );
 	PrepZ ( E[17] , 0 );
 	PrepZ ( E[18] , 0 );
 	PrepZ ( E[19] , 0 );
 	PrepZ ( E[20] , 0 );
 	PrepZ ( E[21] , 0 );
 	PrepZ ( E[22] , 0 );
 	PrepZ ( E[23] , 0 );
 	PrepZ ( E[24] , 0 );
 	PrepZ ( E[25] , 0 );
 	PrepZ ( E[26] , 0 );
 	PrepZ ( E[27] , 0 );
 	PrepZ ( E[0] , 0 );
 	EdgeORACLE_0_5 ( T , T , E[0] );
 	PrepZ ( E[1] , 0 );
 	EdgeORACLE_0_10 ( T , T , E[1] );
 	PrepZ ( E[3] , 0 );
 	EdgeORACLE_0_15 ( T , T , E[3] );
 	PrepZ ( E[6] , 0 );
 	EdgeORACLE_0_20 ( T , T , E[6] );
 	PrepZ ( E[10] , 0 );
 	EdgeORACLE_0_25 ( T , T , E[10] );
 	PrepZ ( E[15] , 0 );
 	EdgeORACLE_0_30 ( T , T , E[15] );
 	PrepZ ( E[21] , 0 );
 	EdgeORACLE_0_35 ( T , T , E[21] );
 	PrepZ ( E[2] , 0 );
 	EdgeORACLE_5_10 ( T , T , E[2] );
 	PrepZ ( E[4] , 0 );
 	EdgeORACLE_5_15 ( T , T , E[4] );
 	PrepZ ( E[7] , 0 );
 	EdgeORACLE_5_20 ( T , T , E[7] );
 	PrepZ ( E[11] , 0 );
 	EdgeORACLE_5_25 ( T , T , E[11] );
 	PrepZ ( E[16] , 0 );
 	EdgeORACLE_5_30 ( T , T , E[16] );
 	PrepZ ( E[22] , 0 );
 	EdgeORACLE_5_35 ( T , T , E[22] );
 	PrepZ ( E[5] , 0 );
 	EdgeORACLE_10_15 ( T , T , E[5] );
 	PrepZ ( E[8] , 0 );
 	EdgeORACLE_10_20 ( T , T , E[8] );
 	PrepZ ( E[12] , 0 );
 	EdgeORACLE_10_25 ( T , T , E[12] );
 	PrepZ ( E[17] , 0 );
 	EdgeORACLE_10_30 ( T , T , E[17] );
 	PrepZ ( E[23] , 0 );
 	EdgeORACLE_10_35 ( T , T , E[23] );
 	PrepZ ( E[9] , 0 );
 	EdgeORACLE_15_20 ( T , T , E[9] );
 	PrepZ ( E[13] , 0 );
 	EdgeORACLE_15_25 ( T , T , E[13] );
 	PrepZ ( E[18] , 0 );
 	EdgeORACLE_15_30 ( T , T , E[18] );
 	PrepZ ( E[24] , 0 );
 	EdgeORACLE_15_35 ( T , T , E[24] );
 	PrepZ ( E[14] , 0 );
 	EdgeORACLE_20_25 ( T , T , E[14] );
 	PrepZ ( E[19] , 0 );
 	EdgeORACLE_20_30 ( T , T , E[19] );
 	PrepZ ( E[25] , 0 );
 	EdgeORACLE_20_35 ( T , T , E[25] );
 	PrepZ ( E[20] , 0 );
 	EdgeORACLE_25_30 ( T , T , E[20] );
 	PrepZ ( E[26] , 0 );
 	EdgeORACLE_25_35 ( T , T , E[26] );
 	PrepZ ( E[27] , 0 );
 	EdgeORACLE_30_35 ( T , T , E[27] );
 }

module ctrEvaluate16 ( qbit target , qbit ctr3 , qbit ctr2 , qbit ctr1 ) {
 	qbit tmp[1];
	ToffoliImpl ( tmp[0] , ctr2 , ctr1 );
 	ToffoliImpl ( target , ctr3 , tmp[0] );
 	ToffoliImpl ( tmp[0] , ctr2 , ctr1 );
 }

module ctrCTRincr_9 ( qbit* cTri , qbit ctrQ , qbit* ctrbit2 ) {
 	CNOT ( ctrbit2[0] , ctrQ );
 	ToffoliImpl ( ctrbit2[1] , ctrbit2[0] , cTri[0] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , cTri[1] );
 	ToffoliImpl ( ctrbit2[3] , ctrbit2[2] , cTri[2] );
 	ToffoliImpl ( ctrbit2[4] , ctrbit2[3] , cTri[3] );
 	ToffoliImpl ( ctrbit2[5] , ctrbit2[4] , cTri[4] );
 	ToffoliImpl ( ctrbit2[6] , ctrbit2[5] , cTri[5] );
 	ToffoliImpl ( ctrbit2[7] , ctrbit2[6] , cTri[6] );
 	ToffoliImpl ( ctrbit2[8] , ctrbit2[7] , cTri[7] );
 	CNOT ( cTri[8] , ctrbit2[8] );
 	ToffoliImpl ( ctrbit2[8] , ctrbit2[7] , cTri[7] );
 	CNOT ( cTri[7] , ctrbit2[7] );
 	ToffoliImpl ( ctrbit2[7] , ctrbit2[6] , cTri[6] );
 	CNOT ( cTri[6] , ctrbit2[6] );
 	ToffoliImpl ( ctrbit2[6] , ctrbit2[5] , cTri[5] );
 	CNOT ( cTri[5] , ctrbit2[5] );
 	ToffoliImpl ( ctrbit2[5] , ctrbit2[4] , cTri[4] );
 	CNOT ( cTri[4] , ctrbit2[4] );
 	ToffoliImpl ( ctrbit2[4] , ctrbit2[3] , cTri[3] );
 	CNOT ( cTri[3] , ctrbit2[3] );
 	ToffoliImpl ( ctrbit2[3] , ctrbit2[2] , cTri[2] );
 	CNOT ( cTri[2] , ctrbit2[2] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , cTri[1] );
 	CNOT ( cTri[1] , ctrbit2[1] );
 	ToffoliImpl ( ctrbit2[1] , ctrbit2[0] , cTri[0] );
 	CNOT ( cTri[0] , ctrbit2[0] );
 	CNOT ( ctrbit2[0] , ctrQ );
 }

module RegTest_9_0 ( qbit* input , qbit* dum ) {
 	X ( input[0] );
 	X ( input[1] );
 	X ( input[2] );
 	X ( input[3] );
 	X ( input[4] );
 	X ( input[5] );
 	X ( input[6] );
 	X ( input[7] );
 	X ( input[8] );
 	ToffoliImpl ( dum[0] , input[1] , input[0] );
 	ToffoliImpl ( dum[1] , dum[0] , input[2] );
 	ToffoliImpl ( dum[2] , dum[1] , input[3] );
 	ToffoliImpl ( dum[3] , dum[2] , input[4] );
 	ToffoliImpl ( dum[4] , dum[3] , input[5] );
 	ToffoliImpl ( dum[5] , dum[4] , input[6] );
 	ToffoliImpl ( dum[6] , dum[5] , input[7] );
 	ToffoliImpl ( dum[7] , dum[6] , input[8] );
 }

module InvRegTest_9_0 ( qbit* input , qbit* dum ) {
 	ToffoliImpl ( dum[7] , dum[6] , input[8] );
 	ToffoliImpl ( dum[6] , dum[5] , input[7] );
 	ToffoliImpl ( dum[5] , dum[4] , input[6] );
 	ToffoliImpl ( dum[4] , dum[3] , input[5] );
 	ToffoliImpl ( dum[3] , dum[2] , input[4] );
 	ToffoliImpl ( dum[2] , dum[1] , input[3] );
 	ToffoliImpl ( dum[1] , dum[0] , input[2] );
 	ToffoliImpl ( dum[0] , input[1] , input[0] );
 	X ( input[0] );
 	X ( input[1] );
 	X ( input[2] );
 	X ( input[3] );
 	X ( input[4] );
 	X ( input[5] );
 	X ( input[6] );
 	X ( input[7] );
 	X ( input[8] );
 }

module ctrCTRdecr_9 ( qbit* cTri , qbit ctrQ , qbit* ctrbit2 ) {
 	X ( cTri[0] );
 	X ( cTri[1] );
 	X ( cTri[2] );
 	X ( cTri[3] );
 	X ( cTri[4] );
 	X ( cTri[5] );
 	X ( cTri[6] );
 	X ( cTri[7] );
 	CNOT ( ctrbit2[0] , ctrQ );
 	ToffoliImpl ( ctrbit2[1] , ctrbit2[0] , cTri[0] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , cTri[1] );
 	ToffoliImpl ( ctrbit2[3] , ctrbit2[2] , cTri[2] );
 	ToffoliImpl ( ctrbit2[4] , ctrbit2[3] , cTri[3] );
 	ToffoliImpl ( ctrbit2[5] , ctrbit2[4] , cTri[4] );
 	ToffoliImpl ( ctrbit2[6] , ctrbit2[5] , cTri[5] );
 	ToffoliImpl ( ctrbit2[7] , ctrbit2[6] , cTri[6] );
 	ToffoliImpl ( ctrbit2[8] , ctrbit2[7] , cTri[7] );
 	CNOT ( cTri[8] , ctrbit2[8] );
 	X ( cTri[7] );
 	ToffoliImpl ( ctrbit2[8] , ctrbit2[7] , cTri[7] );
 	CNOT ( cTri[7] , ctrbit2[7] );
 	X ( cTri[6] );
 	ToffoliImpl ( ctrbit2[7] , ctrbit2[6] , cTri[6] );
 	CNOT ( cTri[6] , ctrbit2[6] );
 	X ( cTri[5] );
 	ToffoliImpl ( ctrbit2[6] , ctrbit2[5] , cTri[5] );
 	CNOT ( cTri[5] , ctrbit2[5] );
 	X ( cTri[4] );
 	ToffoliImpl ( ctrbit2[5] , ctrbit2[4] , cTri[4] );
 	CNOT ( cTri[4] , ctrbit2[4] );
 	X ( cTri[3] );
 	ToffoliImpl ( ctrbit2[4] , ctrbit2[3] , cTri[3] );
 	CNOT ( cTri[3] , ctrbit2[3] );
 	X ( cTri[2] );
 	ToffoliImpl ( ctrbit2[3] , ctrbit2[2] , cTri[2] );
 	CNOT ( cTri[2] , ctrbit2[2] );
 	X ( cTri[1] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , cTri[1] );
 	CNOT ( cTri[1] , ctrbit2[1] );
 	X ( cTri[0] );
 	ToffoliImpl ( ctrbit2[1] , ctrbit2[0] , cTri[0] );
 	X ( cTri[0] );
 	CNOT ( cTri[0] , ctrbit2[0] );
 	CNOT ( ctrbit2[0] , ctrQ );
 }

module TriangleTestT ( qbit* E , qbit test ) {
 	qbit dum[1];
	qbit triCnt[9];
	qbit lctrbit[9];
	ctrEvaluate16 ( dum[0] , E[2] , E[0] , E[1] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[2] , E[0] , E[1] );
 	ctrEvaluate16 ( dum[0] , E[4] , E[0] , E[3] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[4] , E[0] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[7] , E[0] , E[6] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[7] , E[0] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[11] , E[0] , E[10] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[11] , E[0] , E[10] );
 	ctrEvaluate16 ( dum[0] , E[16] , E[0] , E[15] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[16] , E[0] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[22] , E[0] , E[21] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[22] , E[0] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[5] , E[1] , E[3] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[5] , E[1] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[8] , E[1] , E[6] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[8] , E[1] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[12] , E[1] , E[10] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[12] , E[1] , E[10] );
 	ctrEvaluate16 ( dum[0] , E[17] , E[1] , E[15] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[17] , E[1] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[23] , E[1] , E[21] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[23] , E[1] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[9] , E[3] , E[6] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[9] , E[3] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[13] , E[3] , E[10] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[13] , E[3] , E[10] );
 	ctrEvaluate16 ( dum[0] , E[18] , E[3] , E[15] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[18] , E[3] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[24] , E[3] , E[21] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[24] , E[3] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[14] , E[6] , E[10] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[14] , E[6] , E[10] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[6] , E[15] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[6] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[6] , E[21] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[6] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[10] , E[15] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[10] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[10] , E[21] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[10] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[15] , E[21] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[15] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[5] , E[2] , E[4] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[5] , E[2] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[8] , E[2] , E[7] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[8] , E[2] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[12] , E[2] , E[11] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[12] , E[2] , E[11] );
 	ctrEvaluate16 ( dum[0] , E[17] , E[2] , E[16] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[17] , E[2] , E[16] );
 	ctrEvaluate16 ( dum[0] , E[23] , E[2] , E[22] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[23] , E[2] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[9] , E[4] , E[7] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[9] , E[4] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[13] , E[4] , E[11] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[13] , E[4] , E[11] );
 	ctrEvaluate16 ( dum[0] , E[18] , E[4] , E[16] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[18] , E[4] , E[16] );
 	ctrEvaluate16 ( dum[0] , E[24] , E[4] , E[22] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[24] , E[4] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[14] , E[7] , E[11] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[14] , E[7] , E[11] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[7] , E[16] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[7] , E[16] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[7] , E[22] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[7] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[11] , E[16] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[11] , E[16] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[11] , E[22] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[11] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[16] , E[22] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[16] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[9] , E[5] , E[8] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[9] , E[5] , E[8] );
 	ctrEvaluate16 ( dum[0] , E[13] , E[5] , E[12] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[13] , E[5] , E[12] );
 	ctrEvaluate16 ( dum[0] , E[18] , E[5] , E[17] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[18] , E[5] , E[17] );
 	ctrEvaluate16 ( dum[0] , E[24] , E[5] , E[23] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[24] , E[5] , E[23] );
 	ctrEvaluate16 ( dum[0] , E[14] , E[8] , E[12] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[14] , E[8] , E[12] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[8] , E[17] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[8] , E[17] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[8] , E[23] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[8] , E[23] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[12] , E[17] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[12] , E[17] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[12] , E[23] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[12] , E[23] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[17] , E[23] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[17] , E[23] );
 	ctrEvaluate16 ( dum[0] , E[14] , E[9] , E[13] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[14] , E[9] , E[13] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[9] , E[18] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[9] , E[18] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[9] , E[24] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[9] , E[24] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[13] , E[18] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[13] , E[18] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[13] , E[24] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[13] , E[24] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[18] , E[24] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[18] , E[24] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[14] , E[19] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[14] , E[19] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[14] , E[25] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[14] , E[25] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[19] , E[25] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[19] , E[25] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[20] , E[26] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[20] , E[26] );
 	RegTest_9_0 ( triCnt , lctrbit );
 	CNOT ( test , lctrbit[7] );
 	X ( test );
 	InvRegTest_9_0 ( triCnt , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[2] , E[0] , E[1] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[2] , E[0] , E[1] );
 	ctrEvaluate16 ( dum[0] , E[4] , E[0] , E[3] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[4] , E[0] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[7] , E[0] , E[6] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[7] , E[0] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[11] , E[0] , E[10] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[11] , E[0] , E[10] );
 	ctrEvaluate16 ( dum[0] , E[16] , E[0] , E[15] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[16] , E[0] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[22] , E[0] , E[21] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[22] , E[0] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[5] , E[1] , E[3] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[5] , E[1] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[8] , E[1] , E[6] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[8] , E[1] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[12] , E[1] , E[10] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[12] , E[1] , E[10] );
 	ctrEvaluate16 ( dum[0] , E[17] , E[1] , E[15] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[17] , E[1] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[23] , E[1] , E[21] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[23] , E[1] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[9] , E[3] , E[6] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[9] , E[3] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[13] , E[3] , E[10] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[13] , E[3] , E[10] );
 	ctrEvaluate16 ( dum[0] , E[18] , E[3] , E[15] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[18] , E[3] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[24] , E[3] , E[21] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[24] , E[3] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[14] , E[6] , E[10] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[14] , E[6] , E[10] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[6] , E[15] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[6] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[6] , E[21] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[6] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[10] , E[15] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[10] , E[15] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[10] , E[21] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[10] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[15] , E[21] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[15] , E[21] );
 	ctrEvaluate16 ( dum[0] , E[5] , E[2] , E[4] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[5] , E[2] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[8] , E[2] , E[7] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[8] , E[2] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[12] , E[2] , E[11] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[12] , E[2] , E[11] );
 	ctrEvaluate16 ( dum[0] , E[17] , E[2] , E[16] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[17] , E[2] , E[16] );
 	ctrEvaluate16 ( dum[0] , E[23] , E[2] , E[22] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[23] , E[2] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[9] , E[4] , E[7] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[9] , E[4] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[13] , E[4] , E[11] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[13] , E[4] , E[11] );
 	ctrEvaluate16 ( dum[0] , E[18] , E[4] , E[16] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[18] , E[4] , E[16] );
 	ctrEvaluate16 ( dum[0] , E[24] , E[4] , E[22] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[24] , E[4] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[14] , E[7] , E[11] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[14] , E[7] , E[11] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[7] , E[16] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[7] , E[16] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[7] , E[22] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[7] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[11] , E[16] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[11] , E[16] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[11] , E[22] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[11] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[16] , E[22] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[16] , E[22] );
 	ctrEvaluate16 ( dum[0] , E[9] , E[5] , E[8] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[9] , E[5] , E[8] );
 	ctrEvaluate16 ( dum[0] , E[13] , E[5] , E[12] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[13] , E[5] , E[12] );
 	ctrEvaluate16 ( dum[0] , E[18] , E[5] , E[17] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[18] , E[5] , E[17] );
 	ctrEvaluate16 ( dum[0] , E[24] , E[5] , E[23] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[24] , E[5] , E[23] );
 	ctrEvaluate16 ( dum[0] , E[14] , E[8] , E[12] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[14] , E[8] , E[12] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[8] , E[17] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[8] , E[17] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[8] , E[23] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[8] , E[23] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[12] , E[17] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[12] , E[17] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[12] , E[23] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[12] , E[23] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[17] , E[23] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[17] , E[23] );
 	ctrEvaluate16 ( dum[0] , E[14] , E[9] , E[13] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[14] , E[9] , E[13] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[9] , E[18] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[9] , E[18] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[9] , E[24] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[9] , E[24] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[13] , E[18] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[13] , E[18] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[13] , E[24] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[13] , E[24] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[18] , E[24] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[18] , E[24] );
 	ctrEvaluate16 ( dum[0] , E[20] , E[14] , E[19] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[20] , E[14] , E[19] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[14] , E[25] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[14] , E[25] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[19] , E[25] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[19] , E[25] );
 	ctrEvaluate16 ( dum[0] , E[27] , E[20] , E[26] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[27] , E[20] , E[26] );
 }

module CompareIndex_0_0_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[0] , ireg[0] );
 	CNOT ( dum[0] , treg[0] );
 	X ( dum[0] );
 	CNOT ( treg[1] , ireg[1] );
 	CNOT ( dum[1] , treg[1] );
 	X ( dum[1] );
 	CNOT ( treg[2] , ireg[2] );
 	CNOT ( dum[2] , treg[2] );
 	X ( dum[2] );
 }

module RegTest_3_1 ( qbit* input , qbit* dum ) {
 	ToffoliImpl ( dum[0] , input[1] , input[0] );
 	ToffoliImpl ( dum[1] , dum[0] , input[2] );
 }

module CompareIJ_0_0_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_0_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvRegTest_3_1 ( qbit* input , qbit* dum ) {
 	ToffoliImpl ( dum[1] , dum[0] , input[2] );
 	ToffoliImpl ( dum[0] , input[1] , input[0] );
 }

module InvCompareIndex_0_0_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[2] );
 	CNOT ( treg[2] , ireg[2] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[1] );
 	CNOT ( treg[1] , ireg[1] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[0] );
 	CNOT ( treg[0] , ireg[0] );
 }

module InvCompareIJ_0_0_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_0_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_0_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[3] , ireg[0] );
 	CNOT ( dum[0] , treg[3] );
 	X ( dum[0] );
 	CNOT ( treg[4] , ireg[1] );
 	CNOT ( dum[1] , treg[4] );
 	X ( dum[1] );
 	CNOT ( treg[5] , ireg[2] );
 	CNOT ( dum[2] , treg[5] );
 	X ( dum[2] );
 }

module CompareIJ_0_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_3_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_0_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[5] );
 	CNOT ( treg[5] , ireg[2] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[4] );
 	CNOT ( treg[4] , ireg[1] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[3] );
 	CNOT ( treg[3] , ireg[0] );
 }

module InvCompareIJ_0_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_3_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_0_6_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[6] , ireg[0] );
 	CNOT ( dum[0] , treg[6] );
 	X ( dum[0] );
 	CNOT ( treg[7] , ireg[1] );
 	CNOT ( dum[1] , treg[7] );
 	X ( dum[1] );
 	CNOT ( treg[8] , ireg[2] );
 	CNOT ( dum[2] , treg[8] );
 	X ( dum[2] );
 }

module CompareIJ_0_6_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_6_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_0_6_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[8] );
 	CNOT ( treg[8] , ireg[2] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[7] );
 	CNOT ( treg[7] , ireg[1] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[6] );
 	CNOT ( treg[6] , ireg[0] );
 }

module InvCompareIJ_0_6_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_6_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_0_9_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[9] , ireg[0] );
 	CNOT ( dum[0] , treg[9] );
 	X ( dum[0] );
 	CNOT ( treg[10] , ireg[1] );
 	CNOT ( dum[1] , treg[10] );
 	X ( dum[1] );
 	CNOT ( treg[11] , ireg[2] );
 	CNOT ( dum[2] , treg[11] );
 	X ( dum[2] );
 }

module CompareIJ_0_9_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_9_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_0_9_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[11] );
 	CNOT ( treg[11] , ireg[2] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[10] );
 	CNOT ( treg[10] , ireg[1] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[9] );
 	CNOT ( treg[9] , ireg[0] );
 }

module InvCompareIJ_0_9_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_9_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_0_12_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[12] , ireg[0] );
 	CNOT ( dum[0] , treg[12] );
 	X ( dum[0] );
 	CNOT ( treg[13] , ireg[1] );
 	CNOT ( dum[1] , treg[13] );
 	X ( dum[1] );
 	CNOT ( treg[14] , ireg[2] );
 	CNOT ( dum[2] , treg[14] );
 	X ( dum[2] );
 }

module CompareIJ_0_12_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_12_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_0_12_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[14] );
 	CNOT ( treg[14] , ireg[2] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[13] );
 	CNOT ( treg[13] , ireg[1] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[12] );
 	CNOT ( treg[12] , ireg[0] );
 }

module InvCompareIJ_0_12_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_12_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_0_15_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[15] , ireg[0] );
 	CNOT ( dum[0] , treg[15] );
 	X ( dum[0] );
 	CNOT ( treg[16] , ireg[1] );
 	CNOT ( dum[1] , treg[16] );
 	X ( dum[1] );
 	CNOT ( treg[17] , ireg[2] );
 	CNOT ( dum[2] , treg[17] );
 	X ( dum[2] );
 }

module CompareIJ_0_15_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_15_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_0_15_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[17] );
 	CNOT ( treg[17] , ireg[2] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[16] );
 	CNOT ( treg[16] , ireg[1] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[15] );
 	CNOT ( treg[15] , ireg[0] );
 }

module InvCompareIJ_0_15_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_15_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_0_18_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[18] , ireg[0] );
 	CNOT ( dum[0] , treg[18] );
 	X ( dum[0] );
 	CNOT ( treg[19] , ireg[1] );
 	CNOT ( dum[1] , treg[19] );
 	X ( dum[1] );
 	CNOT ( treg[20] , ireg[2] );
 	CNOT ( dum[2] , treg[20] );
 	X ( dum[2] );
 }

module CompareIJ_0_18_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_18_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_0_18_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[20] );
 	CNOT ( treg[20] , ireg[2] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[19] );
 	CNOT ( treg[19] , ireg[1] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[18] );
 	CNOT ( treg[18] , ireg[0] );
 }

module InvCompareIJ_0_18_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_18_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_0_21_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[21] , ireg[0] );
 	CNOT ( dum[0] , treg[21] );
 	X ( dum[0] );
 	CNOT ( treg[22] , ireg[1] );
 	CNOT ( dum[1] , treg[22] );
 	X ( dum[1] );
 	CNOT ( treg[23] , ireg[2] );
 	CNOT ( dum[2] , treg[23] );
 	X ( dum[2] );
 }

module CompareIJ_0_21_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_21_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_0_21_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[23] );
 	CNOT ( treg[23] , ireg[2] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[22] );
 	CNOT ( treg[22] , ireg[1] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[21] );
 	CNOT ( treg[21] , ireg[0] );
 }

module InvCompareIJ_0_21_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_21_3 ( ireg , idxIJ , ctrbit2 );
 }

module FetchT_0 ( qbit* I , qbit* T , qbit* Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[0] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[1] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[2] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[3] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[4] , ctrbit[1] );
 	InvCompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[5] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[6] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[7] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[8] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[9] , ctrbit[1] );
 	InvCompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[10] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[11] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[12] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[13] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[14] , ctrbit[1] );
 	InvCompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[15] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[16] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[17] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[18] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[19] , ctrbit[1] );
 	InvCompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[20] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[21] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[22] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[23] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[24] , ctrbit[1] );
 	InvCompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[25] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[26] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[27] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[28] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[29] , ctrbit[1] );
 	InvCompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[30] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[31] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[32] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[33] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[34] , ctrbit[1] );
 	InvCompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[35] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[36] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[37] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[38] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[39] , ctrbit[1] );
 	InvCompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module EdgeORACLE_0_0 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_0_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 }

module CompareIndex_3_0_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[0] , ireg[3] );
 	CNOT ( dum[0] , treg[0] );
 	X ( dum[0] );
 	CNOT ( treg[1] , ireg[4] );
 	CNOT ( dum[1] , treg[1] );
 	X ( dum[1] );
 	CNOT ( treg[2] , ireg[5] );
 	CNOT ( dum[2] , treg[2] );
 	X ( dum[2] );
 }

module CompareIJ_3_0_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_0_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_0_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[2] );
 	CNOT ( treg[2] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[1] );
 	CNOT ( treg[1] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[0] );
 	CNOT ( treg[0] , ireg[3] );
 }

module InvCompareIJ_3_0_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_0_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_3_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[3] , ireg[3] );
 	CNOT ( dum[0] , treg[3] );
 	X ( dum[0] );
 	CNOT ( treg[4] , ireg[4] );
 	CNOT ( dum[1] , treg[4] );
 	X ( dum[1] );
 	CNOT ( treg[5] , ireg[5] );
 	CNOT ( dum[2] , treg[5] );
 	X ( dum[2] );
 }

module CompareIJ_3_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_3_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[5] );
 	CNOT ( treg[5] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[4] );
 	CNOT ( treg[4] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[3] );
 	CNOT ( treg[3] , ireg[3] );
 }

module InvCompareIJ_3_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_3_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_3_6_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[6] , ireg[3] );
 	CNOT ( dum[0] , treg[6] );
 	X ( dum[0] );
 	CNOT ( treg[7] , ireg[4] );
 	CNOT ( dum[1] , treg[7] );
 	X ( dum[1] );
 	CNOT ( treg[8] , ireg[5] );
 	CNOT ( dum[2] , treg[8] );
 	X ( dum[2] );
 }

module CompareIJ_3_6_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_6_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_6_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[8] );
 	CNOT ( treg[8] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[7] );
 	CNOT ( treg[7] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[6] );
 	CNOT ( treg[6] , ireg[3] );
 }

module InvCompareIJ_3_6_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_6_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_3_9_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[9] , ireg[3] );
 	CNOT ( dum[0] , treg[9] );
 	X ( dum[0] );
 	CNOT ( treg[10] , ireg[4] );
 	CNOT ( dum[1] , treg[10] );
 	X ( dum[1] );
 	CNOT ( treg[11] , ireg[5] );
 	CNOT ( dum[2] , treg[11] );
 	X ( dum[2] );
 }

module CompareIJ_3_9_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_9_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_9_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[11] );
 	CNOT ( treg[11] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[10] );
 	CNOT ( treg[10] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[9] );
 	CNOT ( treg[9] , ireg[3] );
 }

module InvCompareIJ_3_9_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_9_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_3_12_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[12] , ireg[3] );
 	CNOT ( dum[0] , treg[12] );
 	X ( dum[0] );
 	CNOT ( treg[13] , ireg[4] );
 	CNOT ( dum[1] , treg[13] );
 	X ( dum[1] );
 	CNOT ( treg[14] , ireg[5] );
 	CNOT ( dum[2] , treg[14] );
 	X ( dum[2] );
 }

module CompareIJ_3_12_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_12_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_12_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[14] );
 	CNOT ( treg[14] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[13] );
 	CNOT ( treg[13] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[12] );
 	CNOT ( treg[12] , ireg[3] );
 }

module InvCompareIJ_3_12_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_12_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_3_15_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[15] , ireg[3] );
 	CNOT ( dum[0] , treg[15] );
 	X ( dum[0] );
 	CNOT ( treg[16] , ireg[4] );
 	CNOT ( dum[1] , treg[16] );
 	X ( dum[1] );
 	CNOT ( treg[17] , ireg[5] );
 	CNOT ( dum[2] , treg[17] );
 	X ( dum[2] );
 }

module CompareIJ_3_15_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_15_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_15_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[17] );
 	CNOT ( treg[17] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[16] );
 	CNOT ( treg[16] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[15] );
 	CNOT ( treg[15] , ireg[3] );
 }

module InvCompareIJ_3_15_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_15_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_3_18_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[18] , ireg[3] );
 	CNOT ( dum[0] , treg[18] );
 	X ( dum[0] );
 	CNOT ( treg[19] , ireg[4] );
 	CNOT ( dum[1] , treg[19] );
 	X ( dum[1] );
 	CNOT ( treg[20] , ireg[5] );
 	CNOT ( dum[2] , treg[20] );
 	X ( dum[2] );
 }

module CompareIJ_3_18_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_18_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_18_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[20] );
 	CNOT ( treg[20] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[19] );
 	CNOT ( treg[19] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[18] );
 	CNOT ( treg[18] , ireg[3] );
 }

module InvCompareIJ_3_18_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_18_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_3_21_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[21] , ireg[3] );
 	CNOT ( dum[0] , treg[21] );
 	X ( dum[0] );
 	CNOT ( treg[22] , ireg[4] );
 	CNOT ( dum[1] , treg[22] );
 	X ( dum[1] );
 	CNOT ( treg[23] , ireg[5] );
 	CNOT ( dum[2] , treg[23] );
 	X ( dum[2] );
 }

module CompareIJ_3_21_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_21_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_21_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[23] );
 	CNOT ( treg[23] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[22] );
 	CNOT ( treg[22] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[21] );
 	CNOT ( treg[21] , ireg[3] );
 }

module InvCompareIJ_3_21_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_21_3 ( ireg , idxIJ , ctrbit2 );
 }

module FetchT_3 ( qbit* I , qbit* T , qbit* Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_3_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[0] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[1] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[2] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[3] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[4] , ctrbit[1] );
 	InvCompareIJ_3_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[5] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[6] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[7] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[8] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[9] , ctrbit[1] );
 	InvCompareIJ_3_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[10] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[11] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[12] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[13] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[14] , ctrbit[1] );
 	InvCompareIJ_3_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[15] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[16] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[17] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[18] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[19] , ctrbit[1] );
 	InvCompareIJ_3_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[20] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[21] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[22] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[23] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[24] , ctrbit[1] );
 	InvCompareIJ_3_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[25] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[26] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[27] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[28] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[29] , ctrbit[1] );
 	InvCompareIJ_3_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[30] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[31] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[32] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[33] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[34] , ctrbit[1] );
 	InvCompareIJ_3_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[35] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[36] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[37] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[38] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[39] , ctrbit[1] );
 	InvCompareIJ_3_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module CompareIndex_6_0_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[0] , ireg[6] );
 	CNOT ( dum[0] , treg[0] );
 	X ( dum[0] );
 	CNOT ( treg[1] , ireg[7] );
 	CNOT ( dum[1] , treg[1] );
 	X ( dum[1] );
 	CNOT ( treg[2] , ireg[8] );
 	CNOT ( dum[2] , treg[2] );
 	X ( dum[2] );
 }

module CompareIJ_6_0_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_0_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_0_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[2] );
 	CNOT ( treg[2] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[1] );
 	CNOT ( treg[1] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[0] );
 	CNOT ( treg[0] , ireg[6] );
 }

module InvCompareIJ_6_0_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_0_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_6_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[3] , ireg[6] );
 	CNOT ( dum[0] , treg[3] );
 	X ( dum[0] );
 	CNOT ( treg[4] , ireg[7] );
 	CNOT ( dum[1] , treg[4] );
 	X ( dum[1] );
 	CNOT ( treg[5] , ireg[8] );
 	CNOT ( dum[2] , treg[5] );
 	X ( dum[2] );
 }

module CompareIJ_6_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_3_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[5] );
 	CNOT ( treg[5] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[4] );
 	CNOT ( treg[4] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[3] );
 	CNOT ( treg[3] , ireg[6] );
 }

module InvCompareIJ_6_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_3_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_6_6_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[6] , ireg[6] );
 	CNOT ( dum[0] , treg[6] );
 	X ( dum[0] );
 	CNOT ( treg[7] , ireg[7] );
 	CNOT ( dum[1] , treg[7] );
 	X ( dum[1] );
 	CNOT ( treg[8] , ireg[8] );
 	CNOT ( dum[2] , treg[8] );
 	X ( dum[2] );
 }

module CompareIJ_6_6_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_6_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_6_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[8] );
 	CNOT ( treg[8] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[7] );
 	CNOT ( treg[7] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[6] );
 	CNOT ( treg[6] , ireg[6] );
 }

module InvCompareIJ_6_6_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_6_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_6_9_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[9] , ireg[6] );
 	CNOT ( dum[0] , treg[9] );
 	X ( dum[0] );
 	CNOT ( treg[10] , ireg[7] );
 	CNOT ( dum[1] , treg[10] );
 	X ( dum[1] );
 	CNOT ( treg[11] , ireg[8] );
 	CNOT ( dum[2] , treg[11] );
 	X ( dum[2] );
 }

module CompareIJ_6_9_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_9_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_9_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[11] );
 	CNOT ( treg[11] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[10] );
 	CNOT ( treg[10] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[9] );
 	CNOT ( treg[9] , ireg[6] );
 }

module InvCompareIJ_6_9_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_9_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_6_12_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[12] , ireg[6] );
 	CNOT ( dum[0] , treg[12] );
 	X ( dum[0] );
 	CNOT ( treg[13] , ireg[7] );
 	CNOT ( dum[1] , treg[13] );
 	X ( dum[1] );
 	CNOT ( treg[14] , ireg[8] );
 	CNOT ( dum[2] , treg[14] );
 	X ( dum[2] );
 }

module CompareIJ_6_12_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_12_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_12_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[14] );
 	CNOT ( treg[14] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[13] );
 	CNOT ( treg[13] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[12] );
 	CNOT ( treg[12] , ireg[6] );
 }

module InvCompareIJ_6_12_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_12_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_6_15_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[15] , ireg[6] );
 	CNOT ( dum[0] , treg[15] );
 	X ( dum[0] );
 	CNOT ( treg[16] , ireg[7] );
 	CNOT ( dum[1] , treg[16] );
 	X ( dum[1] );
 	CNOT ( treg[17] , ireg[8] );
 	CNOT ( dum[2] , treg[17] );
 	X ( dum[2] );
 }

module CompareIJ_6_15_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_15_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_15_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[17] );
 	CNOT ( treg[17] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[16] );
 	CNOT ( treg[16] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[15] );
 	CNOT ( treg[15] , ireg[6] );
 }

module InvCompareIJ_6_15_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_15_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_6_18_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[18] , ireg[6] );
 	CNOT ( dum[0] , treg[18] );
 	X ( dum[0] );
 	CNOT ( treg[19] , ireg[7] );
 	CNOT ( dum[1] , treg[19] );
 	X ( dum[1] );
 	CNOT ( treg[20] , ireg[8] );
 	CNOT ( dum[2] , treg[20] );
 	X ( dum[2] );
 }

module CompareIJ_6_18_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_18_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_18_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[20] );
 	CNOT ( treg[20] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[19] );
 	CNOT ( treg[19] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[18] );
 	CNOT ( treg[18] , ireg[6] );
 }

module InvCompareIJ_6_18_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_18_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_6_21_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[21] , ireg[6] );
 	CNOT ( dum[0] , treg[21] );
 	X ( dum[0] );
 	CNOT ( treg[22] , ireg[7] );
 	CNOT ( dum[1] , treg[22] );
 	X ( dum[1] );
 	CNOT ( treg[23] , ireg[8] );
 	CNOT ( dum[2] , treg[23] );
 	X ( dum[2] );
 }

module CompareIJ_6_21_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_21_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_21_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[23] );
 	CNOT ( treg[23] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[22] );
 	CNOT ( treg[22] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[21] );
 	CNOT ( treg[21] , ireg[6] );
 }

module InvCompareIJ_6_21_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_21_3 ( ireg , idxIJ , ctrbit2 );
 }

module FetchT_6 ( qbit* I , qbit* T , qbit* Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_6_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[0] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[1] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[2] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[3] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[4] , ctrbit[1] );
 	InvCompareIJ_6_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[5] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[6] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[7] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[8] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[9] , ctrbit[1] );
 	InvCompareIJ_6_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[10] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[11] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[12] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[13] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[14] , ctrbit[1] );
 	InvCompareIJ_6_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[15] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[16] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[17] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[18] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[19] , ctrbit[1] );
 	InvCompareIJ_6_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[20] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[21] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[22] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[23] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[24] , ctrbit[1] );
 	InvCompareIJ_6_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[25] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[26] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[27] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[28] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[29] , ctrbit[1] );
 	InvCompareIJ_6_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[30] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[31] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[32] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[33] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[34] , ctrbit[1] );
 	InvCompareIJ_6_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[35] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[36] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[37] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[38] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[39] , ctrbit[1] );
 	InvCompareIJ_6_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module CompareIndex_9_0_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[0] , ireg[9] );
 	CNOT ( dum[0] , treg[0] );
 	X ( dum[0] );
 	CNOT ( treg[1] , ireg[10] );
 	CNOT ( dum[1] , treg[1] );
 	X ( dum[1] );
 	CNOT ( treg[2] , ireg[11] );
 	CNOT ( dum[2] , treg[2] );
 	X ( dum[2] );
 }

module CompareIJ_9_0_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_0_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_0_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[2] );
 	CNOT ( treg[2] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[1] );
 	CNOT ( treg[1] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[0] );
 	CNOT ( treg[0] , ireg[9] );
 }

module InvCompareIJ_9_0_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_0_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_9_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[3] , ireg[9] );
 	CNOT ( dum[0] , treg[3] );
 	X ( dum[0] );
 	CNOT ( treg[4] , ireg[10] );
 	CNOT ( dum[1] , treg[4] );
 	X ( dum[1] );
 	CNOT ( treg[5] , ireg[11] );
 	CNOT ( dum[2] , treg[5] );
 	X ( dum[2] );
 }

module CompareIJ_9_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_3_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[5] );
 	CNOT ( treg[5] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[4] );
 	CNOT ( treg[4] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[3] );
 	CNOT ( treg[3] , ireg[9] );
 }

module InvCompareIJ_9_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_3_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_9_6_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[6] , ireg[9] );
 	CNOT ( dum[0] , treg[6] );
 	X ( dum[0] );
 	CNOT ( treg[7] , ireg[10] );
 	CNOT ( dum[1] , treg[7] );
 	X ( dum[1] );
 	CNOT ( treg[8] , ireg[11] );
 	CNOT ( dum[2] , treg[8] );
 	X ( dum[2] );
 }

module CompareIJ_9_6_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_6_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_6_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[8] );
 	CNOT ( treg[8] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[7] );
 	CNOT ( treg[7] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[6] );
 	CNOT ( treg[6] , ireg[9] );
 }

module InvCompareIJ_9_6_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_6_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_9_9_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[9] , ireg[9] );
 	CNOT ( dum[0] , treg[9] );
 	X ( dum[0] );
 	CNOT ( treg[10] , ireg[10] );
 	CNOT ( dum[1] , treg[10] );
 	X ( dum[1] );
 	CNOT ( treg[11] , ireg[11] );
 	CNOT ( dum[2] , treg[11] );
 	X ( dum[2] );
 }

module CompareIJ_9_9_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_9_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_9_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[11] );
 	CNOT ( treg[11] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[10] );
 	CNOT ( treg[10] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[9] );
 	CNOT ( treg[9] , ireg[9] );
 }

module InvCompareIJ_9_9_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_9_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_9_12_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[12] , ireg[9] );
 	CNOT ( dum[0] , treg[12] );
 	X ( dum[0] );
 	CNOT ( treg[13] , ireg[10] );
 	CNOT ( dum[1] , treg[13] );
 	X ( dum[1] );
 	CNOT ( treg[14] , ireg[11] );
 	CNOT ( dum[2] , treg[14] );
 	X ( dum[2] );
 }

module CompareIJ_9_12_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_12_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_12_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[14] );
 	CNOT ( treg[14] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[13] );
 	CNOT ( treg[13] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[12] );
 	CNOT ( treg[12] , ireg[9] );
 }

module InvCompareIJ_9_12_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_12_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_9_15_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[15] , ireg[9] );
 	CNOT ( dum[0] , treg[15] );
 	X ( dum[0] );
 	CNOT ( treg[16] , ireg[10] );
 	CNOT ( dum[1] , treg[16] );
 	X ( dum[1] );
 	CNOT ( treg[17] , ireg[11] );
 	CNOT ( dum[2] , treg[17] );
 	X ( dum[2] );
 }

module CompareIJ_9_15_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_15_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_15_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[17] );
 	CNOT ( treg[17] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[16] );
 	CNOT ( treg[16] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[15] );
 	CNOT ( treg[15] , ireg[9] );
 }

module InvCompareIJ_9_15_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_15_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_9_18_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[18] , ireg[9] );
 	CNOT ( dum[0] , treg[18] );
 	X ( dum[0] );
 	CNOT ( treg[19] , ireg[10] );
 	CNOT ( dum[1] , treg[19] );
 	X ( dum[1] );
 	CNOT ( treg[20] , ireg[11] );
 	CNOT ( dum[2] , treg[20] );
 	X ( dum[2] );
 }

module CompareIJ_9_18_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_18_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_18_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[20] );
 	CNOT ( treg[20] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[19] );
 	CNOT ( treg[19] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[18] );
 	CNOT ( treg[18] , ireg[9] );
 }

module InvCompareIJ_9_18_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_18_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_9_21_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[21] , ireg[9] );
 	CNOT ( dum[0] , treg[21] );
 	X ( dum[0] );
 	CNOT ( treg[22] , ireg[10] );
 	CNOT ( dum[1] , treg[22] );
 	X ( dum[1] );
 	CNOT ( treg[23] , ireg[11] );
 	CNOT ( dum[2] , treg[23] );
 	X ( dum[2] );
 }

module CompareIJ_9_21_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_21_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_21_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[23] );
 	CNOT ( treg[23] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[22] );
 	CNOT ( treg[22] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[21] );
 	CNOT ( treg[21] , ireg[9] );
 }

module InvCompareIJ_9_21_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_21_3 ( ireg , idxIJ , ctrbit2 );
 }

module FetchT_9 ( qbit* I , qbit* T , qbit* Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_9_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[0] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[1] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[2] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[3] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[4] , ctrbit[1] );
 	InvCompareIJ_9_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[5] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[6] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[7] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[8] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[9] , ctrbit[1] );
 	InvCompareIJ_9_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[10] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[11] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[12] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[13] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[14] , ctrbit[1] );
 	InvCompareIJ_9_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[15] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[16] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[17] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[18] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[19] , ctrbit[1] );
 	InvCompareIJ_9_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[20] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[21] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[22] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[23] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[24] , ctrbit[1] );
 	InvCompareIJ_9_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[25] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[26] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[27] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[28] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[29] , ctrbit[1] );
 	InvCompareIJ_9_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[30] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[31] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[32] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[33] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[34] , ctrbit[1] );
 	InvCompareIJ_9_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , T[35] , ctrbit[1] );
 	ToffoliImpl ( Td[1] , T[36] , ctrbit[1] );
 	ToffoliImpl ( Td[2] , T[37] , ctrbit[1] );
 	ToffoliImpl ( Td[3] , T[38] , ctrbit[1] );
 	ToffoliImpl ( Td[4] , T[39] , ctrbit[1] );
 	InvCompareIJ_9_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module FetchE_0 ( qbit* I , qbit* E , qbit* Ed , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[1] , E[0] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[1] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[3] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[6] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[10] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[15] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[21] , ctrbit[1] );
 	InvCompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[0] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[2] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[4] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[7] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[11] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[16] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[22] , ctrbit[1] );
 	InvCompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[1] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[2] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[5] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[8] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[12] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[17] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[23] , ctrbit[1] );
 	InvCompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[3] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[4] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[5] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[9] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[13] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[18] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[24] , ctrbit[1] );
 	InvCompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[6] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[7] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[8] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[9] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[14] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[19] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[25] , ctrbit[1] );
 	InvCompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[10] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[11] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[12] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[13] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[14] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[20] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[26] , ctrbit[1] );
 	InvCompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[15] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[16] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[17] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[18] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[19] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[20] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[27] , ctrbit[1] );
 	InvCompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[21] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[22] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[23] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[24] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[25] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[26] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[27] , ctrbit[1] );
 	InvCompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module CompareIndex_12_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[12] , ireg[3] );
 	CNOT ( dum[0] , treg[12] );
 	X ( dum[0] );
 	CNOT ( treg[13] , ireg[4] );
 	CNOT ( dum[1] , treg[13] );
 	X ( dum[1] );
 	CNOT ( treg[14] , ireg[5] );
 	CNOT ( dum[2] , treg[14] );
 	X ( dum[2] );
 }

module CompareIJ_12_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_12_3_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_12_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[14] );
 	CNOT ( treg[14] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[13] );
 	CNOT ( treg[13] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[12] );
 	CNOT ( treg[12] , ireg[3] );
 }

module InvCompareIJ_12_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_12_3_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_15_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[15] , ireg[3] );
 	CNOT ( dum[0] , treg[15] );
 	X ( dum[0] );
 	CNOT ( treg[16] , ireg[4] );
 	CNOT ( dum[1] , treg[16] );
 	X ( dum[1] );
 	CNOT ( treg[17] , ireg[5] );
 	CNOT ( dum[2] , treg[17] );
 	X ( dum[2] );
 }

module CompareIJ_15_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_15_3_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_15_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[17] );
 	CNOT ( treg[17] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[16] );
 	CNOT ( treg[16] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[15] );
 	CNOT ( treg[15] , ireg[3] );
 }

module InvCompareIJ_15_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_15_3_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_18_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[18] , ireg[3] );
 	CNOT ( dum[0] , treg[18] );
 	X ( dum[0] );
 	CNOT ( treg[19] , ireg[4] );
 	CNOT ( dum[1] , treg[19] );
 	X ( dum[1] );
 	CNOT ( treg[20] , ireg[5] );
 	CNOT ( dum[2] , treg[20] );
 	X ( dum[2] );
 }

module CompareIJ_18_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_18_3_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_18_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[20] );
 	CNOT ( treg[20] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[19] );
 	CNOT ( treg[19] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[18] );
 	CNOT ( treg[18] , ireg[3] );
 }

module InvCompareIJ_18_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_18_3_3 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_21_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[21] , ireg[3] );
 	CNOT ( dum[0] , treg[21] );
 	X ( dum[0] );
 	CNOT ( treg[22] , ireg[4] );
 	CNOT ( dum[1] , treg[22] );
 	X ( dum[1] );
 	CNOT ( treg[23] , ireg[5] );
 	CNOT ( dum[2] , treg[23] );
 	X ( dum[2] );
 }

module CompareIJ_21_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_21_3_3 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_21_3_3 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[23] );
 	CNOT ( treg[23] , ireg[5] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[22] );
 	CNOT ( treg[22] , ireg[4] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[21] );
 	CNOT ( treg[21] , ireg[3] );
 }

module InvCompareIJ_21_3_3 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_21_3_3 ( ireg , idxIJ , ctrbit2 );
 }

module FetchTr1_1_3 ( qbit* I , qbit* T , qbit Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[0] , ctrbit[1] );
 	InvCompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[1] , ctrbit[1] );
 	InvCompareIJ_3_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[2] , ctrbit[1] );
 	InvCompareIJ_6_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[3] , ctrbit[1] );
 	InvCompareIJ_9_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_12_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[4] , ctrbit[1] );
 	InvCompareIJ_12_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_15_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[5] , ctrbit[1] );
 	InvCompareIJ_15_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_18_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[6] , ctrbit[1] );
 	InvCompareIJ_18_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_21_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[7] , ctrbit[1] );
 	InvCompareIJ_21_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module ctrCTRincr_3 ( qbit* cTri , qbit ctrQ , qbit* ctrbit2 ) {
 	CNOT ( ctrbit2[0] , ctrQ );
 	ToffoliImpl ( ctrbit2[1] , ctrbit2[0] , cTri[0] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , cTri[1] );
 	CNOT ( cTri[2] , ctrbit2[2] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , cTri[1] );
 	CNOT ( cTri[1] , ctrbit2[1] );
 	ToffoliImpl ( ctrbit2[1] , ctrbit2[0] , cTri[0] );
 	CNOT ( cTri[0] , ctrbit2[0] );
 	CNOT ( ctrbit2[0] , ctrQ );
 }

module CompareIndex_0_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[0] , ireg[6] );
 	CNOT ( dum[0] , treg[0] );
 	X ( dum[0] );
 	CNOT ( treg[1] , ireg[7] );
 	CNOT ( dum[1] , treg[1] );
 	X ( dum[1] );
 	CNOT ( treg[2] , ireg[8] );
 	CNOT ( dum[2] , treg[2] );
 	X ( dum[2] );
 }

module CompareIJ_0_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_3_6 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_0_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[2] );
 	CNOT ( treg[2] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[1] );
 	CNOT ( treg[1] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[0] );
 	CNOT ( treg[0] , ireg[6] );
 }

module InvCompareIJ_0_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_3_6 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_3_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[3] , ireg[6] );
 	CNOT ( dum[0] , treg[3] );
 	X ( dum[0] );
 	CNOT ( treg[4] , ireg[7] );
 	CNOT ( dum[1] , treg[4] );
 	X ( dum[1] );
 	CNOT ( treg[5] , ireg[8] );
 	CNOT ( dum[2] , treg[5] );
 	X ( dum[2] );
 }

module CompareIJ_3_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_3_6 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[5] );
 	CNOT ( treg[5] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[4] );
 	CNOT ( treg[4] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[3] );
 	CNOT ( treg[3] , ireg[6] );
 }

module InvCompareIJ_3_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_3_6 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_6_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[6] , ireg[6] );
 	CNOT ( dum[0] , treg[6] );
 	X ( dum[0] );
 	CNOT ( treg[7] , ireg[7] );
 	CNOT ( dum[1] , treg[7] );
 	X ( dum[1] );
 	CNOT ( treg[8] , ireg[8] );
 	CNOT ( dum[2] , treg[8] );
 	X ( dum[2] );
 }

module CompareIJ_6_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_3_6 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[8] );
 	CNOT ( treg[8] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[7] );
 	CNOT ( treg[7] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[6] );
 	CNOT ( treg[6] , ireg[6] );
 }

module InvCompareIJ_6_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_3_6 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_9_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[9] , ireg[6] );
 	CNOT ( dum[0] , treg[9] );
 	X ( dum[0] );
 	CNOT ( treg[10] , ireg[7] );
 	CNOT ( dum[1] , treg[10] );
 	X ( dum[1] );
 	CNOT ( treg[11] , ireg[8] );
 	CNOT ( dum[2] , treg[11] );
 	X ( dum[2] );
 }

module CompareIJ_9_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_3_6 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[11] );
 	CNOT ( treg[11] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[10] );
 	CNOT ( treg[10] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[9] );
 	CNOT ( treg[9] , ireg[6] );
 }

module InvCompareIJ_9_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_3_6 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_12_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[12] , ireg[6] );
 	CNOT ( dum[0] , treg[12] );
 	X ( dum[0] );
 	CNOT ( treg[13] , ireg[7] );
 	CNOT ( dum[1] , treg[13] );
 	X ( dum[1] );
 	CNOT ( treg[14] , ireg[8] );
 	CNOT ( dum[2] , treg[14] );
 	X ( dum[2] );
 }

module CompareIJ_12_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_12_3_6 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_12_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[14] );
 	CNOT ( treg[14] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[13] );
 	CNOT ( treg[13] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[12] );
 	CNOT ( treg[12] , ireg[6] );
 }

module InvCompareIJ_12_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_12_3_6 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_15_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[15] , ireg[6] );
 	CNOT ( dum[0] , treg[15] );
 	X ( dum[0] );
 	CNOT ( treg[16] , ireg[7] );
 	CNOT ( dum[1] , treg[16] );
 	X ( dum[1] );
 	CNOT ( treg[17] , ireg[8] );
 	CNOT ( dum[2] , treg[17] );
 	X ( dum[2] );
 }

module CompareIJ_15_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_15_3_6 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_15_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[17] );
 	CNOT ( treg[17] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[16] );
 	CNOT ( treg[16] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[15] );
 	CNOT ( treg[15] , ireg[6] );
 }

module InvCompareIJ_15_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_15_3_6 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_18_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[18] , ireg[6] );
 	CNOT ( dum[0] , treg[18] );
 	X ( dum[0] );
 	CNOT ( treg[19] , ireg[7] );
 	CNOT ( dum[1] , treg[19] );
 	X ( dum[1] );
 	CNOT ( treg[20] , ireg[8] );
 	CNOT ( dum[2] , treg[20] );
 	X ( dum[2] );
 }

module CompareIJ_18_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_18_3_6 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_18_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[20] );
 	CNOT ( treg[20] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[19] );
 	CNOT ( treg[19] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[18] );
 	CNOT ( treg[18] , ireg[6] );
 }

module InvCompareIJ_18_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_18_3_6 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_21_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[21] , ireg[6] );
 	CNOT ( dum[0] , treg[21] );
 	X ( dum[0] );
 	CNOT ( treg[22] , ireg[7] );
 	CNOT ( dum[1] , treg[22] );
 	X ( dum[1] );
 	CNOT ( treg[23] , ireg[8] );
 	CNOT ( dum[2] , treg[23] );
 	X ( dum[2] );
 }

module CompareIJ_21_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_21_3_6 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_21_3_6 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[23] );
 	CNOT ( treg[23] , ireg[8] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[22] );
 	CNOT ( treg[22] , ireg[7] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[21] );
 	CNOT ( treg[21] , ireg[6] );
 }

module InvCompareIJ_21_3_6 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_21_3_6 ( ireg , idxIJ , ctrbit2 );
 }

module FetchTr1_1_6 ( qbit* I , qbit* T , qbit Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[0] , ctrbit[1] );
 	InvCompareIJ_0_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[1] , ctrbit[1] );
 	InvCompareIJ_3_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[2] , ctrbit[1] );
 	InvCompareIJ_6_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[3] , ctrbit[1] );
 	InvCompareIJ_9_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_12_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[4] , ctrbit[1] );
 	InvCompareIJ_12_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_15_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[5] , ctrbit[1] );
 	InvCompareIJ_15_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_18_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[6] , ctrbit[1] );
 	InvCompareIJ_18_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_21_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[7] , ctrbit[1] );
 	InvCompareIJ_21_3_6 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module CompareIndex_0_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[0] , ireg[9] );
 	CNOT ( dum[0] , treg[0] );
 	X ( dum[0] );
 	CNOT ( treg[1] , ireg[10] );
 	CNOT ( dum[1] , treg[1] );
 	X ( dum[1] );
 	CNOT ( treg[2] , ireg[11] );
 	CNOT ( dum[2] , treg[2] );
 	X ( dum[2] );
 }

module CompareIJ_0_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_0_3_9 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_0_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[2] );
 	CNOT ( treg[2] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[1] );
 	CNOT ( treg[1] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[0] );
 	CNOT ( treg[0] , ireg[9] );
 }

module InvCompareIJ_0_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_0_3_9 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_3_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[3] , ireg[9] );
 	CNOT ( dum[0] , treg[3] );
 	X ( dum[0] );
 	CNOT ( treg[4] , ireg[10] );
 	CNOT ( dum[1] , treg[4] );
 	X ( dum[1] );
 	CNOT ( treg[5] , ireg[11] );
 	CNOT ( dum[2] , treg[5] );
 	X ( dum[2] );
 }

module CompareIJ_3_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_3_3_9 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_3_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[5] );
 	CNOT ( treg[5] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[4] );
 	CNOT ( treg[4] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[3] );
 	CNOT ( treg[3] , ireg[9] );
 }

module InvCompareIJ_3_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_3_3_9 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_6_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[6] , ireg[9] );
 	CNOT ( dum[0] , treg[6] );
 	X ( dum[0] );
 	CNOT ( treg[7] , ireg[10] );
 	CNOT ( dum[1] , treg[7] );
 	X ( dum[1] );
 	CNOT ( treg[8] , ireg[11] );
 	CNOT ( dum[2] , treg[8] );
 	X ( dum[2] );
 }

module CompareIJ_6_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_6_3_9 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_6_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[8] );
 	CNOT ( treg[8] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[7] );
 	CNOT ( treg[7] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[6] );
 	CNOT ( treg[6] , ireg[9] );
 }

module InvCompareIJ_6_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_6_3_9 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_9_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[9] , ireg[9] );
 	CNOT ( dum[0] , treg[9] );
 	X ( dum[0] );
 	CNOT ( treg[10] , ireg[10] );
 	CNOT ( dum[1] , treg[10] );
 	X ( dum[1] );
 	CNOT ( treg[11] , ireg[11] );
 	CNOT ( dum[2] , treg[11] );
 	X ( dum[2] );
 }

module CompareIJ_9_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_9_3_9 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_9_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[11] );
 	CNOT ( treg[11] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[10] );
 	CNOT ( treg[10] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[9] );
 	CNOT ( treg[9] , ireg[9] );
 }

module InvCompareIJ_9_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_9_3_9 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_12_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[12] , ireg[9] );
 	CNOT ( dum[0] , treg[12] );
 	X ( dum[0] );
 	CNOT ( treg[13] , ireg[10] );
 	CNOT ( dum[1] , treg[13] );
 	X ( dum[1] );
 	CNOT ( treg[14] , ireg[11] );
 	CNOT ( dum[2] , treg[14] );
 	X ( dum[2] );
 }

module CompareIJ_12_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_12_3_9 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_12_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[14] );
 	CNOT ( treg[14] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[13] );
 	CNOT ( treg[13] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[12] );
 	CNOT ( treg[12] , ireg[9] );
 }

module InvCompareIJ_12_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_12_3_9 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_15_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[15] , ireg[9] );
 	CNOT ( dum[0] , treg[15] );
 	X ( dum[0] );
 	CNOT ( treg[16] , ireg[10] );
 	CNOT ( dum[1] , treg[16] );
 	X ( dum[1] );
 	CNOT ( treg[17] , ireg[11] );
 	CNOT ( dum[2] , treg[17] );
 	X ( dum[2] );
 }

module CompareIJ_15_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_15_3_9 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_15_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[17] );
 	CNOT ( treg[17] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[16] );
 	CNOT ( treg[16] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[15] );
 	CNOT ( treg[15] , ireg[9] );
 }

module InvCompareIJ_15_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_15_3_9 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_18_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[18] , ireg[9] );
 	CNOT ( dum[0] , treg[18] );
 	X ( dum[0] );
 	CNOT ( treg[19] , ireg[10] );
 	CNOT ( dum[1] , treg[19] );
 	X ( dum[1] );
 	CNOT ( treg[20] , ireg[11] );
 	CNOT ( dum[2] , treg[20] );
 	X ( dum[2] );
 }

module CompareIJ_18_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_18_3_9 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_18_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[20] );
 	CNOT ( treg[20] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[19] );
 	CNOT ( treg[19] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[18] );
 	CNOT ( treg[18] , ireg[9] );
 }

module InvCompareIJ_18_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_18_3_9 ( ireg , idxIJ , ctrbit2 );
 }

module CompareIndex_21_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	CNOT ( treg[21] , ireg[9] );
 	CNOT ( dum[0] , treg[21] );
 	X ( dum[0] );
 	CNOT ( treg[22] , ireg[10] );
 	CNOT ( dum[1] , treg[22] );
 	X ( dum[1] );
 	CNOT ( treg[23] , ireg[11] );
 	CNOT ( dum[2] , treg[23] );
 	X ( dum[2] );
 }

module CompareIJ_21_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIndex_21_3_9 ( ireg , idxIJ , ctrbit2 );
 	RegTest_3_1 ( ctrbit2 , ctrbit );
 }

module InvCompareIndex_21_3_9 ( qbit* ireg , qbit* treg , qbit* dum ) {
 	X ( dum[2] );
 	CNOT ( dum[2] , treg[23] );
 	CNOT ( treg[23] , ireg[11] );
 	X ( dum[1] );
 	CNOT ( dum[1] , treg[22] );
 	CNOT ( treg[22] , ireg[10] );
 	X ( dum[0] );
 	CNOT ( dum[0] , treg[21] );
 	CNOT ( treg[21] , ireg[9] );
 }

module InvCompareIJ_21_3_9 ( qbit* ireg , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	InvRegTest_3_1 ( ctrbit2 , ctrbit );
 	InvCompareIndex_21_3_9 ( ireg , idxIJ , ctrbit2 );
 }

module FetchTr1_1_9 ( qbit* I , qbit* T , qbit Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[0] , ctrbit[1] );
 	InvCompareIJ_0_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[1] , ctrbit[1] );
 	InvCompareIJ_3_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[2] , ctrbit[1] );
 	InvCompareIJ_6_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[3] , ctrbit[1] );
 	InvCompareIJ_9_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_12_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[4] , ctrbit[1] );
 	InvCompareIJ_12_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_15_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[5] , ctrbit[1] );
 	InvCompareIJ_15_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_18_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[6] , ctrbit[1] );
 	InvCompareIJ_18_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_21_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[7] , ctrbit[1] );
 	InvCompareIJ_21_3_9 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module FetchE_3 ( qbit* I , qbit* E , qbit* Ed , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_3_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[1] , E[0] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[1] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[3] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[6] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[10] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[15] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[21] , ctrbit[1] );
 	InvCompareIJ_3_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[0] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[2] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[4] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[7] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[11] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[16] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[22] , ctrbit[1] );
 	InvCompareIJ_3_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[1] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[2] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[5] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[8] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[12] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[17] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[23] , ctrbit[1] );
 	InvCompareIJ_3_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[3] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[4] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[5] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[9] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[13] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[18] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[24] , ctrbit[1] );
 	InvCompareIJ_3_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[6] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[7] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[8] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[9] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[14] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[19] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[25] , ctrbit[1] );
 	InvCompareIJ_3_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[10] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[11] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[12] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[13] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[14] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[20] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[26] , ctrbit[1] );
 	InvCompareIJ_3_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[15] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[16] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[17] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[18] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[19] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[20] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[27] , ctrbit[1] );
 	InvCompareIJ_3_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[21] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[22] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[23] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[24] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[25] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[26] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[27] , ctrbit[1] );
 	InvCompareIJ_3_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module FetchE_6 ( qbit* I , qbit* E , qbit* Ed , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_6_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[1] , E[0] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[1] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[3] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[6] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[10] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[15] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[21] , ctrbit[1] );
 	InvCompareIJ_6_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[0] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[2] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[4] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[7] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[11] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[16] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[22] , ctrbit[1] );
 	InvCompareIJ_6_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[1] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[2] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[5] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[8] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[12] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[17] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[23] , ctrbit[1] );
 	InvCompareIJ_6_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[3] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[4] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[5] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[9] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[13] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[18] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[24] , ctrbit[1] );
 	InvCompareIJ_6_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[6] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[7] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[8] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[9] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[14] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[19] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[25] , ctrbit[1] );
 	InvCompareIJ_6_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[10] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[11] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[12] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[13] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[14] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[20] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[26] , ctrbit[1] );
 	InvCompareIJ_6_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[15] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[16] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[17] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[18] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[19] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[20] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[27] , ctrbit[1] );
 	InvCompareIJ_6_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[21] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[22] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[23] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[24] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[25] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[26] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[27] , ctrbit[1] );
 	InvCompareIJ_6_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module FetchTr1_9_1 ( qbit* I , qbit* T , qbit Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_9_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[0] , ctrbit[1] );
 	InvCompareIJ_9_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[1] , ctrbit[1] );
 	InvCompareIJ_9_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[2] , ctrbit[1] );
 	InvCompareIJ_9_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[3] , ctrbit[1] );
 	InvCompareIJ_9_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[4] , ctrbit[1] );
 	InvCompareIJ_9_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[5] , ctrbit[1] );
 	InvCompareIJ_9_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[6] , ctrbit[1] );
 	InvCompareIJ_9_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[7] , ctrbit[1] );
 	InvCompareIJ_9_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module FetchE_9 ( qbit* I , qbit* E , qbit* Ed , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_9_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[1] , E[0] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[1] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[3] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[6] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[10] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[15] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[21] , ctrbit[1] );
 	InvCompareIJ_9_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[0] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[2] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[4] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[7] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[11] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[16] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[22] , ctrbit[1] );
 	InvCompareIJ_9_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[1] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[2] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[5] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[8] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[12] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[17] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[23] , ctrbit[1] );
 	InvCompareIJ_9_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[3] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[4] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[5] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[9] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[13] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[18] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[24] , ctrbit[1] );
 	InvCompareIJ_9_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[6] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[7] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[8] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[9] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[14] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[19] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[25] , ctrbit[1] );
 	InvCompareIJ_9_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[10] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[11] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[12] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[13] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[14] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[20] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[26] , ctrbit[1] );
 	InvCompareIJ_9_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[15] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[16] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[17] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[18] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[19] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[20] , ctrbit[1] );
 	ToffoliImpl ( Ed[7] , E[27] , ctrbit[1] );
 	InvCompareIJ_9_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_9_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Ed[0] , E[21] , ctrbit[1] );
 	ToffoliImpl ( Ed[1] , E[22] , ctrbit[1] );
 	ToffoliImpl ( Ed[2] , E[23] , ctrbit[1] );
 	ToffoliImpl ( Ed[3] , E[24] , ctrbit[1] );
 	ToffoliImpl ( Ed[4] , E[25] , ctrbit[1] );
 	ToffoliImpl ( Ed[5] , E[26] , ctrbit[1] );
 	ToffoliImpl ( Ed[6] , E[27] , ctrbit[1] );
 	InvCompareIJ_9_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module RegTest_3_0 ( qbit* input , qbit* dum ) {
 	X ( input[0] );
 	X ( input[1] );
 	X ( input[2] );
 	ToffoliImpl ( dum[0] , input[1] , input[0] );
 	ToffoliImpl ( dum[1] , dum[0] , input[2] );
 }

module InvRegTest_3_0 ( qbit* input , qbit* dum ) {
 	ToffoliImpl ( dum[1] , dum[0] , input[2] );
 	ToffoliImpl ( dum[0] , input[1] , input[0] );
 	X ( input[0] );
 	X ( input[1] );
 	X ( input[2] );
 }

module RegTest_2_0 ( qbit* input , qbit* dum ) {
 	X ( input[0] );
 	X ( input[1] );
 	ToffoliImpl ( dum[0] , input[1] , input[0] );
 	ToffoliImpl ( dum[0] , dum[3] , input[1] );
 }

module InvRegTest_2_0 ( qbit* input , qbit* dum ) {
 	ToffoliImpl ( dum[0] , dum[3] , input[1] );
 	ToffoliImpl ( dum[0] , input[1] , input[0] );
 	X ( input[0] );
 	X ( input[1] );
 }

module DIFFUSEGC ( qbit* ta , qbit* ma , qbit* ctrbit2 , qbit* ctrbit ) {
 	qbit tmpphase[1];
	PrepZ ( tmpphase[0] , 0 );
 	X ( tmpphase[0] );
 	H ( tmpphase[0] );
 	H ( ta[0] );
 	H ( ta[1] );
 	H ( ma[0] );
 	H ( ma[1] );
 	H ( ma[2] );
 	X ( tmpphase[0] );
 	RegTest_2_0 ( ta , ctrbit );
 	RegTest_3_0 ( ma , ctrbit2 );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , ctrbit[0] );
 	CNOT ( tmpphase[0] , ctrbit2[2] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , ctrbit[0] );
 	InvRegTest_3_0 ( ma , ctrbit2 );
 	InvRegTest_2_0 ( ta , ctrbit );
 	H ( tmpphase[0] );
 	X ( tmpphase[0] );
 	H ( ta[0] );
 	H ( ta[1] );
 	H ( ma[0] );
 	H ( ma[1] );
 	H ( ma[2] );
 }

module FetchTrbarr ( qbit* iota , qbit* tau , qbit* Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_0_3 ( iota , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , tau[0] , ctrbit[0] );
 	ToffoliImpl ( Td[1] , tau[1] , ctrbit[0] );
 	ToffoliImpl ( Td[2] , tau[2] , ctrbit[0] );
 	InvCompareIJ_0_0_3 ( iota , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_3_3 ( iota , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , tau[3] , ctrbit[0] );
 	ToffoliImpl ( Td[1] , tau[4] , ctrbit[0] );
 	ToffoliImpl ( Td[2] , tau[5] , ctrbit[0] );
 	InvCompareIJ_0_3_3 ( iota , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_6_3 ( iota , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , tau[6] , ctrbit[0] );
 	ToffoliImpl ( Td[1] , tau[7] , ctrbit[0] );
 	ToffoliImpl ( Td[2] , tau[8] , ctrbit[0] );
 	InvCompareIJ_0_6_3 ( iota , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_9_3 ( iota , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td[0] , tau[9] , ctrbit[0] );
 	ToffoliImpl ( Td[1] , tau[10] , ctrbit[0] );
 	ToffoliImpl ( Td[2] , tau[11] , ctrbit[0] );
 	InvCompareIJ_0_9_3 ( iota , idxIJ , ctrbit2 , ctrbit );
 }

module ctrSwap ( qbit q1 , qbit q2 , qbit q3 ) {
 	ToffoliImpl ( q2 , q1 , q3 );
 	ToffoliImpl ( q1 , q2 , q3 );
 	ToffoliImpl ( q2 , q1 , q3 );
 }

module FetchStoreT_1 ( qbit* I , qbit* T , qbit Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( T[0] , Td , ctrbit[0] );
 	InvCompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( T[1] , Td , ctrbit[0] );
 	InvCompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( T[2] , Td , ctrbit[0] );
 	InvCompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( T[3] , Td , ctrbit[0] );
 	InvCompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module FetchTr1_0_1 ( qbit* I , qbit* T , qbit Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[0] , ctrbit[1] );
 	InvCompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[1] , ctrbit[1] );
 	InvCompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[2] , ctrbit[1] );
 	InvCompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[3] , ctrbit[1] );
 	InvCompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[4] , ctrbit[1] );
 	InvCompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[5] , ctrbit[1] );
 	InvCompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[6] , ctrbit[1] );
 	InvCompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[7] , ctrbit[1] );
 	InvCompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module FetchTr1_3_1 ( qbit* I , qbit* T , qbit Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_3_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[0] , ctrbit[1] );
 	InvCompareIJ_3_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[1] , ctrbit[1] );
 	InvCompareIJ_3_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[2] , ctrbit[1] );
 	InvCompareIJ_3_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[3] , ctrbit[1] );
 	InvCompareIJ_3_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[4] , ctrbit[1] );
 	InvCompareIJ_3_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[5] , ctrbit[1] );
 	InvCompareIJ_3_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[6] , ctrbit[1] );
 	InvCompareIJ_3_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_3_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[7] , ctrbit[1] );
 	InvCompareIJ_3_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module FetchTr1_6_1 ( qbit* I , qbit* T , qbit Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_6_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[0] , ctrbit[1] );
 	InvCompareIJ_6_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[1] , ctrbit[1] );
 	InvCompareIJ_6_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[2] , ctrbit[1] );
 	InvCompareIJ_6_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[3] , ctrbit[1] );
 	InvCompareIJ_6_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[4] , ctrbit[1] );
 	InvCompareIJ_6_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[5] , ctrbit[1] );
 	InvCompareIJ_6_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[6] , ctrbit[1] );
 	InvCompareIJ_6_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_6_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( Td , T[7] , ctrbit[1] );
 	InvCompareIJ_6_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module ctrCTRdecr_3 ( qbit* cTri , qbit ctrQ , qbit* ctrbit2 ) {
 	X ( cTri[0] );
 	X ( cTri[1] );
 	CNOT ( ctrbit2[0] , ctrQ );
 	ToffoliImpl ( ctrbit2[1] , ctrbit2[0] , cTri[0] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , cTri[1] );
 	CNOT ( cTri[2] , ctrbit2[2] );
 	X ( cTri[1] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , cTri[1] );
 	CNOT ( cTri[1] , ctrbit2[1] );
 	X ( cTri[0] );
 	ToffoliImpl ( ctrbit2[1] , ctrbit2[0] , cTri[0] );
 	X ( cTri[0] );
 	CNOT ( cTri[0] , ctrbit2[0] );
 	CNOT ( ctrbit2[0] , ctrQ );
 }

module StoreTrbarr ( qbit* I , qbit* T , qbit* Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[0] , Td[0] , ctrbit[0] );
 	ToffoliImpl ( T[1] , Td[1] , ctrbit[0] );
 	ToffoliImpl ( T[2] , Td[2] , ctrbit[0] );
 	InvCompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[3] , Td[0] , ctrbit[0] );
 	ToffoliImpl ( T[4] , Td[1] , ctrbit[0] );
 	ToffoliImpl ( T[5] , Td[2] , ctrbit[0] );
 	InvCompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[6] , Td[0] , ctrbit[0] );
 	ToffoliImpl ( T[7] , Td[1] , ctrbit[0] );
 	ToffoliImpl ( T[8] , Td[2] , ctrbit[0] );
 	InvCompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[9] , Td[0] , ctrbit[0] );
 	ToffoliImpl ( T[10] , Td[1] , ctrbit[0] );
 	ToffoliImpl ( T[11] , Td[2] , ctrbit[0] );
 	InvCompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module Swap ( qbit q1 , qbit q2 ) {
 	CNOT ( q2 , q1 );
 	CNOT ( q1 , q2 );
 	CNOT ( q2 , q1 );
 }

module GCQWalkStep ( qbit* T , qbit* E , qbit* w , qbit* Td , qbit* Ed , qbit* taud , qbit Ewd , qbit* Edd , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit , qbit* tau , qbit* sigma , qbit* iota , qbit* Ew , qbit* cTri ) {
 	DIFFUSEGC ( iota , sigma , ctrbit2 , ctrbit );
 	FetchTrbarr ( iota , tau , taud , idxIJ , ctrbit2 , ctrbit );
 	FetchT_0 ( taud , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchStoreT_1 ( iota , Ew , Ewd , idxIJ , ctrbit2 , ctrbit );
 	FetchE_0 ( taud , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_0_1 ( tau , Ed , Edd[0] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_3_1 ( tau , Ed , Edd[1] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_6_1 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_9_1 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[0] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[0] );
 	ctrCTRdecr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[0] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[0] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[1] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[1] );
 	ctrCTRdecr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[1] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[1] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[2] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ctrCTRdecr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[2] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[3] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ctrCTRdecr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[3] );
 	EdgeORACLE_0_0 ( Td , w , Ewd );
 	FetchTr1_0_1 ( tau , Ed , Edd[0] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_3_1 ( tau , Ed , Edd[1] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_6_1 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_9_1 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	FetchE_0 ( taud , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchT_0 ( taud , T , Td , idxIJ , ctrbit2 , ctrbit );
 	StoreTrbarr ( iota , tau , taud , idxIJ , ctrbit2 , ctrbit );
 	Swap ( taud[0] , sigma[0] );
 	Swap ( taud[1] , sigma[1] );
 	Swap ( taud[2] , sigma[2] );
 	StoreTrbarr ( iota , tau , taud , idxIJ , ctrbit2 , ctrbit );
 	FetchT_0 ( taud , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchE_0 ( taud , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_0_1 ( tau , Ed , Edd[0] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_3_1 ( tau , Ed , Edd[1] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_6_1 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_9_1 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	EdgeORACLE_0_0 ( Td , w , Ewd );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[0] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[0] );
 	ctrCTRdecr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[0] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[0] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[1] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[1] );
 	ctrCTRdecr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[1] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[1] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[2] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ctrCTRdecr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[2] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[3] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ctrCTRdecr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ToffoliImpl ( ctrbit[0] , Ewd , Ew[3] );
 	FetchTr1_0_1 ( tau , Ed , Edd[0] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_3_1 ( tau , Ed , Edd[1] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_6_1 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_9_1 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	FetchE_0 ( taud , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchStoreT_1 ( iota , Ew , Ewd , idxIJ , ctrbit2 , ctrbit );
 	FetchT_0 ( taud , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchTrbarr ( iota , tau , taud , idxIJ , ctrbit2 , ctrbit );
 }

module GCQWalk ( qbit* T , qbit* E , qbit* w , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit , qbit* tau , qbit* sigma , qbit* iota , qbit* Ew , qbit* cTri , qbit triTestT ) {
 	qbit Td[5];
	qbit Ed[8];
	qbit taud[3];
	qbit Ewd[1];
	qbit Edd[4];
	qbit tmpphase[1];
	PrepZ ( tmpphase[0] , 0 );
 	X ( tmpphase[0] );
 	H ( tmpphase[0] );
 	H ( tau[0] );
 	H ( tau[1] );
 	H ( tau[2] );
 	H ( tau[3] );
 	H ( tau[4] );
 	H ( tau[5] );
 	H ( tau[6] );
 	H ( tau[7] );
 	H ( tau[8] );
 	H ( tau[9] );
 	H ( tau[10] );
 	H ( tau[11] );
 	H ( iota[0] );
 	H ( iota[1] );
 	H ( sigma[0] );
 	H ( sigma[1] );
 	H ( sigma[2] );
 	PrepZ ( Td[0] , 0 );
 	PrepZ ( Td[1] , 0 );
 	PrepZ ( Td[2] , 0 );
 	PrepZ ( Td[3] , 0 );
 	PrepZ ( Td[4] , 0 );
 	PrepZ ( Ed[0] , 0 );
 	PrepZ ( Ed[1] , 0 );
 	PrepZ ( Ed[2] , 0 );
 	PrepZ ( Ed[3] , 0 );
 	PrepZ ( Ed[4] , 0 );
 	PrepZ ( Ed[5] , 0 );
 	PrepZ ( Ed[6] , 0 );
 	PrepZ ( Ed[7] , 0 );
 	PrepZ ( Ew[0] , 0 );
 	PrepZ ( Ew[1] , 0 );
 	PrepZ ( Ew[2] , 0 );
 	PrepZ ( Ew[3] , 0 );
 	PrepZ ( cTri[0] , 0 );
 	PrepZ ( cTri[1] , 0 );
 	PrepZ ( cTri[2] , 0 );
 	PrepZ ( taud[0] , 0 );
 	PrepZ ( taud[0] , 0 );
 	PrepZ ( taud[0] , 0 );
 	PrepZ ( Ewd[0] , 0 );
 	PrepZ ( Edd[0] , 0 );
 	PrepZ ( Edd[1] , 0 );
 	PrepZ ( Edd[2] , 0 );
 	PrepZ ( Edd[3] , 0 );
 	FetchT_0 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	EdgeORACLE_0_0 ( Td , w , Ew[0] );
 	FetchT_0 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchT_3 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	EdgeORACLE_0_0 ( Td , w , Ew[1] );
 	FetchT_3 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchT_6 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	EdgeORACLE_0_0 ( Td , w , Ew[2] );
 	FetchT_6 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchT_9 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	EdgeORACLE_0_0 ( Td , w , Ew[3] );
 	FetchT_9 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchE_0 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_3 ( tau , Ed , Edd[1] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[1] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[1] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[1] );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[1] );
 	FetchTr1_1_3 ( tau , Ed , Edd[1] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_6 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[2] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[2] );
 	FetchTr1_1_6 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_9 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[3] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[3] );
 	FetchTr1_1_9 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	FetchE_0 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchE_3 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_6 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[1] , Ew[2] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ToffoliImpl ( ctrbit[0] , Ew[1] , Ew[2] );
 	FetchTr1_1_6 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_9 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[1] , Ew[3] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ToffoliImpl ( ctrbit[0] , Ew[1] , Ew[3] );
 	FetchTr1_1_9 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	FetchE_3 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchE_6 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_9_1 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[2] , Ew[3] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ToffoliImpl ( ctrbit[0] , Ew[2] , Ew[3] );
 	FetchTr1_9_1 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	FetchE_6 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchE_9 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchE_9 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	RegTest_3_0 ( cTri , ctrbit );
 	X ( ctrbit[1] );
 	X ( triTestT );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	CNOT ( tmpphase[0] , ctrbit[2] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	X ( triTestT );
 	X ( ctrbit[1] );
 	InvRegTest_3_0 ( cTri , ctrbit );
 	H ( tmpphase[0] );
 	X ( tmpphase[0] );
 	GCQWalkStep ( T , E , w , Td , Ed , taud , Ewd[0] , Edd , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri );
 	GCQWalkStep ( T , E , w , Td , Ed , taud , Ewd[0] , Edd , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri );
 	RegTest_3_0 ( cTri , ctrbit );
 	X ( ctrbit[1] );
 	X ( triTestT );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	CNOT ( tmpphase[0] , ctrbit[2] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	X ( triTestT );
 	X ( ctrbit[1] );
 	InvRegTest_3_0 ( cTri , ctrbit );
 	H ( tmpphase[0] );
 	X ( tmpphase[0] );
 	GCQWalkStep ( T , E , w , Td , Ed , taud , Ewd[0] , Edd , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri );
 	GCQWalkStep ( T , E , w , Td , Ed , taud , Ewd[0] , Edd , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri );
 }

module InvGCQWalk ( qbit* T , qbit* E , qbit* w , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit , qbit* tau , qbit* sigma , qbit* iota , qbit* Ew , qbit* cTri , qbit triTestT ) {
 	qbit Td[5];
	qbit Ed[8];
	qbit taud[3];
	qbit Ewd[1];
	qbit Edd[4];
	qbit tmpphase[1];
	PrepZ ( tmpphase[0] , 0 );
 	X ( tmpphase[0] );
 	H ( tmpphase[0] );
 	H ( tau[0] );
 	H ( tau[1] );
 	H ( tau[2] );
 	H ( tau[3] );
 	H ( tau[4] );
 	H ( tau[5] );
 	H ( tau[6] );
 	H ( tau[7] );
 	H ( tau[8] );
 	H ( tau[9] );
 	H ( tau[10] );
 	H ( tau[11] );
 	H ( iota[0] );
 	H ( iota[1] );
 	H ( sigma[0] );
 	H ( sigma[1] );
 	H ( sigma[2] );
 	PrepZ ( Td[0] , 0 );
 	PrepZ ( Td[1] , 0 );
 	PrepZ ( Td[2] , 0 );
 	PrepZ ( Td[3] , 0 );
 	PrepZ ( Td[4] , 0 );
 	PrepZ ( Ed[0] , 0 );
 	PrepZ ( Ed[1] , 0 );
 	PrepZ ( Ed[2] , 0 );
 	PrepZ ( Ed[3] , 0 );
 	PrepZ ( Ed[4] , 0 );
 	PrepZ ( Ed[5] , 0 );
 	PrepZ ( Ed[6] , 0 );
 	PrepZ ( Ed[7] , 0 );
 	PrepZ ( Ew[0] , 0 );
 	PrepZ ( Ew[1] , 0 );
 	PrepZ ( Ew[2] , 0 );
 	PrepZ ( Ew[3] , 0 );
 	PrepZ ( cTri[0] , 0 );
 	PrepZ ( cTri[1] , 0 );
 	PrepZ ( cTri[2] , 0 );
 	PrepZ ( taud[0] , 0 );
 	PrepZ ( taud[0] , 0 );
 	PrepZ ( taud[0] , 0 );
 	PrepZ ( Ewd[0] , 0 );
 	PrepZ ( Edd[0] , 0 );
 	PrepZ ( Edd[1] , 0 );
 	PrepZ ( Edd[2] , 0 );
 	PrepZ ( Edd[3] , 0 );
 	GCQWalkStep ( T , E , w , Td , Ed , taud , Ewd[0] , Edd , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri );
 	GCQWalkStep ( T , E , w , Td , Ed , taud , Ewd[0] , Edd , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri );
 	X ( tmpphase[0] );
 	H ( tmpphase[0] );
 	InvRegTest_3_0 ( cTri , ctrbit );
 	X ( ctrbit[1] );
 	X ( triTestT );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	CNOT ( tmpphase[0] , ctrbit[2] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	X ( triTestT );
 	X ( ctrbit[1] );
 	RegTest_3_0 ( cTri , ctrbit );
 	GCQWalkStep ( T , E , w , Td , Ed , taud , Ewd[0] , Edd , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri );
 	GCQWalkStep ( T , E , w , Td , Ed , taud , Ewd[0] , Edd , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri );
 	X ( tmpphase[0] );
 	H ( tmpphase[0] );
 	InvRegTest_3_0 ( cTri , ctrbit );
 	X ( ctrbit[1] );
 	X ( triTestT );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	CNOT ( tmpphase[0] , ctrbit[2] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	X ( triTestT );
 	X ( ctrbit[1] );
 	RegTest_3_0 ( cTri , ctrbit );
 	FetchE_9 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchE_9 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchE_6 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_9_1 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[2] , Ew[3] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ToffoliImpl ( ctrbit[0] , Ew[2] , Ew[3] );
 	FetchTr1_9_1 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	FetchE_6 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchE_3 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_9 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[1] , Ew[3] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ToffoliImpl ( ctrbit[0] , Ew[1] , Ew[3] );
 	FetchTr1_1_9 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_6 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[1] , Ew[2] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ToffoliImpl ( ctrbit[0] , Ew[1] , Ew[2] );
 	FetchTr1_1_6 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	FetchE_3 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchE_0 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_9 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[3] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[3] );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[3] );
 	FetchTr1_1_9 ( tau , Ed , Edd[3] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_6 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[2] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[2] );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[2] );
 	FetchTr1_1_6 ( tau , Ed , Edd[2] , idxIJ , ctrbit2 , ctrbit );
 	FetchTr1_1_3 ( tau , Ed , Edd[1] , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[1] );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[1] );
 	ctrCTRincr_3 ( cTri , ctrbit[1] , ctrbit2 );
 	ToffoliImpl ( ctrbit[1] , ctrbit[0] , Edd[1] );
 	ToffoliImpl ( ctrbit[0] , Ew[0] , Ew[1] );
 	FetchTr1_1_3 ( tau , Ed , Edd[1] , idxIJ , ctrbit2 , ctrbit );
 	FetchE_0 ( tau , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchT_9 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	EdgeORACLE_0_0 ( Td , w , Ew[3] );
 	FetchT_9 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchT_6 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	EdgeORACLE_0_0 ( Td , w , Ew[2] );
 	FetchT_6 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchT_3 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	EdgeORACLE_0_0 ( Td , w , Ew[1] );
 	FetchT_3 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchT_0 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 	EdgeORACLE_0_0 ( Td , w , Ew[0] );
 	FetchT_0 ( tau , T , Td , idxIJ , ctrbit2 , ctrbit );
 }

module ZeroNodeTest ( qbit* w , qbit* dum ) {
 	X ( w[0] );
 	X ( w[1] );
 	X ( w[2] );
 	X ( w[3] );
 	X ( w[4] );
 	ToffoliImpl ( dum[0] , w[1] , w[0] );
 	ToffoliImpl ( dum[1] , dum[0] , w[2] );
 	ToffoliImpl ( dum[2] , dum[1] , w[3] );
 	ToffoliImpl ( dum[3] , dum[2] , w[4] );
 }

module InvZeroNodeTest ( qbit* w , qbit* dum ) {
 	ToffoliImpl ( dum[3] , dum[2] , w[4] );
 	ToffoliImpl ( dum[2] , dum[1] , w[3] );
 	ToffoliImpl ( dum[1] , dum[0] , w[2] );
 	ToffoliImpl ( dum[0] , w[1] , w[0] );
 	X ( w[0] );
 	X ( w[1] );
 	X ( w[2] );
 	X ( w[3] );
 	X ( w[4] );
 }

module DIFFUSENode ( qbit* w , qbit* ctrbit ) {
 	qbit tmpphase[1];
	PrepZ ( tmpphase[0] , 0 );
 	X ( tmpphase[0] );
 	H ( tmpphase[0] );
 	H ( w[0] );
 	H ( w[1] );
 	H ( w[2] );
 	H ( w[3] );
 	H ( w[4] );
 	X ( tmpphase[0] );
 	ZeroNodeTest ( w , ctrbit );
 	CNOT ( tmpphase[0] , ctrbit[3] );
 	InvZeroNodeTest ( w , ctrbit );
 	H ( tmpphase[0] );
 	X ( tmpphase[0] );
 	H ( w[0] );
 	H ( w[1] );
 	H ( w[2] );
 	H ( w[3] );
 	H ( w[4] );
 }

module TriangleEdgeSearch ( qbit* T , qbit* E , qbit* w , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit , qbit* tau , qbit* sigma , qbit* iota , qbit* Ew , qbit* cTri , qbit triTestT ) {
 	qbit tmpphase[1];
	PrepZ ( tmpphase[0] , 0 );
 	X ( tmpphase[0] );
 	H ( tmpphase[0] );
 	H ( w[0] );
 	H ( w[1] );
 	H ( w[2] );
 	H ( w[3] );
 	H ( w[4] );
 	GCQWalk ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	RegTest_3_0 ( cTri , ctrbit );
 	X ( ctrbit[1] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	CNOT ( tmpphase[0] , ctrbit[2] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	X ( ctrbit[1] );
 	InvRegTest_3_0 ( cTri , ctrbit );
 	InvGCQWalk ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	DIFFUSENode ( w , ctrbit );
 	GCQWalk ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	RegTest_3_0 ( cTri , ctrbit );
 	X ( ctrbit[1] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	CNOT ( tmpphase[0] , ctrbit[2] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	X ( ctrbit[1] );
 	InvRegTest_3_0 ( cTri , ctrbit );
 	InvGCQWalk ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	DIFFUSENode ( w , ctrbit );
 	GCQWalk ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	RegTest_3_0 ( cTri , ctrbit );
 	X ( ctrbit[1] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	CNOT ( tmpphase[0] , ctrbit[2] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	X ( ctrbit[1] );
 	InvRegTest_3_0 ( cTri , ctrbit );
 	InvGCQWalk ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	DIFFUSENode ( w , ctrbit );
 	GCQWalk ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	RegTest_3_0 ( cTri , ctrbit );
 	X ( ctrbit[1] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	CNOT ( tmpphase[0] , ctrbit[2] );
 	ToffoliImpl ( ctrbit[2] , ctrbit[1] , triTestT );
 	X ( ctrbit[1] );
 	InvRegTest_3_0 ( cTri , ctrbit );
 	InvGCQWalk ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	DIFFUSENode ( w , ctrbit );
 	H ( tmpphase[0] );
 	X ( tmpphase[0] );
 }

module EdgeORACLE_5_0 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_5_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 }

module EdgeORACLE_10_0 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_10_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 }

module EdgeORACLE_15_0 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_15_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 }

module EdgeORACLE_20_0 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_20_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_20_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 }

module EdgeORACLE_25_0 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_25_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_25_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 }

module EdgeORACLE_30_0 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_30_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_30_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 }

module EdgeORACLE_35_0 ( qbit* u , qbit* v , qbit edge ) {
 	qbit uint[11];
	qbit vint[11];
	qbit u17[11];
	qbit v17[11];
	qbit u3[2];
	qbit v3[2];
	qbit t[1];
	qbit uF[1];
	qbit vF[1];
	qbit uH[1];
	qbit vH[1];
	qbit diffuvH[1];
	qbit uv3[1];
	qbit uvF[1];
	qbit diffuvF[1];
	qbit equalbit[2];
	qbit flg[1];
	qbit ctrcentr[5];
	PrepZ ( edge , 0 );
 	PrepZ ( t[0] , 0 );
 	PrepZ ( uF[0] , 0 );
 	PrepZ ( vF[0] , 0 );
 	PrepZ ( uH[0] , 0 );
 	PrepZ ( vH[0] , 0 );
 	PrepZ ( diffuvH[0] , 0 );
 	PrepZ ( uv3[0] , 0 );
 	PrepZ ( uvF[0] , 0 );
 	PrepZ ( diffuvF[0] , 0 );
 	PrepZ ( flg[0] , 0 );
 	PrepZ ( equalbit[0] , 0 );
 	PrepZ ( equalbit[1] , 0 );
 	PrepZ ( ctrcentr[0] , 0 );
 	PrepZ ( ctrcentr[1] , 0 );
 	PrepZ ( ctrcentr[2] , 0 );
 	PrepZ ( ctrcentr[3] , 0 );
 	PrepZ ( ctrcentr[4] , 0 );
 	ConvertNode_35_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 	TestEqual ( uint , vint , t[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	X ( equalbit[1] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( ctrcentr[0] );
 	ToffoliImpl ( edge , ctrcentr[0] , uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	ToffoliImpl ( edge , ctrcentr[1] , equalbit[0] );
 	X ( uvF[0] );
 	X ( diffuvF[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	CNOT ( edge , ctrcentr[4] );
 	ToffoliImpl ( ctrcentr[4] , ctrcentr[0] , ctrcentr[3] );
 	ToffoliImpl ( ctrcentr[3] , equalbit[1] , diffuvH[0] );
 	ToffoliImpl ( ctrcentr[2] , uvF[0] , diffuvF[0] );
 	X ( diffuvF[0] );
 	X ( uvF[0] );
 	ToffoliImpl ( ctrcentr[1] , ctrcentr[0] , diffuvF[0] );
 	X ( ctrcentr[0] );
 	CNOT ( ctrcentr[0] , t[0] );
 	X ( equalbit[1] );
 	CNOT ( equalbit[1] , equalbit[0] );
 	CNOT ( diffuvH[0] , vH[0] );
 	CNOT ( diffuvH[0] , uH[0] );
 	equalquInt2 ( u3 , v3 , equalbit[0] );
 	CNOT ( diffuvF[0] , uF[0] );
 	CNOT ( diffuvF[0] , vF[0] );
 	ToffoliImpl ( uvF[0] , uF[0] , vF[0] );
 	MOD3 ( u17 , u3 );
 	MOD3 ( v17 , v3 );
 	CNOT ( uH[0] , u17[10] );
 	CNOT ( vH[0] , v17[10] );
 	TestEqual ( uint , u17 , uF[0] );
 	TestEqual ( vint , v17 , vF[0] );
 	X ( flg[0] );
 	Pow17 ( uint , u17 , flg[0] );
 	Pow17 ( vint , v17 , flg[0] );
 	X ( flg[0] );
 	ConvertNode_35_16 ( u , uint );
 	ConvertNode_0_16 ( v , vint );
 }

module TriangleTestTw ( qbit* T , qbit* E , qbit* w , qbit test ) {
 	qbit Ed[8];
	qbit dum[1];
	qbit triCnt[9];
	qbit lctrbit[9];
	PrepZ ( test , 0 );
 	EdgeORACLE_0_0 ( T , w , Ed[0] );
 	EdgeORACLE_5_0 ( T , w , Ed[1] );
 	EdgeORACLE_10_0 ( T , w , Ed[2] );
 	EdgeORACLE_15_0 ( T , w , Ed[3] );
 	EdgeORACLE_20_0 ( T , w , Ed[4] );
 	EdgeORACLE_25_0 ( T , w , Ed[5] );
 	EdgeORACLE_30_0 ( T , w , Ed[6] );
 	EdgeORACLE_35_0 ( T , w , Ed[7] );
 	ctrEvaluate16 ( dum[0] , E[1] , E[0] , E[1] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[1] , E[0] , E[1] );
 	ctrEvaluate16 ( dum[0] , E[3] , E[0] , E[2] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[3] , E[0] , E[2] );
 	ctrEvaluate16 ( dum[0] , E[6] , E[0] , E[3] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[6] , E[0] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[10] , E[0] , E[4] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[10] , E[0] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[15] , E[0] , E[5] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[15] , E[0] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[21] , E[0] , E[6] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[21] , E[0] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[28] , E[0] , E[7] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[28] , E[0] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[4] , E[1] , E[2] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[4] , E[1] , E[2] );
 	ctrEvaluate16 ( dum[0] , E[7] , E[1] , E[3] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[7] , E[1] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[11] , E[1] , E[4] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[11] , E[1] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[16] , E[1] , E[5] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[16] , E[1] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[22] , E[1] , E[6] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[22] , E[1] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[29] , E[1] , E[7] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[29] , E[1] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[8] , E[2] , E[3] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[8] , E[2] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[12] , E[2] , E[4] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[12] , E[2] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[17] , E[2] , E[5] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[17] , E[2] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[23] , E[2] , E[6] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[23] , E[2] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[30] , E[2] , E[7] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[30] , E[2] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[13] , E[3] , E[4] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[13] , E[3] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[18] , E[3] , E[5] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[18] , E[3] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[24] , E[3] , E[6] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[24] , E[3] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[31] , E[3] , E[7] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[31] , E[3] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[4] , E[5] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[4] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[4] , E[6] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[4] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[32] , E[4] , E[7] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[32] , E[4] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[5] , E[6] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[5] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[33] , E[5] , E[7] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[33] , E[5] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[34] , E[6] , E[7] );
 	ctrCTRincr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[34] , E[6] , E[7] );
 	RegTest_9_0 ( triCnt , lctrbit );
 	CNOT ( test , lctrbit[7] );
 	X ( test );
 	InvRegTest_9_0 ( triCnt , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[1] , E[0] , E[1] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[1] , E[0] , E[1] );
 	ctrEvaluate16 ( dum[0] , E[3] , E[0] , E[2] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[3] , E[0] , E[2] );
 	ctrEvaluate16 ( dum[0] , E[6] , E[0] , E[3] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[6] , E[0] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[10] , E[0] , E[4] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[10] , E[0] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[15] , E[0] , E[5] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[15] , E[0] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[21] , E[0] , E[6] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[21] , E[0] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[28] , E[0] , E[7] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[28] , E[0] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[4] , E[1] , E[2] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[4] , E[1] , E[2] );
 	ctrEvaluate16 ( dum[0] , E[7] , E[1] , E[3] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[7] , E[1] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[11] , E[1] , E[4] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[11] , E[1] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[16] , E[1] , E[5] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[16] , E[1] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[22] , E[1] , E[6] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[22] , E[1] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[29] , E[1] , E[7] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[29] , E[1] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[8] , E[2] , E[3] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[8] , E[2] , E[3] );
 	ctrEvaluate16 ( dum[0] , E[12] , E[2] , E[4] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[12] , E[2] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[17] , E[2] , E[5] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[17] , E[2] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[23] , E[2] , E[6] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[23] , E[2] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[30] , E[2] , E[7] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[30] , E[2] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[13] , E[3] , E[4] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[13] , E[3] , E[4] );
 	ctrEvaluate16 ( dum[0] , E[18] , E[3] , E[5] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[18] , E[3] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[24] , E[3] , E[6] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[24] , E[3] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[31] , E[3] , E[7] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[31] , E[3] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[19] , E[4] , E[5] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[19] , E[4] , E[5] );
 	ctrEvaluate16 ( dum[0] , E[25] , E[4] , E[6] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[25] , E[4] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[32] , E[4] , E[7] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[32] , E[4] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[26] , E[5] , E[6] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[26] , E[5] , E[6] );
 	ctrEvaluate16 ( dum[0] , E[33] , E[5] , E[7] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[33] , E[5] , E[7] );
 	ctrEvaluate16 ( dum[0] , E[34] , E[6] , E[7] );
 	ctrCTRdecr_9 ( triCnt , dum[0] , lctrbit );
 	ctrEvaluate16 ( dum[0] , E[34] , E[6] , E[7] );
 	EdgeORACLE_0_0 ( T , w , Ed[0] );
 	EdgeORACLE_5_0 ( T , w , Ed[1] );
 	EdgeORACLE_10_0 ( T , w , Ed[2] );
 	EdgeORACLE_15_0 ( T , w , Ed[3] );
 	EdgeORACLE_20_0 ( T , w , Ed[4] );
 	EdgeORACLE_25_0 ( T , w , Ed[5] );
 	EdgeORACLE_30_0 ( T , w , Ed[6] );
 	EdgeORACLE_35_0 ( T , w , Ed[7] );
 }

module TestTriangleEdges ( qbit* T , qbit* E , qbit* w , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit , qbit* tau , qbit* sigma , qbit* iota , qbit* Ew , qbit* cTri , qbit triTestT , qbit triTestTw ) {
 	TriangleTestT ( E , triTestT );
 	TriangleEdgeSearch ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	TriangleTestTw ( T , E , w , triTestTw );
 }

module EvaluateOR ( qbit target , qbit ctr2 , qbit ctr1 ) {
 	X ( ctr1 );
 	X ( ctr2 );
 	ToffoliImpl ( target , ctr2 , ctr1 );
 	X ( target );
 }

module InvTestTriangleEdges ( qbit* T , qbit* E , qbit* w , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit , qbit* tau , qbit* sigma , qbit* iota , qbit* Ew , qbit* cTri , qbit triTestT , qbit triTestTw ) {
 	TriangleTestTw ( T , E , w , triTestTw );
 	TriangleEdgeSearch ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT );
 	TriangleTestT ( E , triTestT );
 }

module DIFFUSEVI ( qbit* alpha , qbit* beta , qbit* ctrbit2 , qbit* ctrbit ) {
 	qbit tmpphase[1];
	PrepZ ( tmpphase[0] , 0 );
 	X ( tmpphase[0] );
 	H ( tmpphase[0] );
 	H ( alpha[0] );
 	H ( alpha[1] );
 	H ( alpha[2] );
 	H ( alpha[3] );
 	H ( alpha[4] );
 	H ( beta[0] );
 	H ( beta[1] );
 	H ( beta[2] );
 	X ( tmpphase[0] );
 	ZeroNodeTest ( alpha , ctrbit );
 	RegTest_3_0 ( beta , ctrbit2 );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , ctrbit[3] );
 	CNOT ( tmpphase[0] , ctrbit2[2] );
 	ToffoliImpl ( ctrbit2[2] , ctrbit2[1] , ctrbit[3] );
 	InvRegTest_3_0 ( beta , ctrbit2 );
 	InvZeroNodeTest ( alpha , ctrbit );
 	H ( tmpphase[0] );
 	X ( tmpphase[0] );
 	H ( alpha[0] );
 	H ( alpha[1] );
 	H ( alpha[2] );
 	H ( alpha[3] );
 	H ( alpha[4] );
 	H ( beta[0] );
 	H ( beta[1] );
 	H ( beta[2] );
 }

module FetchStoreE ( qbit* I , qbit* E , qbit* Ed , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( E[0] , Ed[1] , ctrbit[1] );
 	ctrSwap ( E[1] , Ed[2] , ctrbit[1] );
 	ctrSwap ( E[3] , Ed[3] , ctrbit[1] );
 	ctrSwap ( E[6] , Ed[4] , ctrbit[1] );
 	ctrSwap ( E[10] , Ed[5] , ctrbit[1] );
 	ctrSwap ( E[15] , Ed[6] , ctrbit[1] );
 	ctrSwap ( E[21] , Ed[7] , ctrbit[1] );
 	InvCompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( E[0] , Ed[0] , ctrbit[1] );
 	ctrSwap ( E[2] , Ed[2] , ctrbit[1] );
 	ctrSwap ( E[4] , Ed[3] , ctrbit[1] );
 	ctrSwap ( E[7] , Ed[4] , ctrbit[1] );
 	ctrSwap ( E[11] , Ed[5] , ctrbit[1] );
 	ctrSwap ( E[16] , Ed[6] , ctrbit[1] );
 	ctrSwap ( E[22] , Ed[7] , ctrbit[1] );
 	InvCompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( E[1] , Ed[0] , ctrbit[1] );
 	ctrSwap ( E[2] , Ed[1] , ctrbit[1] );
 	ctrSwap ( E[5] , Ed[3] , ctrbit[1] );
 	ctrSwap ( E[8] , Ed[4] , ctrbit[1] );
 	ctrSwap ( E[12] , Ed[5] , ctrbit[1] );
 	ctrSwap ( E[17] , Ed[6] , ctrbit[1] );
 	ctrSwap ( E[23] , Ed[7] , ctrbit[1] );
 	InvCompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( E[3] , Ed[0] , ctrbit[1] );
 	ctrSwap ( E[4] , Ed[1] , ctrbit[1] );
 	ctrSwap ( E[5] , Ed[2] , ctrbit[1] );
 	ctrSwap ( E[9] , Ed[4] , ctrbit[1] );
 	ctrSwap ( E[13] , Ed[5] , ctrbit[1] );
 	ctrSwap ( E[18] , Ed[6] , ctrbit[1] );
 	ctrSwap ( E[24] , Ed[7] , ctrbit[1] );
 	InvCompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( E[6] , Ed[0] , ctrbit[1] );
 	ctrSwap ( E[7] , Ed[1] , ctrbit[1] );
 	ctrSwap ( E[8] , Ed[2] , ctrbit[1] );
 	ctrSwap ( E[9] , Ed[3] , ctrbit[1] );
 	ctrSwap ( E[14] , Ed[5] , ctrbit[1] );
 	ctrSwap ( E[19] , Ed[6] , ctrbit[1] );
 	ctrSwap ( E[25] , Ed[7] , ctrbit[1] );
 	InvCompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( E[10] , Ed[0] , ctrbit[1] );
 	ctrSwap ( E[11] , Ed[1] , ctrbit[1] );
 	ctrSwap ( E[12] , Ed[2] , ctrbit[1] );
 	ctrSwap ( E[13] , Ed[3] , ctrbit[1] );
 	ctrSwap ( E[14] , Ed[4] , ctrbit[1] );
 	ctrSwap ( E[20] , Ed[6] , ctrbit[1] );
 	ctrSwap ( E[26] , Ed[7] , ctrbit[1] );
 	InvCompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( E[15] , Ed[0] , ctrbit[1] );
 	ctrSwap ( E[16] , Ed[1] , ctrbit[1] );
 	ctrSwap ( E[17] , Ed[2] , ctrbit[1] );
 	ctrSwap ( E[18] , Ed[3] , ctrbit[1] );
 	ctrSwap ( E[19] , Ed[4] , ctrbit[1] );
 	ctrSwap ( E[20] , Ed[5] , ctrbit[1] );
 	ctrSwap ( E[27] , Ed[7] , ctrbit[1] );
 	InvCompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ctrSwap ( E[21] , Ed[0] , ctrbit[1] );
 	ctrSwap ( E[22] , Ed[1] , ctrbit[1] );
 	ctrSwap ( E[23] , Ed[2] , ctrbit[1] );
 	ctrSwap ( E[24] , Ed[3] , ctrbit[1] );
 	ctrSwap ( E[25] , Ed[4] , ctrbit[1] );
 	ctrSwap ( E[26] , Ed[5] , ctrbit[1] );
 	ctrSwap ( E[27] , Ed[6] , ctrbit[1] );
 	InvCompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module UPDATE ( qbit* T , qbit* Td , qbit* Ed ) {
 	EdgeORACLE_0_0 ( T , Td , Ed[0] );
 	EdgeORACLE_5_0 ( T , Td , Ed[1] );
 	EdgeORACLE_10_0 ( T , Td , Ed[2] );
 	EdgeORACLE_15_0 ( T , Td , Ed[3] );
 	EdgeORACLE_20_0 ( T , Td , Ed[4] );
 	EdgeORACLE_25_0 ( T , Td , Ed[5] );
 	EdgeORACLE_30_0 ( T , Td , Ed[6] );
 	EdgeORACLE_35_0 ( T , Td , Ed[7] );
 }

module StoreT ( qbit* I , qbit* T , qbit* Td , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	CompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[0] , Td[0] , ctrbit[1] );
 	ToffoliImpl ( T[1] , Td[1] , ctrbit[1] );
 	ToffoliImpl ( T[2] , Td[2] , ctrbit[1] );
 	ToffoliImpl ( T[3] , Td[3] , ctrbit[1] );
 	ToffoliImpl ( T[4] , Td[4] , ctrbit[1] );
 	InvCompareIJ_0_0_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[5] , Td[0] , ctrbit[1] );
 	ToffoliImpl ( T[6] , Td[1] , ctrbit[1] );
 	ToffoliImpl ( T[7] , Td[2] , ctrbit[1] );
 	ToffoliImpl ( T[8] , Td[3] , ctrbit[1] );
 	ToffoliImpl ( T[9] , Td[4] , ctrbit[1] );
 	InvCompareIJ_0_3_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[10] , Td[0] , ctrbit[1] );
 	ToffoliImpl ( T[11] , Td[1] , ctrbit[1] );
 	ToffoliImpl ( T[12] , Td[2] , ctrbit[1] );
 	ToffoliImpl ( T[13] , Td[3] , ctrbit[1] );
 	ToffoliImpl ( T[14] , Td[4] , ctrbit[1] );
 	InvCompareIJ_0_6_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[15] , Td[0] , ctrbit[1] );
 	ToffoliImpl ( T[16] , Td[1] , ctrbit[1] );
 	ToffoliImpl ( T[17] , Td[2] , ctrbit[1] );
 	ToffoliImpl ( T[18] , Td[3] , ctrbit[1] );
 	ToffoliImpl ( T[19] , Td[4] , ctrbit[1] );
 	InvCompareIJ_0_9_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[20] , Td[0] , ctrbit[1] );
 	ToffoliImpl ( T[21] , Td[1] , ctrbit[1] );
 	ToffoliImpl ( T[22] , Td[2] , ctrbit[1] );
 	ToffoliImpl ( T[23] , Td[3] , ctrbit[1] );
 	ToffoliImpl ( T[24] , Td[4] , ctrbit[1] );
 	InvCompareIJ_0_12_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[25] , Td[0] , ctrbit[1] );
 	ToffoliImpl ( T[26] , Td[1] , ctrbit[1] );
 	ToffoliImpl ( T[27] , Td[2] , ctrbit[1] );
 	ToffoliImpl ( T[28] , Td[3] , ctrbit[1] );
 	ToffoliImpl ( T[29] , Td[4] , ctrbit[1] );
 	InvCompareIJ_0_15_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[30] , Td[0] , ctrbit[1] );
 	ToffoliImpl ( T[31] , Td[1] , ctrbit[1] );
 	ToffoliImpl ( T[32] , Td[2] , ctrbit[1] );
 	ToffoliImpl ( T[33] , Td[3] , ctrbit[1] );
 	ToffoliImpl ( T[34] , Td[4] , ctrbit[1] );
 	InvCompareIJ_0_18_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	CompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 	ToffoliImpl ( T[35] , Td[0] , ctrbit[1] );
 	ToffoliImpl ( T[36] , Td[1] , ctrbit[1] );
 	ToffoliImpl ( T[37] , Td[2] , ctrbit[1] );
 	ToffoliImpl ( T[38] , Td[3] , ctrbit[1] );
 	ToffoliImpl ( T[39] , Td[4] , ctrbit[1] );
 	InvCompareIJ_0_21_3 ( I , idxIJ , ctrbit2 , ctrbit );
 }

module SWAP ( qbit* Td , qbit* v ) {
 	CNOT ( Td[0] , v[0] );
 	CNOT ( v[0] , Td[0] );
 	CNOT ( Td[0] , v[0] );
 	CNOT ( Td[1] , v[1] );
 	CNOT ( v[1] , Td[1] );
 	CNOT ( Td[1] , v[1] );
 	CNOT ( Td[2] , v[2] );
 	CNOT ( v[2] , Td[2] );
 	CNOT ( Td[2] , v[2] );
 	CNOT ( Td[3] , v[3] );
 	CNOT ( v[3] , Td[3] );
 	CNOT ( Td[3] , v[3] );
 }

module QWSH ( qbit* T , qbit* i , qbit* v , qbit* E , qbit* idxIJ , qbit* ctrbit2 , qbit* ctrbit ) {
 	qbit Td[5];
	qbit Ed[8];
	PrepZ ( Td[0] , 0 );
 	PrepZ ( Ed[0] , 0 );
 	PrepZ ( Td[1] , 0 );
 	PrepZ ( Ed[1] , 0 );
 	PrepZ ( Td[2] , 0 );
 	PrepZ ( Ed[2] , 0 );
 	PrepZ ( Td[3] , 0 );
 	PrepZ ( Ed[3] , 0 );
 	PrepZ ( Td[4] , 0 );
 	PrepZ ( Ed[4] , 0 );
 	DIFFUSEVI ( v , i , ctrbit2 , ctrbit );
 	FetchT_0 ( i , T , Td , idxIJ , ctrbit2 , ctrbit );
 	FetchStoreE ( i , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	UPDATE ( T , Td , Ed );
 	StoreT ( i , T , Td , idxIJ , ctrbit2 , ctrbit );
 	SWAP ( Td , v );
 	StoreT ( i , T , Td , idxIJ , ctrbit2 , ctrbit );
 	UPDATE ( T , Td , Ed );
 	FetchStoreE ( i , E , Ed , idxIJ , ctrbit2 , ctrbit );
 	FetchT_0 ( i , T , Td , idxIJ , ctrbit2 , ctrbit );
 }

module main (  ) {
 	cbit testTMeasure[1];
	qbit T[40];
	qbit i[3];
	qbit v[5];
	qbit E[35];
	qbit w[5];
	qbit testTEdge[1];
	qbit test[1];
	qbit TEPhase[1];
	qbit ctrbit[14];
	qbit ctrbit2[14];
	qbit idxIJ[24];
	qbit tau[12];
	qbit sigma[3];
	qbit iota[2];
	qbit Ew[4];
	qbit cTri[3];
	qbit triTestT[1];
	qbit triTestTw[1];
	PrepZ ( test[0] , 0 );
 	PrepZ ( testTEdge[0] , 0 );
 	INITIALIZE ( T[0] );
 	INITIALIZE ( T[1] );
 	INITIALIZE ( T[2] );
 	INITIALIZE ( T[3] );
 	INITIALIZE ( T[4] );
 	INITIALIZE ( T[5] );
 	INITIALIZE ( T[6] );
 	INITIALIZE ( T[7] );
 	INITIALIZE ( T[8] );
 	INITIALIZE ( T[9] );
 	X ( idxIJ[3] );
 	INITIALIZE ( T[10] );
 	INITIALIZE ( T[11] );
 	INITIALIZE ( T[12] );
 	INITIALIZE ( T[13] );
 	INITIALIZE ( T[14] );
 	INITIALIZE ( T[15] );
 	INITIALIZE ( T[16] );
 	INITIALIZE ( T[17] );
 	INITIALIZE ( T[18] );
 	INITIALIZE ( T[19] );
 	X ( idxIJ[9] );
 	INITIALIZE ( T[20] );
 	INITIALIZE ( T[21] );
 	INITIALIZE ( T[22] );
 	INITIALIZE ( T[23] );
 	INITIALIZE ( T[24] );
 	INITIALIZE ( T[25] );
 	INITIALIZE ( T[26] );
 	INITIALIZE ( T[27] );
 	INITIALIZE ( T[28] );
 	INITIALIZE ( T[29] );
 	X ( idxIJ[15] );
 	INITIALIZE ( T[30] );
 	INITIALIZE ( T[31] );
 	INITIALIZE ( T[32] );
 	INITIALIZE ( T[33] );
 	INITIALIZE ( T[34] );
 	INITIALIZE ( T[35] );
 	INITIALIZE ( T[36] );
 	INITIALIZE ( T[37] );
 	INITIALIZE ( T[38] );
 	INITIALIZE ( T[39] );
 	X ( idxIJ[21] );
 	INITIALIZE ( i[0] );
 	INITIALIZE ( i[1] );
 	INITIALIZE ( i[2] );
 	INITIALIZE ( v[0] );
 	INITIALIZE ( v[1] );
 	INITIALIZE ( v[2] );
 	INITIALIZE ( v[3] );
 	INITIALIZE ( v[4] );
 	PrepZ ( w[0] , 0 );
 	PrepZ ( w[1] , 0 );
 	PrepZ ( w[2] , 0 );
 	PrepZ ( w[3] , 0 );
 	PrepZ ( w[4] , 0 );
 	PrepZ ( tau[0] , 0 );
 	PrepZ ( tau[1] , 0 );
 	PrepZ ( tau[2] , 0 );
 	PrepZ ( tau[3] , 0 );
 	PrepZ ( tau[4] , 0 );
 	PrepZ ( tau[5] , 0 );
 	PrepZ ( tau[6] , 0 );
 	PrepZ ( tau[7] , 0 );
 	PrepZ ( tau[8] , 0 );
 	PrepZ ( tau[9] , 0 );
 	PrepZ ( tau[10] , 0 );
 	PrepZ ( tau[11] , 0 );
 	PrepZ ( iota[0] , 0 );
 	PrepZ ( iota[1] , 0 );
 	PrepZ ( sigma[0] , 0 );
 	PrepZ ( sigma[1] , 0 );
 	PrepZ ( sigma[2] , 0 );
 	PrepZ ( Ew[0] , 0 );
 	PrepZ ( Ew[1] , 0 );
 	PrepZ ( Ew[2] , 0 );
 	PrepZ ( Ew[3] , 0 );
 	PrepZ ( cTri[0] , 0 );
 	PrepZ ( cTri[1] , 0 );
 	PrepZ ( cTri[2] , 0 );
 	PrepZ ( triTestT[0] , 0 );
 	PrepZ ( triTestTw[0] , 0 );
 	SETUP ( E , T );
 	X ( TEPhase[0] );
 	H ( TEPhase[0] );
 	TestTriangleEdges ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT[0] , triTestTw[0] );
 	EvaluateOR ( TEPhase[0] , triTestT[0] , triTestTw[0] );
 	X ( triTestT[0] );
 	X ( triTestTw[0] );
 	InvTestTriangleEdges ( T , E , w , idxIJ , ctrbit2 , ctrbit , tau , sigma , iota , Ew , cTri , triTestT[0] , triTestTw[0] );
 	QWSH ( T , i , v , E , idxIJ , ctrbit2 , ctrbit );
 	QWSH ( T , i , v , E , idxIJ , ctrbit2 , ctrbit );
 	EvaluateOR ( testTEdge[0] , triTestT[0] , triTestTw[0] );
 	testTMeasure[0] = MeasX ( testTEdge[0] );
 }

--------End of QASM generation
