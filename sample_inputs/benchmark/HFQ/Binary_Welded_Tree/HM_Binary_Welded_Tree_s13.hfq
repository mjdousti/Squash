#
# Copyright (C) 2015 Mohammad Javad Dousti, Alireza Shafaei, and Massoud Pedram, SPORT lab,
# University of Southern California. All rights reserved.
#
# Please refer to the LICENSE file for terms of use.
#
-------QASM Generation Pass:

module ToffoliImpl ( qbit target , qbit control1 , qbit control2 ) {
 	H ( target );
 	CNOT ( control2 , target );
 	Tdag ( target );
 	CNOT ( control1 , target );
 	T ( target );
 	CNOT ( control2 , target );
 	Tdag ( target );
 	CNOT ( control1 , target );
 	Tdag ( control2 );
 	T ( target );
 	CNOT ( control1 , control2 );
 	H ( target );
 	Tdag ( control2 );
 	CNOT ( control1 , control2 );
 	T ( control1 );
 	S ( control2 );
 }

module PARSENODEROOT ( qbit* a , qbit* root , qbit* even ) {
 	qbit scratch[44];
	PrepZ ( scratch[0] , 0 );
 	PrepZ ( scratch[1] , 0 );
 	PrepZ ( scratch[2] , 0 );
 	PrepZ ( scratch[3] , 0 );
 	PrepZ ( scratch[4] , 0 );
 	PrepZ ( scratch[5] , 0 );
 	PrepZ ( scratch[6] , 0 );
 	PrepZ ( scratch[7] , 0 );
 	PrepZ ( scratch[8] , 0 );
 	PrepZ ( scratch[9] , 0 );
 	PrepZ ( scratch[10] , 0 );
 	PrepZ ( scratch[11] , 0 );
 	PrepZ ( scratch[12] , 0 );
 	PrepZ ( scratch[13] , 0 );
 	PrepZ ( scratch[14] , 0 );
 	PrepZ ( scratch[15] , 0 );
 	PrepZ ( scratch[16] , 0 );
 	PrepZ ( scratch[17] , 0 );
 	PrepZ ( scratch[18] , 0 );
 	PrepZ ( scratch[19] , 0 );
 	PrepZ ( scratch[20] , 0 );
 	PrepZ ( scratch[21] , 0 );
 	PrepZ ( scratch[22] , 0 );
 	PrepZ ( scratch[23] , 0 );
 	PrepZ ( scratch[24] , 0 );
 	PrepZ ( scratch[25] , 0 );
 	PrepZ ( scratch[26] , 0 );
 	PrepZ ( scratch[27] , 0 );
 	PrepZ ( scratch[28] , 0 );
 	PrepZ ( scratch[29] , 0 );
 	PrepZ ( scratch[30] , 0 );
 	PrepZ ( scratch[31] , 0 );
 	PrepZ ( scratch[32] , 0 );
 	PrepZ ( scratch[33] , 0 );
 	PrepZ ( scratch[34] , 0 );
 	PrepZ ( scratch[35] , 0 );
 	PrepZ ( scratch[36] , 0 );
 	PrepZ ( scratch[37] , 0 );
 	PrepZ ( scratch[38] , 0 );
 	PrepZ ( scratch[39] , 0 );
 	PrepZ ( scratch[40] , 0 );
 	PrepZ ( scratch[41] , 0 );
 	PrepZ ( scratch[42] , 0 );
 	PrepZ ( scratch[43] , 0 );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[42] , scratch[43] , a[43] );
 	X ( scratch[43] );
 	CNOT ( scratch[42] , scratch[43] );
 	X ( scratch[42] );
 	ToffoliImpl ( scratch[41] , scratch[42] , a[42] );
 	X ( scratch[42] );
 	CNOT ( scratch[41] , scratch[42] );
 	X ( scratch[41] );
 	ToffoliImpl ( scratch[40] , scratch[41] , a[41] );
 	X ( scratch[41] );
 	CNOT ( scratch[40] , scratch[41] );
 	X ( scratch[40] );
 	ToffoliImpl ( scratch[39] , scratch[40] , a[40] );
 	X ( scratch[40] );
 	CNOT ( scratch[39] , scratch[40] );
 	X ( scratch[39] );
 	ToffoliImpl ( scratch[38] , scratch[39] , a[39] );
 	X ( scratch[39] );
 	CNOT ( scratch[38] , scratch[39] );
 	X ( scratch[38] );
 	ToffoliImpl ( scratch[37] , scratch[38] , a[38] );
 	X ( scratch[38] );
 	CNOT ( scratch[37] , scratch[38] );
 	X ( scratch[37] );
 	ToffoliImpl ( scratch[36] , scratch[37] , a[37] );
 	X ( scratch[37] );
 	CNOT ( scratch[36] , scratch[37] );
 	X ( scratch[36] );
 	ToffoliImpl ( scratch[35] , scratch[36] , a[36] );
 	X ( scratch[36] );
 	CNOT ( scratch[35] , scratch[36] );
 	X ( scratch[35] );
 	ToffoliImpl ( scratch[34] , scratch[35] , a[35] );
 	X ( scratch[35] );
 	CNOT ( scratch[34] , scratch[35] );
 	X ( scratch[34] );
 	ToffoliImpl ( scratch[33] , scratch[34] , a[34] );
 	X ( scratch[34] );
 	CNOT ( scratch[33] , scratch[34] );
 	X ( scratch[33] );
 	ToffoliImpl ( scratch[32] , scratch[33] , a[33] );
 	X ( scratch[33] );
 	CNOT ( scratch[32] , scratch[33] );
 	X ( scratch[32] );
 	ToffoliImpl ( scratch[31] , scratch[32] , a[32] );
 	X ( scratch[32] );
 	CNOT ( scratch[31] , scratch[32] );
 	X ( scratch[31] );
 	ToffoliImpl ( scratch[30] , scratch[31] , a[31] );
 	X ( scratch[31] );
 	CNOT ( scratch[30] , scratch[31] );
 	X ( scratch[30] );
 	ToffoliImpl ( scratch[29] , scratch[30] , a[30] );
 	X ( scratch[30] );
 	CNOT ( scratch[29] , scratch[30] );
 	X ( scratch[29] );
 	ToffoliImpl ( scratch[28] , scratch[29] , a[29] );
 	X ( scratch[29] );
 	CNOT ( scratch[28] , scratch[29] );
 	X ( scratch[28] );
 	ToffoliImpl ( scratch[27] , scratch[28] , a[28] );
 	X ( scratch[28] );
 	CNOT ( scratch[27] , scratch[28] );
 	X ( scratch[27] );
 	ToffoliImpl ( scratch[26] , scratch[27] , a[27] );
 	X ( scratch[27] );
 	CNOT ( scratch[26] , scratch[27] );
 	X ( scratch[26] );
 	ToffoliImpl ( scratch[25] , scratch[26] , a[26] );
 	X ( scratch[26] );
 	CNOT ( scratch[25] , scratch[26] );
 	X ( scratch[25] );
 	ToffoliImpl ( scratch[24] , scratch[25] , a[25] );
 	X ( scratch[25] );
 	CNOT ( scratch[24] , scratch[25] );
 	X ( scratch[24] );
 	ToffoliImpl ( scratch[23] , scratch[24] , a[24] );
 	X ( scratch[24] );
 	CNOT ( scratch[23] , scratch[24] );
 	X ( scratch[23] );
 	ToffoliImpl ( scratch[22] , scratch[23] , a[23] );
 	X ( scratch[23] );
 	CNOT ( scratch[22] , scratch[23] );
 	X ( scratch[22] );
 	ToffoliImpl ( scratch[21] , scratch[22] , a[22] );
 	X ( scratch[22] );
 	CNOT ( scratch[21] , scratch[22] );
 	X ( scratch[21] );
 	ToffoliImpl ( scratch[20] , scratch[21] , a[21] );
 	X ( scratch[21] );
 	CNOT ( scratch[20] , scratch[21] );
 	X ( scratch[20] );
 	ToffoliImpl ( scratch[19] , scratch[20] , a[20] );
 	X ( scratch[20] );
 	CNOT ( scratch[19] , scratch[20] );
 	X ( scratch[19] );
 	ToffoliImpl ( scratch[18] , scratch[19] , a[19] );
 	X ( scratch[19] );
 	CNOT ( scratch[18] , scratch[19] );
 	X ( scratch[18] );
 	ToffoliImpl ( scratch[17] , scratch[18] , a[18] );
 	X ( scratch[18] );
 	CNOT ( scratch[17] , scratch[18] );
 	X ( scratch[17] );
 	ToffoliImpl ( scratch[16] , scratch[17] , a[17] );
 	X ( scratch[17] );
 	CNOT ( scratch[16] , scratch[17] );
 	X ( scratch[16] );
 	ToffoliImpl ( scratch[15] , scratch[16] , a[16] );
 	X ( scratch[16] );
 	CNOT ( scratch[15] , scratch[16] );
 	X ( scratch[15] );
 	ToffoliImpl ( scratch[14] , scratch[15] , a[15] );
 	X ( scratch[15] );
 	CNOT ( scratch[14] , scratch[15] );
 	X ( scratch[14] );
 	ToffoliImpl ( scratch[13] , scratch[14] , a[14] );
 	X ( scratch[14] );
 	CNOT ( scratch[13] , scratch[14] );
 	X ( scratch[13] );
 	ToffoliImpl ( scratch[12] , scratch[13] , a[13] );
 	X ( scratch[13] );
 	CNOT ( scratch[12] , scratch[13] );
 	X ( scratch[12] );
 	ToffoliImpl ( scratch[11] , scratch[12] , a[12] );
 	X ( scratch[12] );
 	CNOT ( scratch[11] , scratch[12] );
 	X ( scratch[11] );
 	ToffoliImpl ( scratch[10] , scratch[11] , a[11] );
 	X ( scratch[11] );
 	CNOT ( scratch[10] , scratch[11] );
 	X ( scratch[10] );
 	ToffoliImpl ( scratch[9] , scratch[10] , a[10] );
 	X ( scratch[10] );
 	CNOT ( scratch[9] , scratch[10] );
 	X ( scratch[9] );
 	ToffoliImpl ( scratch[8] , scratch[9] , a[9] );
 	X ( scratch[9] );
 	CNOT ( scratch[8] , scratch[9] );
 	X ( scratch[8] );
 	ToffoliImpl ( scratch[7] , scratch[8] , a[8] );
 	X ( scratch[8] );
 	CNOT ( scratch[7] , scratch[8] );
 	X ( scratch[7] );
 	ToffoliImpl ( scratch[6] , scratch[7] , a[7] );
 	X ( scratch[7] );
 	CNOT ( scratch[6] , scratch[7] );
 	X ( scratch[6] );
 	ToffoliImpl ( scratch[5] , scratch[6] , a[6] );
 	X ( scratch[6] );
 	CNOT ( scratch[5] , scratch[6] );
 	X ( scratch[5] );
 	ToffoliImpl ( scratch[4] , scratch[5] , a[5] );
 	X ( scratch[5] );
 	CNOT ( scratch[4] , scratch[5] );
 	X ( scratch[4] );
 	ToffoliImpl ( scratch[3] , scratch[4] , a[4] );
 	X ( scratch[4] );
 	CNOT ( scratch[3] , scratch[4] );
 	X ( scratch[3] );
 	ToffoliImpl ( scratch[2] , scratch[3] , a[3] );
 	X ( scratch[3] );
 	CNOT ( scratch[2] , scratch[3] );
 	X ( scratch[2] );
 	ToffoliImpl ( scratch[1] , scratch[2] , a[2] );
 	X ( scratch[2] );
 	CNOT ( scratch[1] , scratch[2] );
 	X ( scratch[1] );
 	ToffoliImpl ( scratch[0] , scratch[1] , a[1] );
 	X ( scratch[1] );
 	CNOT ( scratch[0] , scratch[1] );
 	X ( scratch[0] );
 	CNOT ( root[0] , scratch[0] );
 	CNOT ( even[0] , scratch[0] );
 	X ( scratch[0] );
 	CNOT ( scratch[0] , scratch[1] );
 	X ( scratch[1] );
 	ToffoliImpl ( scratch[0] , scratch[1] , a[1] );
 	X ( scratch[1] );
 	CNOT ( scratch[1] , scratch[2] );
 	X ( scratch[2] );
 	ToffoliImpl ( scratch[1] , scratch[2] , a[2] );
 	X ( scratch[2] );
 	CNOT ( scratch[2] , scratch[3] );
 	X ( scratch[3] );
 	ToffoliImpl ( scratch[2] , scratch[3] , a[3] );
 	X ( scratch[3] );
 	CNOT ( scratch[3] , scratch[4] );
 	X ( scratch[4] );
 	ToffoliImpl ( scratch[3] , scratch[4] , a[4] );
 	X ( scratch[4] );
 	CNOT ( scratch[4] , scratch[5] );
 	X ( scratch[5] );
 	ToffoliImpl ( scratch[4] , scratch[5] , a[5] );
 	X ( scratch[5] );
 	CNOT ( scratch[5] , scratch[6] );
 	X ( scratch[6] );
 	ToffoliImpl ( scratch[5] , scratch[6] , a[6] );
 	X ( scratch[6] );
 	CNOT ( scratch[6] , scratch[7] );
 	X ( scratch[7] );
 	ToffoliImpl ( scratch[6] , scratch[7] , a[7] );
 	X ( scratch[7] );
 	CNOT ( scratch[7] , scratch[8] );
 	X ( scratch[8] );
 	ToffoliImpl ( scratch[7] , scratch[8] , a[8] );
 	X ( scratch[8] );
 	CNOT ( scratch[8] , scratch[9] );
 	X ( scratch[9] );
 	ToffoliImpl ( scratch[8] , scratch[9] , a[9] );
 	X ( scratch[9] );
 	CNOT ( scratch[9] , scratch[10] );
 	X ( scratch[10] );
 	ToffoliImpl ( scratch[9] , scratch[10] , a[10] );
 	X ( scratch[10] );
 	CNOT ( scratch[10] , scratch[11] );
 	X ( scratch[11] );
 	ToffoliImpl ( scratch[10] , scratch[11] , a[11] );
 	X ( scratch[11] );
 	CNOT ( scratch[11] , scratch[12] );
 	X ( scratch[12] );
 	ToffoliImpl ( scratch[11] , scratch[12] , a[12] );
 	X ( scratch[12] );
 	CNOT ( scratch[12] , scratch[13] );
 	X ( scratch[13] );
 	ToffoliImpl ( scratch[12] , scratch[13] , a[13] );
 	X ( scratch[13] );
 	CNOT ( scratch[13] , scratch[14] );
 	X ( scratch[14] );
 	ToffoliImpl ( scratch[13] , scratch[14] , a[14] );
 	X ( scratch[14] );
 	CNOT ( scratch[14] , scratch[15] );
 	X ( scratch[15] );
 	ToffoliImpl ( scratch[14] , scratch[15] , a[15] );
 	X ( scratch[15] );
 	CNOT ( scratch[15] , scratch[16] );
 	X ( scratch[16] );
 	ToffoliImpl ( scratch[15] , scratch[16] , a[16] );
 	X ( scratch[16] );
 	CNOT ( scratch[16] , scratch[17] );
 	X ( scratch[17] );
 	ToffoliImpl ( scratch[16] , scratch[17] , a[17] );
 	X ( scratch[17] );
 	CNOT ( scratch[17] , scratch[18] );
 	X ( scratch[18] );
 	ToffoliImpl ( scratch[17] , scratch[18] , a[18] );
 	X ( scratch[18] );
 	CNOT ( scratch[18] , scratch[19] );
 	X ( scratch[19] );
 	ToffoliImpl ( scratch[18] , scratch[19] , a[19] );
 	X ( scratch[19] );
 	CNOT ( scratch[19] , scratch[20] );
 	X ( scratch[20] );
 	ToffoliImpl ( scratch[19] , scratch[20] , a[20] );
 	X ( scratch[20] );
 	CNOT ( scratch[20] , scratch[21] );
 	X ( scratch[21] );
 	ToffoliImpl ( scratch[20] , scratch[21] , a[21] );
 	X ( scratch[21] );
 	CNOT ( scratch[21] , scratch[22] );
 	X ( scratch[22] );
 	ToffoliImpl ( scratch[21] , scratch[22] , a[22] );
 	X ( scratch[22] );
 	CNOT ( scratch[22] , scratch[23] );
 	X ( scratch[23] );
 	ToffoliImpl ( scratch[22] , scratch[23] , a[23] );
 	X ( scratch[23] );
 	CNOT ( scratch[23] , scratch[24] );
 	X ( scratch[24] );
 	ToffoliImpl ( scratch[23] , scratch[24] , a[24] );
 	X ( scratch[24] );
 	CNOT ( scratch[24] , scratch[25] );
 	X ( scratch[25] );
 	ToffoliImpl ( scratch[24] , scratch[25] , a[25] );
 	X ( scratch[25] );
 	CNOT ( scratch[25] , scratch[26] );
 	X ( scratch[26] );
 	ToffoliImpl ( scratch[25] , scratch[26] , a[26] );
 	X ( scratch[26] );
 	CNOT ( scratch[26] , scratch[27] );
 	X ( scratch[27] );
 	ToffoliImpl ( scratch[26] , scratch[27] , a[27] );
 	X ( scratch[27] );
 	CNOT ( scratch[27] , scratch[28] );
 	X ( scratch[28] );
 	ToffoliImpl ( scratch[27] , scratch[28] , a[28] );
 	X ( scratch[28] );
 	CNOT ( scratch[28] , scratch[29] );
 	X ( scratch[29] );
 	ToffoliImpl ( scratch[28] , scratch[29] , a[29] );
 	X ( scratch[29] );
 	CNOT ( scratch[29] , scratch[30] );
 	X ( scratch[30] );
 	ToffoliImpl ( scratch[29] , scratch[30] , a[30] );
 	X ( scratch[30] );
 	CNOT ( scratch[30] , scratch[31] );
 	X ( scratch[31] );
 	ToffoliImpl ( scratch[30] , scratch[31] , a[31] );
 	X ( scratch[31] );
 	CNOT ( scratch[31] , scratch[32] );
 	X ( scratch[32] );
 	ToffoliImpl ( scratch[31] , scratch[32] , a[32] );
 	X ( scratch[32] );
 	CNOT ( scratch[32] , scratch[33] );
 	X ( scratch[33] );
 	ToffoliImpl ( scratch[32] , scratch[33] , a[33] );
 	X ( scratch[33] );
 	CNOT ( scratch[33] , scratch[34] );
 	X ( scratch[34] );
 	ToffoliImpl ( scratch[33] , scratch[34] , a[34] );
 	X ( scratch[34] );
 	CNOT ( scratch[34] , scratch[35] );
 	X ( scratch[35] );
 	ToffoliImpl ( scratch[34] , scratch[35] , a[35] );
 	X ( scratch[35] );
 	CNOT ( scratch[35] , scratch[36] );
 	X ( scratch[36] );
 	ToffoliImpl ( scratch[35] , scratch[36] , a[36] );
 	X ( scratch[36] );
 	CNOT ( scratch[36] , scratch[37] );
 	X ( scratch[37] );
 	ToffoliImpl ( scratch[36] , scratch[37] , a[37] );
 	X ( scratch[37] );
 	CNOT ( scratch[37] , scratch[38] );
 	X ( scratch[38] );
 	ToffoliImpl ( scratch[37] , scratch[38] , a[38] );
 	X ( scratch[38] );
 	CNOT ( scratch[38] , scratch[39] );
 	X ( scratch[39] );
 	ToffoliImpl ( scratch[38] , scratch[39] , a[39] );
 	X ( scratch[39] );
 	CNOT ( scratch[39] , scratch[40] );
 	X ( scratch[40] );
 	ToffoliImpl ( scratch[39] , scratch[40] , a[40] );
 	X ( scratch[40] );
 	CNOT ( scratch[40] , scratch[41] );
 	X ( scratch[41] );
 	ToffoliImpl ( scratch[40] , scratch[41] , a[41] );
 	X ( scratch[41] );
 	CNOT ( scratch[41] , scratch[42] );
 	X ( scratch[42] );
 	ToffoliImpl ( scratch[41] , scratch[42] , a[42] );
 	X ( scratch[42] );
 	CNOT ( scratch[42] , scratch[43] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[42] , scratch[43] , a[43] );
 	X ( scratch[43] );
 }

module PARSENODEEVEN ( qbit* a , qbit* even ) {
 	qbit scratch[44];
	PrepZ ( scratch[0] , 0 );
 	PrepZ ( scratch[1] , 0 );
 	PrepZ ( scratch[2] , 0 );
 	PrepZ ( scratch[3] , 0 );
 	PrepZ ( scratch[4] , 0 );
 	PrepZ ( scratch[5] , 0 );
 	PrepZ ( scratch[6] , 0 );
 	PrepZ ( scratch[7] , 0 );
 	PrepZ ( scratch[8] , 0 );
 	PrepZ ( scratch[9] , 0 );
 	PrepZ ( scratch[10] , 0 );
 	PrepZ ( scratch[11] , 0 );
 	PrepZ ( scratch[12] , 0 );
 	PrepZ ( scratch[13] , 0 );
 	PrepZ ( scratch[14] , 0 );
 	PrepZ ( scratch[15] , 0 );
 	PrepZ ( scratch[16] , 0 );
 	PrepZ ( scratch[17] , 0 );
 	PrepZ ( scratch[18] , 0 );
 	PrepZ ( scratch[19] , 0 );
 	PrepZ ( scratch[20] , 0 );
 	PrepZ ( scratch[21] , 0 );
 	PrepZ ( scratch[22] , 0 );
 	PrepZ ( scratch[23] , 0 );
 	PrepZ ( scratch[24] , 0 );
 	PrepZ ( scratch[25] , 0 );
 	PrepZ ( scratch[26] , 0 );
 	PrepZ ( scratch[27] , 0 );
 	PrepZ ( scratch[28] , 0 );
 	PrepZ ( scratch[29] , 0 );
 	PrepZ ( scratch[30] , 0 );
 	PrepZ ( scratch[31] , 0 );
 	PrepZ ( scratch[32] , 0 );
 	PrepZ ( scratch[33] , 0 );
 	PrepZ ( scratch[34] , 0 );
 	PrepZ ( scratch[35] , 0 );
 	PrepZ ( scratch[36] , 0 );
 	PrepZ ( scratch[37] , 0 );
 	PrepZ ( scratch[38] , 0 );
 	PrepZ ( scratch[39] , 0 );
 	PrepZ ( scratch[40] , 0 );
 	PrepZ ( scratch[41] , 0 );
 	PrepZ ( scratch[42] , 0 );
 	PrepZ ( scratch[43] , 0 );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[42] , scratch[43] , a[43] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[42] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[41] , scratch[43] , a[42] );
 	ToffoliImpl ( even[0] , scratch[43] , a[42] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[41] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[40] , scratch[43] , a[41] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[40] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[39] , scratch[43] , a[40] );
 	ToffoliImpl ( even[0] , scratch[43] , a[40] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[39] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[38] , scratch[43] , a[39] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[38] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[37] , scratch[43] , a[38] );
 	ToffoliImpl ( even[0] , scratch[43] , a[38] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[37] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[36] , scratch[43] , a[37] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[36] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[35] , scratch[43] , a[36] );
 	ToffoliImpl ( even[0] , scratch[43] , a[36] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[35] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[34] , scratch[43] , a[35] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[34] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[33] , scratch[43] , a[34] );
 	ToffoliImpl ( even[0] , scratch[43] , a[34] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[33] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[32] , scratch[43] , a[33] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[32] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[31] , scratch[43] , a[32] );
 	ToffoliImpl ( even[0] , scratch[43] , a[32] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[31] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[30] , scratch[43] , a[31] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[30] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[29] , scratch[43] , a[30] );
 	ToffoliImpl ( even[0] , scratch[43] , a[30] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[29] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[28] , scratch[43] , a[29] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[28] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[27] , scratch[43] , a[28] );
 	ToffoliImpl ( even[0] , scratch[43] , a[28] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[27] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[26] , scratch[43] , a[27] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[26] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[25] , scratch[43] , a[26] );
 	ToffoliImpl ( even[0] , scratch[43] , a[26] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[25] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[24] , scratch[43] , a[25] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[24] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[23] , scratch[43] , a[24] );
 	ToffoliImpl ( even[0] , scratch[43] , a[24] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[23] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[22] , scratch[43] , a[23] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[22] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[21] , scratch[43] , a[22] );
 	ToffoliImpl ( even[0] , scratch[43] , a[22] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[21] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[20] , scratch[43] , a[21] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[20] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[19] , scratch[43] , a[20] );
 	ToffoliImpl ( even[0] , scratch[43] , a[20] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[19] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[18] , scratch[43] , a[19] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[18] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[17] , scratch[43] , a[18] );
 	ToffoliImpl ( even[0] , scratch[43] , a[18] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[17] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[16] , scratch[43] , a[17] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[16] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[15] , scratch[43] , a[16] );
 	ToffoliImpl ( even[0] , scratch[43] , a[16] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[15] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[14] , scratch[43] , a[15] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[14] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[13] , scratch[43] , a[14] );
 	ToffoliImpl ( even[0] , scratch[43] , a[14] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[13] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[12] , scratch[43] , a[13] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[12] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[11] , scratch[43] , a[12] );
 	ToffoliImpl ( even[0] , scratch[43] , a[12] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[11] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[10] , scratch[43] , a[11] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[10] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[9] , scratch[43] , a[10] );
 	ToffoliImpl ( even[0] , scratch[43] , a[10] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[9] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[8] , scratch[43] , a[9] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[8] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[7] , scratch[43] , a[8] );
 	ToffoliImpl ( even[0] , scratch[43] , a[8] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[7] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[6] , scratch[43] , a[7] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[6] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[5] , scratch[43] , a[6] );
 	ToffoliImpl ( even[0] , scratch[43] , a[6] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[5] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[4] , scratch[43] , a[5] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[4] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[3] , scratch[43] , a[4] );
 	ToffoliImpl ( even[0] , scratch[43] , a[4] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[3] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[2] , scratch[43] , a[3] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[2] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[1] , scratch[43] , a[2] );
 	ToffoliImpl ( even[0] , scratch[43] , a[2] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[1] );
 	CNOT ( scratch[43] , scratch[0] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[0] , scratch[43] , a[1] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[1] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[1] , scratch[43] , a[2] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[2] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[2] , scratch[43] , a[3] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[3] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[3] , scratch[43] , a[4] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[4] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[4] , scratch[43] , a[5] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[5] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[5] , scratch[43] , a[6] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[6] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[6] , scratch[43] , a[7] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[7] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[7] , scratch[43] , a[8] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[8] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[8] , scratch[43] , a[9] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[9] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[9] , scratch[43] , a[10] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[10] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[10] , scratch[43] , a[11] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[11] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[11] , scratch[43] , a[12] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[12] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[12] , scratch[43] , a[13] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[13] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[13] , scratch[43] , a[14] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[14] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[14] , scratch[43] , a[15] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[15] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[15] , scratch[43] , a[16] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[16] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[16] , scratch[43] , a[17] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[17] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[17] , scratch[43] , a[18] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[18] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[18] , scratch[43] , a[19] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[19] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[19] , scratch[43] , a[20] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[20] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[20] , scratch[43] , a[21] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[21] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[21] , scratch[43] , a[22] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[22] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[22] , scratch[43] , a[23] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[23] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[23] , scratch[43] , a[24] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[24] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[24] , scratch[43] , a[25] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[25] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[25] , scratch[43] , a[26] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[26] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[26] , scratch[43] , a[27] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[27] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[27] , scratch[43] , a[28] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[28] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[28] , scratch[43] , a[29] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[29] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[29] , scratch[43] , a[30] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[30] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[30] , scratch[43] , a[31] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[31] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[31] , scratch[43] , a[32] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[32] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[32] , scratch[43] , a[33] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[33] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[33] , scratch[43] , a[34] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[34] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[34] , scratch[43] , a[35] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[35] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[35] , scratch[43] , a[36] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[36] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[36] , scratch[43] , a[37] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[37] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[37] , scratch[43] , a[38] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[38] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[38] , scratch[43] , a[39] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[39] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[39] , scratch[43] , a[40] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[40] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[40] , scratch[43] , a[41] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[41] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[41] , scratch[43] , a[42] );
 	X ( scratch[43] );
 	CNOT ( scratch[43] , scratch[42] );
 	X ( scratch[43] );
 	ToffoliImpl ( scratch[42] , scratch[43] , a[43] );
 	X ( scratch[43] );
 }

module TESTISPARENT_0_1 ( qbit* a , qbit* root , qbit* even , qbit* isparent , qbit* ismatch ) {
 	X ( even[0] );
 	X ( a[0] );
 	ToffoliImpl ( isparent[0] , even[0] , a[0] );
 	X ( a[0] );
 	X ( even[0] );
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 }

module TESTISCHILD_0 ( qbit* even , qbit* ischild ) {
 	CNOT ( ischild[0] , even[0] );
 }

module SETPARENT ( qbit* a , qbit* b , qbit* isparent ) {
 	ToffoliImpl ( b[0] , isparent[0] , a[1] );
 	ToffoliImpl ( b[1] , isparent[0] , a[2] );
 	ToffoliImpl ( b[2] , isparent[0] , a[3] );
 	ToffoliImpl ( b[3] , isparent[0] , a[4] );
 	ToffoliImpl ( b[4] , isparent[0] , a[5] );
 	ToffoliImpl ( b[5] , isparent[0] , a[6] );
 	ToffoliImpl ( b[6] , isparent[0] , a[7] );
 	ToffoliImpl ( b[7] , isparent[0] , a[8] );
 	ToffoliImpl ( b[8] , isparent[0] , a[9] );
 	ToffoliImpl ( b[9] , isparent[0] , a[10] );
 	ToffoliImpl ( b[10] , isparent[0] , a[11] );
 	ToffoliImpl ( b[11] , isparent[0] , a[12] );
 	ToffoliImpl ( b[12] , isparent[0] , a[13] );
 	ToffoliImpl ( b[13] , isparent[0] , a[14] );
 	ToffoliImpl ( b[14] , isparent[0] , a[15] );
 	ToffoliImpl ( b[15] , isparent[0] , a[16] );
 	ToffoliImpl ( b[16] , isparent[0] , a[17] );
 	ToffoliImpl ( b[17] , isparent[0] , a[18] );
 	ToffoliImpl ( b[18] , isparent[0] , a[19] );
 	ToffoliImpl ( b[19] , isparent[0] , a[20] );
 	ToffoliImpl ( b[20] , isparent[0] , a[21] );
 	ToffoliImpl ( b[21] , isparent[0] , a[22] );
 	ToffoliImpl ( b[22] , isparent[0] , a[23] );
 	ToffoliImpl ( b[23] , isparent[0] , a[24] );
 	ToffoliImpl ( b[24] , isparent[0] , a[25] );
 	ToffoliImpl ( b[25] , isparent[0] , a[26] );
 	ToffoliImpl ( b[26] , isparent[0] , a[27] );
 	ToffoliImpl ( b[27] , isparent[0] , a[28] );
 	ToffoliImpl ( b[28] , isparent[0] , a[29] );
 	ToffoliImpl ( b[29] , isparent[0] , a[30] );
 	ToffoliImpl ( b[30] , isparent[0] , a[31] );
 	ToffoliImpl ( b[31] , isparent[0] , a[32] );
 	ToffoliImpl ( b[32] , isparent[0] , a[33] );
 	ToffoliImpl ( b[33] , isparent[0] , a[34] );
 	ToffoliImpl ( b[34] , isparent[0] , a[35] );
 	ToffoliImpl ( b[35] , isparent[0] , a[36] );
 	ToffoliImpl ( b[36] , isparent[0] , a[37] );
 	ToffoliImpl ( b[37] , isparent[0] , a[38] );
 	ToffoliImpl ( b[38] , isparent[0] , a[39] );
 	ToffoliImpl ( b[39] , isparent[0] , a[40] );
 	ToffoliImpl ( b[40] , isparent[0] , a[41] );
 	ToffoliImpl ( b[41] , isparent[0] , a[42] );
 	ToffoliImpl ( b[42] , isparent[0] , a[43] );
 	ToffoliImpl ( b[44] , isparent[0] , a[44] );
 }

module CADDNUMCLEAR ( qbit* scratch , qbit* a ) {
 	ToffoliImpl ( scratch[42] , a[42] , scratch[41] );
 	ToffoliImpl ( scratch[41] , a[41] , scratch[40] );
 	ToffoliImpl ( scratch[40] , a[40] , scratch[39] );
 	ToffoliImpl ( scratch[39] , a[39] , scratch[38] );
 	ToffoliImpl ( scratch[38] , a[38] , scratch[37] );
 	ToffoliImpl ( scratch[37] , a[37] , scratch[36] );
 	ToffoliImpl ( scratch[36] , a[36] , scratch[35] );
 	ToffoliImpl ( scratch[35] , a[35] , scratch[34] );
 	ToffoliImpl ( scratch[34] , a[34] , scratch[33] );
 	ToffoliImpl ( scratch[33] , a[33] , scratch[32] );
 	ToffoliImpl ( scratch[32] , a[32] , scratch[31] );
 	ToffoliImpl ( scratch[31] , a[31] , scratch[30] );
 	ToffoliImpl ( scratch[30] , a[30] , scratch[29] );
 	ToffoliImpl ( scratch[29] , a[29] , scratch[28] );
 	ToffoliImpl ( scratch[28] , a[28] , scratch[27] );
 	ToffoliImpl ( scratch[27] , a[27] , scratch[26] );
 	ToffoliImpl ( scratch[26] , a[26] , scratch[25] );
 	ToffoliImpl ( scratch[25] , a[25] , scratch[24] );
 	ToffoliImpl ( scratch[24] , a[24] , scratch[23] );
 	ToffoliImpl ( scratch[23] , a[23] , scratch[22] );
 	ToffoliImpl ( scratch[22] , a[22] , scratch[21] );
 	ToffoliImpl ( scratch[21] , a[21] , scratch[20] );
 	ToffoliImpl ( scratch[20] , a[20] , scratch[19] );
 	ToffoliImpl ( scratch[19] , a[19] , scratch[18] );
 	ToffoliImpl ( scratch[18] , a[18] , scratch[17] );
 	ToffoliImpl ( scratch[17] , a[17] , scratch[16] );
 	ToffoliImpl ( scratch[16] , a[16] , scratch[15] );
 	ToffoliImpl ( scratch[15] , a[15] , scratch[14] );
 	ToffoliImpl ( scratch[14] , a[14] , scratch[13] );
 	ToffoliImpl ( scratch[13] , a[13] , scratch[12] );
 	ToffoliImpl ( scratch[12] , a[12] , scratch[11] );
 	ToffoliImpl ( scratch[11] , a[11] , scratch[10] );
 	ToffoliImpl ( scratch[10] , a[10] , scratch[9] );
 	ToffoliImpl ( scratch[9] , a[9] , scratch[8] );
 	ToffoliImpl ( scratch[8] , a[8] , scratch[7] );
 	ToffoliImpl ( scratch[7] , a[7] , scratch[6] );
 	ToffoliImpl ( scratch[6] , a[6] , scratch[5] );
 	ToffoliImpl ( scratch[5] , a[5] , scratch[4] );
 	ToffoliImpl ( scratch[4] , a[4] , scratch[3] );
 	ToffoliImpl ( scratch[3] , a[3] , scratch[2] );
 	ToffoliImpl ( scratch[2] , a[2] , scratch[1] );
 	ToffoliImpl ( scratch[1] , a[1] , scratch[0] );
 }

module CADDNUM ( qbit* addsub , qbit* b , qbit* a ) {
 	qbit scratch[43];
	PrepZ ( scratch[0] , 0 );
 	PrepZ ( scratch[1] , 0 );
 	PrepZ ( scratch[2] , 0 );
 	PrepZ ( scratch[3] , 0 );
 	PrepZ ( scratch[4] , 0 );
 	PrepZ ( scratch[5] , 0 );
 	PrepZ ( scratch[6] , 0 );
 	PrepZ ( scratch[7] , 0 );
 	PrepZ ( scratch[8] , 0 );
 	PrepZ ( scratch[9] , 0 );
 	PrepZ ( scratch[10] , 0 );
 	PrepZ ( scratch[11] , 0 );
 	PrepZ ( scratch[12] , 0 );
 	PrepZ ( scratch[13] , 0 );
 	PrepZ ( scratch[14] , 0 );
 	PrepZ ( scratch[15] , 0 );
 	PrepZ ( scratch[16] , 0 );
 	PrepZ ( scratch[17] , 0 );
 	PrepZ ( scratch[18] , 0 );
 	PrepZ ( scratch[19] , 0 );
 	PrepZ ( scratch[20] , 0 );
 	PrepZ ( scratch[21] , 0 );
 	PrepZ ( scratch[22] , 0 );
 	PrepZ ( scratch[23] , 0 );
 	PrepZ ( scratch[24] , 0 );
 	PrepZ ( scratch[25] , 0 );
 	PrepZ ( scratch[26] , 0 );
 	PrepZ ( scratch[27] , 0 );
 	PrepZ ( scratch[28] , 0 );
 	PrepZ ( scratch[29] , 0 );
 	PrepZ ( scratch[30] , 0 );
 	PrepZ ( scratch[31] , 0 );
 	PrepZ ( scratch[32] , 0 );
 	PrepZ ( scratch[33] , 0 );
 	PrepZ ( scratch[34] , 0 );
 	PrepZ ( scratch[35] , 0 );
 	PrepZ ( scratch[36] , 0 );
 	PrepZ ( scratch[37] , 0 );
 	PrepZ ( scratch[38] , 0 );
 	PrepZ ( scratch[39] , 0 );
 	PrepZ ( scratch[40] , 0 );
 	PrepZ ( scratch[41] , 0 );
 	PrepZ ( scratch[42] , 0 );
 	ToffoliImpl ( b[0] , a[0] , addsub[0] );
 	ToffoliImpl ( b[1] , a[1] , addsub[0] );
 	ToffoliImpl ( b[1] , scratch[0] , addsub[0] );
 	ToffoliImpl ( scratch[1] , scratch[0] , a[1] );
 	ToffoliImpl ( b[2] , a[2] , addsub[0] );
 	ToffoliImpl ( b[2] , scratch[1] , addsub[0] );
 	ToffoliImpl ( scratch[2] , scratch[1] , a[2] );
 	ToffoliImpl ( b[3] , a[3] , addsub[0] );
 	ToffoliImpl ( b[3] , scratch[2] , addsub[0] );
 	ToffoliImpl ( scratch[3] , scratch[2] , a[3] );
 	ToffoliImpl ( b[4] , a[4] , addsub[0] );
 	ToffoliImpl ( b[4] , scratch[3] , addsub[0] );
 	ToffoliImpl ( scratch[4] , scratch[3] , a[4] );
 	ToffoliImpl ( b[5] , a[5] , addsub[0] );
 	ToffoliImpl ( b[5] , scratch[4] , addsub[0] );
 	ToffoliImpl ( scratch[5] , scratch[4] , a[5] );
 	ToffoliImpl ( b[6] , a[6] , addsub[0] );
 	ToffoliImpl ( b[6] , scratch[5] , addsub[0] );
 	ToffoliImpl ( scratch[6] , scratch[5] , a[6] );
 	ToffoliImpl ( b[7] , a[7] , addsub[0] );
 	ToffoliImpl ( b[7] , scratch[6] , addsub[0] );
 	ToffoliImpl ( scratch[7] , scratch[6] , a[7] );
 	ToffoliImpl ( b[8] , a[8] , addsub[0] );
 	ToffoliImpl ( b[8] , scratch[7] , addsub[0] );
 	ToffoliImpl ( scratch[8] , scratch[7] , a[8] );
 	ToffoliImpl ( b[9] , a[9] , addsub[0] );
 	ToffoliImpl ( b[9] , scratch[8] , addsub[0] );
 	ToffoliImpl ( scratch[9] , scratch[8] , a[9] );
 	ToffoliImpl ( b[10] , a[10] , addsub[0] );
 	ToffoliImpl ( b[10] , scratch[9] , addsub[0] );
 	ToffoliImpl ( scratch[10] , scratch[9] , a[10] );
 	ToffoliImpl ( b[11] , a[11] , addsub[0] );
 	ToffoliImpl ( b[11] , scratch[10] , addsub[0] );
 	ToffoliImpl ( scratch[11] , scratch[10] , a[11] );
 	ToffoliImpl ( b[12] , a[12] , addsub[0] );
 	ToffoliImpl ( b[12] , scratch[11] , addsub[0] );
 	ToffoliImpl ( scratch[12] , scratch[11] , a[12] );
 	ToffoliImpl ( b[13] , a[13] , addsub[0] );
 	ToffoliImpl ( b[13] , scratch[12] , addsub[0] );
 	ToffoliImpl ( scratch[13] , scratch[12] , a[13] );
 	ToffoliImpl ( b[14] , a[14] , addsub[0] );
 	ToffoliImpl ( b[14] , scratch[13] , addsub[0] );
 	ToffoliImpl ( scratch[14] , scratch[13] , a[14] );
 	ToffoliImpl ( b[15] , a[15] , addsub[0] );
 	ToffoliImpl ( b[15] , scratch[14] , addsub[0] );
 	ToffoliImpl ( scratch[15] , scratch[14] , a[15] );
 	ToffoliImpl ( b[16] , a[16] , addsub[0] );
 	ToffoliImpl ( b[16] , scratch[15] , addsub[0] );
 	ToffoliImpl ( scratch[16] , scratch[15] , a[16] );
 	ToffoliImpl ( b[17] , a[17] , addsub[0] );
 	ToffoliImpl ( b[17] , scratch[16] , addsub[0] );
 	ToffoliImpl ( scratch[17] , scratch[16] , a[17] );
 	ToffoliImpl ( b[18] , a[18] , addsub[0] );
 	ToffoliImpl ( b[18] , scratch[17] , addsub[0] );
 	ToffoliImpl ( scratch[18] , scratch[17] , a[18] );
 	ToffoliImpl ( b[19] , a[19] , addsub[0] );
 	ToffoliImpl ( b[19] , scratch[18] , addsub[0] );
 	ToffoliImpl ( scratch[19] , scratch[18] , a[19] );
 	ToffoliImpl ( b[20] , a[20] , addsub[0] );
 	ToffoliImpl ( b[20] , scratch[19] , addsub[0] );
 	ToffoliImpl ( scratch[20] , scratch[19] , a[20] );
 	ToffoliImpl ( b[21] , a[21] , addsub[0] );
 	ToffoliImpl ( b[21] , scratch[20] , addsub[0] );
 	ToffoliImpl ( scratch[21] , scratch[20] , a[21] );
 	ToffoliImpl ( b[22] , a[22] , addsub[0] );
 	ToffoliImpl ( b[22] , scratch[21] , addsub[0] );
 	ToffoliImpl ( scratch[22] , scratch[21] , a[22] );
 	ToffoliImpl ( b[23] , a[23] , addsub[0] );
 	ToffoliImpl ( b[23] , scratch[22] , addsub[0] );
 	ToffoliImpl ( scratch[23] , scratch[22] , a[23] );
 	ToffoliImpl ( b[24] , a[24] , addsub[0] );
 	ToffoliImpl ( b[24] , scratch[23] , addsub[0] );
 	ToffoliImpl ( scratch[24] , scratch[23] , a[24] );
 	ToffoliImpl ( b[25] , a[25] , addsub[0] );
 	ToffoliImpl ( b[25] , scratch[24] , addsub[0] );
 	ToffoliImpl ( scratch[25] , scratch[24] , a[25] );
 	ToffoliImpl ( b[26] , a[26] , addsub[0] );
 	ToffoliImpl ( b[26] , scratch[25] , addsub[0] );
 	ToffoliImpl ( scratch[26] , scratch[25] , a[26] );
 	ToffoliImpl ( b[27] , a[27] , addsub[0] );
 	ToffoliImpl ( b[27] , scratch[26] , addsub[0] );
 	ToffoliImpl ( scratch[27] , scratch[26] , a[27] );
 	ToffoliImpl ( b[28] , a[28] , addsub[0] );
 	ToffoliImpl ( b[28] , scratch[27] , addsub[0] );
 	ToffoliImpl ( scratch[28] , scratch[27] , a[28] );
 	ToffoliImpl ( b[29] , a[29] , addsub[0] );
 	ToffoliImpl ( b[29] , scratch[28] , addsub[0] );
 	ToffoliImpl ( scratch[29] , scratch[28] , a[29] );
 	ToffoliImpl ( b[30] , a[30] , addsub[0] );
 	ToffoliImpl ( b[30] , scratch[29] , addsub[0] );
 	ToffoliImpl ( scratch[30] , scratch[29] , a[30] );
 	ToffoliImpl ( b[31] , a[31] , addsub[0] );
 	ToffoliImpl ( b[31] , scratch[30] , addsub[0] );
 	ToffoliImpl ( scratch[31] , scratch[30] , a[31] );
 	ToffoliImpl ( b[32] , a[32] , addsub[0] );
 	ToffoliImpl ( b[32] , scratch[31] , addsub[0] );
 	ToffoliImpl ( scratch[32] , scratch[31] , a[32] );
 	ToffoliImpl ( b[33] , a[33] , addsub[0] );
 	ToffoliImpl ( b[33] , scratch[32] , addsub[0] );
 	ToffoliImpl ( scratch[33] , scratch[32] , a[33] );
 	ToffoliImpl ( b[34] , a[34] , addsub[0] );
 	ToffoliImpl ( b[34] , scratch[33] , addsub[0] );
 	ToffoliImpl ( scratch[34] , scratch[33] , a[34] );
 	ToffoliImpl ( b[35] , a[35] , addsub[0] );
 	ToffoliImpl ( b[35] , scratch[34] , addsub[0] );
 	ToffoliImpl ( scratch[35] , scratch[34] , a[35] );
 	ToffoliImpl ( b[36] , a[36] , addsub[0] );
 	ToffoliImpl ( b[36] , scratch[35] , addsub[0] );
 	ToffoliImpl ( scratch[36] , scratch[35] , a[36] );
 	ToffoliImpl ( b[37] , a[37] , addsub[0] );
 	ToffoliImpl ( b[37] , scratch[36] , addsub[0] );
 	ToffoliImpl ( scratch[37] , scratch[36] , a[37] );
 	ToffoliImpl ( b[38] , a[38] , addsub[0] );
 	ToffoliImpl ( b[38] , scratch[37] , addsub[0] );
 	ToffoliImpl ( scratch[38] , scratch[37] , a[38] );
 	ToffoliImpl ( b[39] , a[39] , addsub[0] );
 	ToffoliImpl ( b[39] , scratch[38] , addsub[0] );
 	ToffoliImpl ( scratch[39] , scratch[38] , a[39] );
 	ToffoliImpl ( b[40] , a[40] , addsub[0] );
 	ToffoliImpl ( b[40] , scratch[39] , addsub[0] );
 	ToffoliImpl ( scratch[40] , scratch[39] , a[40] );
 	ToffoliImpl ( b[41] , a[41] , addsub[0] );
 	ToffoliImpl ( b[41] , scratch[40] , addsub[0] );
 	ToffoliImpl ( scratch[41] , scratch[40] , a[41] );
 	ToffoliImpl ( b[42] , a[42] , addsub[0] );
 	ToffoliImpl ( b[42] , scratch[41] , addsub[0] );
 	ToffoliImpl ( scratch[42] , scratch[41] , a[42] );
 	CADDNUMCLEAR ( scratch , a );
 }

module CSUBNUMCLEAR ( qbit* scratch , qbit* a ) {
 	X ( a[42] );
 	ToffoliImpl ( scratch[42] , a[42] , scratch[41] );
 	X ( a[42] );
 	X ( a[41] );
 	ToffoliImpl ( scratch[41] , a[41] , scratch[40] );
 	X ( a[41] );
 	X ( a[40] );
 	ToffoliImpl ( scratch[40] , a[40] , scratch[39] );
 	X ( a[40] );
 	X ( a[39] );
 	ToffoliImpl ( scratch[39] , a[39] , scratch[38] );
 	X ( a[39] );
 	X ( a[38] );
 	ToffoliImpl ( scratch[38] , a[38] , scratch[37] );
 	X ( a[38] );
 	X ( a[37] );
 	ToffoliImpl ( scratch[37] , a[37] , scratch[36] );
 	X ( a[37] );
 	X ( a[36] );
 	ToffoliImpl ( scratch[36] , a[36] , scratch[35] );
 	X ( a[36] );
 	X ( a[35] );
 	ToffoliImpl ( scratch[35] , a[35] , scratch[34] );
 	X ( a[35] );
 	X ( a[34] );
 	ToffoliImpl ( scratch[34] , a[34] , scratch[33] );
 	X ( a[34] );
 	X ( a[33] );
 	ToffoliImpl ( scratch[33] , a[33] , scratch[32] );
 	X ( a[33] );
 	X ( a[32] );
 	ToffoliImpl ( scratch[32] , a[32] , scratch[31] );
 	X ( a[32] );
 	X ( a[31] );
 	ToffoliImpl ( scratch[31] , a[31] , scratch[30] );
 	X ( a[31] );
 	X ( a[30] );
 	ToffoliImpl ( scratch[30] , a[30] , scratch[29] );
 	X ( a[30] );
 	X ( a[29] );
 	ToffoliImpl ( scratch[29] , a[29] , scratch[28] );
 	X ( a[29] );
 	X ( a[28] );
 	ToffoliImpl ( scratch[28] , a[28] , scratch[27] );
 	X ( a[28] );
 	X ( a[27] );
 	ToffoliImpl ( scratch[27] , a[27] , scratch[26] );
 	X ( a[27] );
 	X ( a[26] );
 	ToffoliImpl ( scratch[26] , a[26] , scratch[25] );
 	X ( a[26] );
 	X ( a[25] );
 	ToffoliImpl ( scratch[25] , a[25] , scratch[24] );
 	X ( a[25] );
 	X ( a[24] );
 	ToffoliImpl ( scratch[24] , a[24] , scratch[23] );
 	X ( a[24] );
 	X ( a[23] );
 	ToffoliImpl ( scratch[23] , a[23] , scratch[22] );
 	X ( a[23] );
 	X ( a[22] );
 	ToffoliImpl ( scratch[22] , a[22] , scratch[21] );
 	X ( a[22] );
 	X ( a[21] );
 	ToffoliImpl ( scratch[21] , a[21] , scratch[20] );
 	X ( a[21] );
 	X ( a[20] );
 	ToffoliImpl ( scratch[20] , a[20] , scratch[19] );
 	X ( a[20] );
 	X ( a[19] );
 	ToffoliImpl ( scratch[19] , a[19] , scratch[18] );
 	X ( a[19] );
 	X ( a[18] );
 	ToffoliImpl ( scratch[18] , a[18] , scratch[17] );
 	X ( a[18] );
 	X ( a[17] );
 	ToffoliImpl ( scratch[17] , a[17] , scratch[16] );
 	X ( a[17] );
 	X ( a[16] );
 	ToffoliImpl ( scratch[16] , a[16] , scratch[15] );
 	X ( a[16] );
 	X ( a[15] );
 	ToffoliImpl ( scratch[15] , a[15] , scratch[14] );
 	X ( a[15] );
 	X ( a[14] );
 	ToffoliImpl ( scratch[14] , a[14] , scratch[13] );
 	X ( a[14] );
 	X ( a[13] );
 	ToffoliImpl ( scratch[13] , a[13] , scratch[12] );
 	X ( a[13] );
 	X ( a[12] );
 	ToffoliImpl ( scratch[12] , a[12] , scratch[11] );
 	X ( a[12] );
 	X ( a[11] );
 	ToffoliImpl ( scratch[11] , a[11] , scratch[10] );
 	X ( a[11] );
 	X ( a[10] );
 	ToffoliImpl ( scratch[10] , a[10] , scratch[9] );
 	X ( a[10] );
 	X ( a[9] );
 	ToffoliImpl ( scratch[9] , a[9] , scratch[8] );
 	X ( a[9] );
 	X ( a[8] );
 	ToffoliImpl ( scratch[8] , a[8] , scratch[7] );
 	X ( a[8] );
 	X ( a[7] );
 	ToffoliImpl ( scratch[7] , a[7] , scratch[6] );
 	X ( a[7] );
 	X ( a[6] );
 	ToffoliImpl ( scratch[6] , a[6] , scratch[5] );
 	X ( a[6] );
 	X ( a[5] );
 	ToffoliImpl ( scratch[5] , a[5] , scratch[4] );
 	X ( a[5] );
 	X ( a[4] );
 	ToffoliImpl ( scratch[4] , a[4] , scratch[3] );
 	X ( a[4] );
 	X ( a[3] );
 	ToffoliImpl ( scratch[3] , a[3] , scratch[2] );
 	X ( a[3] );
 	X ( a[2] );
 	ToffoliImpl ( scratch[2] , a[2] , scratch[1] );
 	X ( a[2] );
 	X ( a[1] );
 	ToffoliImpl ( scratch[1] , a[1] , scratch[0] );
 	X ( a[1] );
 }

module CSUBNUM ( qbit* addsub , qbit* b , qbit* a ) {
 	qbit scratch[43];
	PrepZ ( scratch[0] , 0 );
 	PrepZ ( scratch[1] , 0 );
 	PrepZ ( scratch[2] , 0 );
 	PrepZ ( scratch[3] , 0 );
 	PrepZ ( scratch[4] , 0 );
 	PrepZ ( scratch[5] , 0 );
 	PrepZ ( scratch[6] , 0 );
 	PrepZ ( scratch[7] , 0 );
 	PrepZ ( scratch[8] , 0 );
 	PrepZ ( scratch[9] , 0 );
 	PrepZ ( scratch[10] , 0 );
 	PrepZ ( scratch[11] , 0 );
 	PrepZ ( scratch[12] , 0 );
 	PrepZ ( scratch[13] , 0 );
 	PrepZ ( scratch[14] , 0 );
 	PrepZ ( scratch[15] , 0 );
 	PrepZ ( scratch[16] , 0 );
 	PrepZ ( scratch[17] , 0 );
 	PrepZ ( scratch[18] , 0 );
 	PrepZ ( scratch[19] , 0 );
 	PrepZ ( scratch[20] , 0 );
 	PrepZ ( scratch[21] , 0 );
 	PrepZ ( scratch[22] , 0 );
 	PrepZ ( scratch[23] , 0 );
 	PrepZ ( scratch[24] , 0 );
 	PrepZ ( scratch[25] , 0 );
 	PrepZ ( scratch[26] , 0 );
 	PrepZ ( scratch[27] , 0 );
 	PrepZ ( scratch[28] , 0 );
 	PrepZ ( scratch[29] , 0 );
 	PrepZ ( scratch[30] , 0 );
 	PrepZ ( scratch[31] , 0 );
 	PrepZ ( scratch[32] , 0 );
 	PrepZ ( scratch[33] , 0 );
 	PrepZ ( scratch[34] , 0 );
 	PrepZ ( scratch[35] , 0 );
 	PrepZ ( scratch[36] , 0 );
 	PrepZ ( scratch[37] , 0 );
 	PrepZ ( scratch[38] , 0 );
 	PrepZ ( scratch[39] , 0 );
 	PrepZ ( scratch[40] , 0 );
 	PrepZ ( scratch[41] , 0 );
 	PrepZ ( scratch[42] , 0 );
 	ToffoliImpl ( b[0] , a[0] , addsub[0] );
 	ToffoliImpl ( b[1] , a[1] , addsub[0] );
 	ToffoliImpl ( b[1] , scratch[0] , addsub[0] );
 	X ( a[1] );
 	ToffoliImpl ( scratch[1] , scratch[0] , a[1] );
 	X ( a[1] );
 	ToffoliImpl ( b[2] , a[2] , addsub[0] );
 	ToffoliImpl ( b[2] , scratch[1] , addsub[0] );
 	X ( a[2] );
 	ToffoliImpl ( scratch[2] , scratch[1] , a[2] );
 	X ( a[2] );
 	ToffoliImpl ( b[3] , a[3] , addsub[0] );
 	ToffoliImpl ( b[3] , scratch[2] , addsub[0] );
 	X ( a[3] );
 	ToffoliImpl ( scratch[3] , scratch[2] , a[3] );
 	X ( a[3] );
 	ToffoliImpl ( b[4] , a[4] , addsub[0] );
 	ToffoliImpl ( b[4] , scratch[3] , addsub[0] );
 	X ( a[4] );
 	ToffoliImpl ( scratch[4] , scratch[3] , a[4] );
 	X ( a[4] );
 	ToffoliImpl ( b[5] , a[5] , addsub[0] );
 	ToffoliImpl ( b[5] , scratch[4] , addsub[0] );
 	X ( a[5] );
 	ToffoliImpl ( scratch[5] , scratch[4] , a[5] );
 	X ( a[5] );
 	ToffoliImpl ( b[6] , a[6] , addsub[0] );
 	ToffoliImpl ( b[6] , scratch[5] , addsub[0] );
 	X ( a[6] );
 	ToffoliImpl ( scratch[6] , scratch[5] , a[6] );
 	X ( a[6] );
 	ToffoliImpl ( b[7] , a[7] , addsub[0] );
 	ToffoliImpl ( b[7] , scratch[6] , addsub[0] );
 	X ( a[7] );
 	ToffoliImpl ( scratch[7] , scratch[6] , a[7] );
 	X ( a[7] );
 	ToffoliImpl ( b[8] , a[8] , addsub[0] );
 	ToffoliImpl ( b[8] , scratch[7] , addsub[0] );
 	X ( a[8] );
 	ToffoliImpl ( scratch[8] , scratch[7] , a[8] );
 	X ( a[8] );
 	ToffoliImpl ( b[9] , a[9] , addsub[0] );
 	ToffoliImpl ( b[9] , scratch[8] , addsub[0] );
 	X ( a[9] );
 	ToffoliImpl ( scratch[9] , scratch[8] , a[9] );
 	X ( a[9] );
 	ToffoliImpl ( b[10] , a[10] , addsub[0] );
 	ToffoliImpl ( b[10] , scratch[9] , addsub[0] );
 	X ( a[10] );
 	ToffoliImpl ( scratch[10] , scratch[9] , a[10] );
 	X ( a[10] );
 	ToffoliImpl ( b[11] , a[11] , addsub[0] );
 	ToffoliImpl ( b[11] , scratch[10] , addsub[0] );
 	X ( a[11] );
 	ToffoliImpl ( scratch[11] , scratch[10] , a[11] );
 	X ( a[11] );
 	ToffoliImpl ( b[12] , a[12] , addsub[0] );
 	ToffoliImpl ( b[12] , scratch[11] , addsub[0] );
 	X ( a[12] );
 	ToffoliImpl ( scratch[12] , scratch[11] , a[12] );
 	X ( a[12] );
 	ToffoliImpl ( b[13] , a[13] , addsub[0] );
 	ToffoliImpl ( b[13] , scratch[12] , addsub[0] );
 	X ( a[13] );
 	ToffoliImpl ( scratch[13] , scratch[12] , a[13] );
 	X ( a[13] );
 	ToffoliImpl ( b[14] , a[14] , addsub[0] );
 	ToffoliImpl ( b[14] , scratch[13] , addsub[0] );
 	X ( a[14] );
 	ToffoliImpl ( scratch[14] , scratch[13] , a[14] );
 	X ( a[14] );
 	ToffoliImpl ( b[15] , a[15] , addsub[0] );
 	ToffoliImpl ( b[15] , scratch[14] , addsub[0] );
 	X ( a[15] );
 	ToffoliImpl ( scratch[15] , scratch[14] , a[15] );
 	X ( a[15] );
 	ToffoliImpl ( b[16] , a[16] , addsub[0] );
 	ToffoliImpl ( b[16] , scratch[15] , addsub[0] );
 	X ( a[16] );
 	ToffoliImpl ( scratch[16] , scratch[15] , a[16] );
 	X ( a[16] );
 	ToffoliImpl ( b[17] , a[17] , addsub[0] );
 	ToffoliImpl ( b[17] , scratch[16] , addsub[0] );
 	X ( a[17] );
 	ToffoliImpl ( scratch[17] , scratch[16] , a[17] );
 	X ( a[17] );
 	ToffoliImpl ( b[18] , a[18] , addsub[0] );
 	ToffoliImpl ( b[18] , scratch[17] , addsub[0] );
 	X ( a[18] );
 	ToffoliImpl ( scratch[18] , scratch[17] , a[18] );
 	X ( a[18] );
 	ToffoliImpl ( b[19] , a[19] , addsub[0] );
 	ToffoliImpl ( b[19] , scratch[18] , addsub[0] );
 	X ( a[19] );
 	ToffoliImpl ( scratch[19] , scratch[18] , a[19] );
 	X ( a[19] );
 	ToffoliImpl ( b[20] , a[20] , addsub[0] );
 	ToffoliImpl ( b[20] , scratch[19] , addsub[0] );
 	X ( a[20] );
 	ToffoliImpl ( scratch[20] , scratch[19] , a[20] );
 	X ( a[20] );
 	ToffoliImpl ( b[21] , a[21] , addsub[0] );
 	ToffoliImpl ( b[21] , scratch[20] , addsub[0] );
 	X ( a[21] );
 	ToffoliImpl ( scratch[21] , scratch[20] , a[21] );
 	X ( a[21] );
 	ToffoliImpl ( b[22] , a[22] , addsub[0] );
 	ToffoliImpl ( b[22] , scratch[21] , addsub[0] );
 	X ( a[22] );
 	ToffoliImpl ( scratch[22] , scratch[21] , a[22] );
 	X ( a[22] );
 	ToffoliImpl ( b[23] , a[23] , addsub[0] );
 	ToffoliImpl ( b[23] , scratch[22] , addsub[0] );
 	X ( a[23] );
 	ToffoliImpl ( scratch[23] , scratch[22] , a[23] );
 	X ( a[23] );
 	ToffoliImpl ( b[24] , a[24] , addsub[0] );
 	ToffoliImpl ( b[24] , scratch[23] , addsub[0] );
 	X ( a[24] );
 	ToffoliImpl ( scratch[24] , scratch[23] , a[24] );
 	X ( a[24] );
 	ToffoliImpl ( b[25] , a[25] , addsub[0] );
 	ToffoliImpl ( b[25] , scratch[24] , addsub[0] );
 	X ( a[25] );
 	ToffoliImpl ( scratch[25] , scratch[24] , a[25] );
 	X ( a[25] );
 	ToffoliImpl ( b[26] , a[26] , addsub[0] );
 	ToffoliImpl ( b[26] , scratch[25] , addsub[0] );
 	X ( a[26] );
 	ToffoliImpl ( scratch[26] , scratch[25] , a[26] );
 	X ( a[26] );
 	ToffoliImpl ( b[27] , a[27] , addsub[0] );
 	ToffoliImpl ( b[27] , scratch[26] , addsub[0] );
 	X ( a[27] );
 	ToffoliImpl ( scratch[27] , scratch[26] , a[27] );
 	X ( a[27] );
 	ToffoliImpl ( b[28] , a[28] , addsub[0] );
 	ToffoliImpl ( b[28] , scratch[27] , addsub[0] );
 	X ( a[28] );
 	ToffoliImpl ( scratch[28] , scratch[27] , a[28] );
 	X ( a[28] );
 	ToffoliImpl ( b[29] , a[29] , addsub[0] );
 	ToffoliImpl ( b[29] , scratch[28] , addsub[0] );
 	X ( a[29] );
 	ToffoliImpl ( scratch[29] , scratch[28] , a[29] );
 	X ( a[29] );
 	ToffoliImpl ( b[30] , a[30] , addsub[0] );
 	ToffoliImpl ( b[30] , scratch[29] , addsub[0] );
 	X ( a[30] );
 	ToffoliImpl ( scratch[30] , scratch[29] , a[30] );
 	X ( a[30] );
 	ToffoliImpl ( b[31] , a[31] , addsub[0] );
 	ToffoliImpl ( b[31] , scratch[30] , addsub[0] );
 	X ( a[31] );
 	ToffoliImpl ( scratch[31] , scratch[30] , a[31] );
 	X ( a[31] );
 	ToffoliImpl ( b[32] , a[32] , addsub[0] );
 	ToffoliImpl ( b[32] , scratch[31] , addsub[0] );
 	X ( a[32] );
 	ToffoliImpl ( scratch[32] , scratch[31] , a[32] );
 	X ( a[32] );
 	ToffoliImpl ( b[33] , a[33] , addsub[0] );
 	ToffoliImpl ( b[33] , scratch[32] , addsub[0] );
 	X ( a[33] );
 	ToffoliImpl ( scratch[33] , scratch[32] , a[33] );
 	X ( a[33] );
 	ToffoliImpl ( b[34] , a[34] , addsub[0] );
 	ToffoliImpl ( b[34] , scratch[33] , addsub[0] );
 	X ( a[34] );
 	ToffoliImpl ( scratch[34] , scratch[33] , a[34] );
 	X ( a[34] );
 	ToffoliImpl ( b[35] , a[35] , addsub[0] );
 	ToffoliImpl ( b[35] , scratch[34] , addsub[0] );
 	X ( a[35] );
 	ToffoliImpl ( scratch[35] , scratch[34] , a[35] );
 	X ( a[35] );
 	ToffoliImpl ( b[36] , a[36] , addsub[0] );
 	ToffoliImpl ( b[36] , scratch[35] , addsub[0] );
 	X ( a[36] );
 	ToffoliImpl ( scratch[36] , scratch[35] , a[36] );
 	X ( a[36] );
 	ToffoliImpl ( b[37] , a[37] , addsub[0] );
 	ToffoliImpl ( b[37] , scratch[36] , addsub[0] );
 	X ( a[37] );
 	ToffoliImpl ( scratch[37] , scratch[36] , a[37] );
 	X ( a[37] );
 	ToffoliImpl ( b[38] , a[38] , addsub[0] );
 	ToffoliImpl ( b[38] , scratch[37] , addsub[0] );
 	X ( a[38] );
 	ToffoliImpl ( scratch[38] , scratch[37] , a[38] );
 	X ( a[38] );
 	ToffoliImpl ( b[39] , a[39] , addsub[0] );
 	ToffoliImpl ( b[39] , scratch[38] , addsub[0] );
 	X ( a[39] );
 	ToffoliImpl ( scratch[39] , scratch[38] , a[39] );
 	X ( a[39] );
 	ToffoliImpl ( b[40] , a[40] , addsub[0] );
 	ToffoliImpl ( b[40] , scratch[39] , addsub[0] );
 	X ( a[40] );
 	ToffoliImpl ( scratch[40] , scratch[39] , a[40] );
 	X ( a[40] );
 	ToffoliImpl ( b[41] , a[41] , addsub[0] );
 	ToffoliImpl ( b[41] , scratch[40] , addsub[0] );
 	X ( a[41] );
 	ToffoliImpl ( scratch[41] , scratch[40] , a[41] );
 	X ( a[41] );
 	ToffoliImpl ( b[42] , a[42] , addsub[0] );
 	ToffoliImpl ( b[42] , scratch[41] , addsub[0] );
 	X ( a[42] );
 	ToffoliImpl ( scratch[42] , scratch[41] , a[42] );
 	X ( a[42] );
 	CSUBNUMCLEAR ( scratch , a );
 }

module DOWELD0 ( qbit* a , qbit* b , qbit* weldctrl ) {
 	qbit addsub[1];
	X ( a[44] );
 	ToffoliImpl ( addsub[0] , weldctrl[0] , a[44] );
 	X ( a[44] );
 	CADDNUM ( addsub , b , a );
 	CNOT ( addsub[0] , weldctrl[0] );
 	CSUBNUM ( addsub , b , a );
 	ToffoliImpl ( addsub[0] , weldctrl[0] , a[44] );
 }

module DOWELD1 ( qbit* a , qbit* b , qbit* weldctrl , qbit* g ) {
 	qbit ancl[1];
	PrepZ ( ancl[0] , 0 );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[0] );
 	ToffoliImpl ( b[0] , ancl[0] , a[0] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[1] );
 	ToffoliImpl ( b[1] , ancl[0] , a[1] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[2] );
 	ToffoliImpl ( b[2] , ancl[0] , a[2] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[3] );
 	ToffoliImpl ( b[3] , ancl[0] , a[3] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[4] );
 	ToffoliImpl ( b[4] , ancl[0] , a[4] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[5] );
 	ToffoliImpl ( b[5] , ancl[0] , a[5] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[6] );
 	ToffoliImpl ( b[6] , ancl[0] , a[6] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[7] );
 	ToffoliImpl ( b[7] , ancl[0] , a[7] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[8] );
 	ToffoliImpl ( b[8] , ancl[0] , a[8] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[9] );
 	ToffoliImpl ( b[9] , ancl[0] , a[9] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[10] );
 	ToffoliImpl ( b[10] , ancl[0] , a[10] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[11] );
 	ToffoliImpl ( b[11] , ancl[0] , a[11] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[12] );
 	ToffoliImpl ( b[12] , ancl[0] , a[12] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[13] );
 	ToffoliImpl ( b[13] , ancl[0] , a[13] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[14] );
 	ToffoliImpl ( b[14] , ancl[0] , a[14] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[15] );
 	ToffoliImpl ( b[15] , ancl[0] , a[15] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[16] );
 	ToffoliImpl ( b[16] , ancl[0] , a[16] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[17] );
 	ToffoliImpl ( b[17] , ancl[0] , a[17] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[18] );
 	ToffoliImpl ( b[18] , ancl[0] , a[18] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[19] );
 	ToffoliImpl ( b[19] , ancl[0] , a[19] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[20] );
 	ToffoliImpl ( b[20] , ancl[0] , a[20] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[21] );
 	ToffoliImpl ( b[21] , ancl[0] , a[21] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[22] );
 	ToffoliImpl ( b[22] , ancl[0] , a[22] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[23] );
 	ToffoliImpl ( b[23] , ancl[0] , a[23] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[24] );
 	ToffoliImpl ( b[24] , ancl[0] , a[24] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[25] );
 	ToffoliImpl ( b[25] , ancl[0] , a[25] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[26] );
 	ToffoliImpl ( b[26] , ancl[0] , a[26] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[27] );
 	ToffoliImpl ( b[27] , ancl[0] , a[27] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[28] );
 	ToffoliImpl ( b[28] , ancl[0] , a[28] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[29] );
 	ToffoliImpl ( b[29] , ancl[0] , a[29] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[30] );
 	ToffoliImpl ( b[30] , ancl[0] , a[30] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[31] );
 	ToffoliImpl ( b[31] , ancl[0] , a[31] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[32] );
 	ToffoliImpl ( b[32] , ancl[0] , a[32] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[33] );
 	ToffoliImpl ( b[33] , ancl[0] , a[33] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[34] );
 	ToffoliImpl ( b[34] , ancl[0] , a[34] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[35] );
 	ToffoliImpl ( b[35] , ancl[0] , a[35] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[36] );
 	ToffoliImpl ( b[36] , ancl[0] , a[36] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[37] );
 	ToffoliImpl ( b[37] , ancl[0] , a[37] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[38] );
 	ToffoliImpl ( b[38] , ancl[0] , a[38] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[39] );
 	ToffoliImpl ( b[39] , ancl[0] , a[39] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[40] );
 	ToffoliImpl ( b[40] , ancl[0] , a[40] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[41] );
 	ToffoliImpl ( b[41] , ancl[0] , a[41] );
 	ToffoliImpl ( ancl[0] , weldctrl[0] , g[42] );
 	ToffoliImpl ( b[42] , ancl[0] , a[42] );
 	ToffoliImpl ( b[43] , a[43] , weldctrl[0] );
 }

module SETWELD ( qbit* a , qbit* b , qbit* childctrl , qbit* direction , qbit* g ) {
 	qbit weldctrl[1];
	X ( direction[0] );
 	ToffoliImpl ( weldctrl[0] , direction[0] , childctrl[0] );
 	X ( direction[0] );
 	DOWELD0 ( a , b , weldctrl );
 	CNOT ( weldctrl[0] , childctrl[0] );
 	DOWELD1 ( a , b , weldctrl , g );
 	ToffoliImpl ( weldctrl[0] , direction[0] , childctrl[0] );
 	ToffoliImpl ( b[44] , a[44] , childctrl[0] );
 	CNOT ( b[43] , childctrl[0] );
 	CNOT ( b[44] , childctrl[0] );
 }

module SETCHILDINTREE ( qbit* a , qbit* b , qbit* childctrl , qbit* direction ) {
 	ToffoliImpl ( b[0] , childctrl[0] , direction[0] );
 	ToffoliImpl ( b[1] , childctrl[0] , a[0] );
 	ToffoliImpl ( b[2] , childctrl[0] , a[1] );
 	ToffoliImpl ( b[3] , childctrl[0] , a[2] );
 	ToffoliImpl ( b[4] , childctrl[0] , a[3] );
 	ToffoliImpl ( b[5] , childctrl[0] , a[4] );
 	ToffoliImpl ( b[6] , childctrl[0] , a[5] );
 	ToffoliImpl ( b[7] , childctrl[0] , a[6] );
 	ToffoliImpl ( b[8] , childctrl[0] , a[7] );
 	ToffoliImpl ( b[9] , childctrl[0] , a[8] );
 	ToffoliImpl ( b[10] , childctrl[0] , a[9] );
 	ToffoliImpl ( b[11] , childctrl[0] , a[10] );
 	ToffoliImpl ( b[12] , childctrl[0] , a[11] );
 	ToffoliImpl ( b[13] , childctrl[0] , a[12] );
 	ToffoliImpl ( b[14] , childctrl[0] , a[13] );
 	ToffoliImpl ( b[15] , childctrl[0] , a[14] );
 	ToffoliImpl ( b[16] , childctrl[0] , a[15] );
 	ToffoliImpl ( b[17] , childctrl[0] , a[16] );
 	ToffoliImpl ( b[18] , childctrl[0] , a[17] );
 	ToffoliImpl ( b[19] , childctrl[0] , a[18] );
 	ToffoliImpl ( b[20] , childctrl[0] , a[19] );
 	ToffoliImpl ( b[21] , childctrl[0] , a[20] );
 	ToffoliImpl ( b[22] , childctrl[0] , a[21] );
 	ToffoliImpl ( b[23] , childctrl[0] , a[22] );
 	ToffoliImpl ( b[24] , childctrl[0] , a[23] );
 	ToffoliImpl ( b[25] , childctrl[0] , a[24] );
 	ToffoliImpl ( b[26] , childctrl[0] , a[25] );
 	ToffoliImpl ( b[27] , childctrl[0] , a[26] );
 	ToffoliImpl ( b[28] , childctrl[0] , a[27] );
 	ToffoliImpl ( b[29] , childctrl[0] , a[28] );
 	ToffoliImpl ( b[30] , childctrl[0] , a[29] );
 	ToffoliImpl ( b[31] , childctrl[0] , a[30] );
 	ToffoliImpl ( b[32] , childctrl[0] , a[31] );
 	ToffoliImpl ( b[33] , childctrl[0] , a[32] );
 	ToffoliImpl ( b[34] , childctrl[0] , a[33] );
 	ToffoliImpl ( b[35] , childctrl[0] , a[34] );
 	ToffoliImpl ( b[36] , childctrl[0] , a[35] );
 	ToffoliImpl ( b[37] , childctrl[0] , a[36] );
 	ToffoliImpl ( b[38] , childctrl[0] , a[37] );
 	ToffoliImpl ( b[39] , childctrl[0] , a[38] );
 	ToffoliImpl ( b[40] , childctrl[0] , a[39] );
 	ToffoliImpl ( b[41] , childctrl[0] , a[40] );
 	ToffoliImpl ( b[42] , childctrl[0] , a[41] );
 	ToffoliImpl ( b[43] , childctrl[0] , a[42] );
 	ToffoliImpl ( b[44] , childctrl[0] , a[44] );
 }

module SETCHILD ( qbit* a , qbit* b , qbit* ischild , qbit* direction , qbit* g ) {
 	qbit childctrl[1];
	ToffoliImpl ( childctrl[0] , ischild[0] , a[43] );
 	SETWELD ( a , b , childctrl , direction , g );
 	CNOT ( childctrl[0] , ischild[0] );
 	SETCHILDINTREE ( a , b , childctrl , direction );
 	X ( a[43] );
 	ToffoliImpl ( childctrl[0] , ischild[0] , a[43] );
 	X ( a[43] );
 }

module TESTISPARENT_0_0 ( qbit* a , qbit* root , qbit* even , qbit* isparent , qbit* ismatch ) {
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 	X ( even[0] );
 	X ( a[0] );
 	ToffoliImpl ( isparent[0] , even[0] , a[0] );
 	X ( a[0] );
 	X ( even[0] );
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 }

module ORACLE_0 ( qbit* a , qbit* b , qbit* r ) {
 	qbit root[1];
	qbit even[1];
	qbit isparent[1];
	qbit ischild[1];
	qbit ismatch[1];
	qbit direction[1];
	qbit g[43];
	PARSENODEROOT ( a , root , even );
 	PARSENODEEVEN ( a , even );
 	TESTISPARENT_0_1 ( a , root , even , isparent , ismatch );
 	TESTISCHILD_0 ( even , ischild );
 	SETPARENT ( a , b , isparent );
 	SETCHILD ( a , b , ischild , direction , g );
 	X ( isparent[0] );
 	X ( ischild[0] );
 	ToffoliImpl ( r[0] , isparent[0] , ischild[0] );
 	X ( ischild[0] );
 	X ( isparent[0] );
 	TESTISCHILD_0 ( even , ischild );
 	TESTISPARENT_0_0 ( a , root , even , isparent , ismatch );
 	PARSENODEEVEN ( a , even );
 	PARSENODEROOT ( a , root , even );
 }

module W ( qbit q1 , qbit q2 ) {
 	CNOT ( q1 , q2 );
 	X ( q2 );
 	Sdag ( q2 );
 	H ( q2 );
 	Tdag ( q2 );
 	CNOT ( q2 , q1 );
 	T ( q2 );
 	H ( q2 );
 	S ( q2 );
 	X ( q2 );
 	CNOT ( q1 , q2 );
 }

module DecomposeRotation_n1_145900e02 ( qbit q ) {
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	Sdag ( q );
 	H ( q );
 	T ( q );
 	X ( q );
 }

module DecomposeRotation_1_145900e02 ( qbit q ) {
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	Tdag ( q );
 	Z ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 	S ( q );
 	H ( q );
 	T ( q );
 	H ( q );
 	T ( q );
 }

module controlled_expZ ( qbit* target , qbit* control ) {
 	DecomposeRotation_n1_145900e02 ( target[0] );
 	CNOT ( target[0] , control[0] );
 	DecomposeRotation_1_145900e02 ( target[0] );
 }

module TIMESTEP ( qbit* a , qbit* b , qbit* r ) {
 	qbit h[1];
	PrepZ ( h[0] , 0 );
 	W ( a[0] , b[0] );
 	W ( a[1] , b[1] );
 	W ( a[2] , b[2] );
 	W ( a[3] , b[3] );
 	W ( a[4] , b[4] );
 	W ( a[5] , b[5] );
 	W ( a[6] , b[6] );
 	W ( a[7] , b[7] );
 	W ( a[8] , b[8] );
 	W ( a[9] , b[9] );
 	W ( a[10] , b[10] );
 	W ( a[11] , b[11] );
 	W ( a[12] , b[12] );
 	W ( a[13] , b[13] );
 	W ( a[14] , b[14] );
 	W ( a[15] , b[15] );
 	W ( a[16] , b[16] );
 	W ( a[17] , b[17] );
 	W ( a[18] , b[18] );
 	W ( a[19] , b[19] );
 	W ( a[20] , b[20] );
 	W ( a[21] , b[21] );
 	W ( a[22] , b[22] );
 	W ( a[23] , b[23] );
 	W ( a[24] , b[24] );
 	W ( a[25] , b[25] );
 	W ( a[26] , b[26] );
 	W ( a[27] , b[27] );
 	W ( a[28] , b[28] );
 	W ( a[29] , b[29] );
 	W ( a[30] , b[30] );
 	W ( a[31] , b[31] );
 	W ( a[32] , b[32] );
 	W ( a[33] , b[33] );
 	W ( a[34] , b[34] );
 	W ( a[35] , b[35] );
 	W ( a[36] , b[36] );
 	W ( a[37] , b[37] );
 	W ( a[38] , b[38] );
 	W ( a[39] , b[39] );
 	W ( a[40] , b[40] );
 	W ( a[41] , b[41] );
 	W ( a[42] , b[42] );
 	W ( a[43] , b[43] );
 	W ( a[44] , b[44] );
 	X ( b[0] );
 	ToffoliImpl ( h[0] , a[0] , b[0] );
 	X ( b[0] );
 	X ( b[1] );
 	ToffoliImpl ( h[0] , a[1] , b[1] );
 	X ( b[1] );
 	X ( b[2] );
 	ToffoliImpl ( h[0] , a[2] , b[2] );
 	X ( b[2] );
 	X ( b[3] );
 	ToffoliImpl ( h[0] , a[3] , b[3] );
 	X ( b[3] );
 	X ( b[4] );
 	ToffoliImpl ( h[0] , a[4] , b[4] );
 	X ( b[4] );
 	X ( b[5] );
 	ToffoliImpl ( h[0] , a[5] , b[5] );
 	X ( b[5] );
 	X ( b[6] );
 	ToffoliImpl ( h[0] , a[6] , b[6] );
 	X ( b[6] );
 	X ( b[7] );
 	ToffoliImpl ( h[0] , a[7] , b[7] );
 	X ( b[7] );
 	X ( b[8] );
 	ToffoliImpl ( h[0] , a[8] , b[8] );
 	X ( b[8] );
 	X ( b[9] );
 	ToffoliImpl ( h[0] , a[9] , b[9] );
 	X ( b[9] );
 	X ( b[10] );
 	ToffoliImpl ( h[0] , a[10] , b[10] );
 	X ( b[10] );
 	X ( b[11] );
 	ToffoliImpl ( h[0] , a[11] , b[11] );
 	X ( b[11] );
 	X ( b[12] );
 	ToffoliImpl ( h[0] , a[12] , b[12] );
 	X ( b[12] );
 	X ( b[13] );
 	ToffoliImpl ( h[0] , a[13] , b[13] );
 	X ( b[13] );
 	X ( b[14] );
 	ToffoliImpl ( h[0] , a[14] , b[14] );
 	X ( b[14] );
 	X ( b[15] );
 	ToffoliImpl ( h[0] , a[15] , b[15] );
 	X ( b[15] );
 	X ( b[16] );
 	ToffoliImpl ( h[0] , a[16] , b[16] );
 	X ( b[16] );
 	X ( b[17] );
 	ToffoliImpl ( h[0] , a[17] , b[17] );
 	X ( b[17] );
 	X ( b[18] );
 	ToffoliImpl ( h[0] , a[18] , b[18] );
 	X ( b[18] );
 	X ( b[19] );
 	ToffoliImpl ( h[0] , a[19] , b[19] );
 	X ( b[19] );
 	X ( b[20] );
 	ToffoliImpl ( h[0] , a[20] , b[20] );
 	X ( b[20] );
 	X ( b[21] );
 	ToffoliImpl ( h[0] , a[21] , b[21] );
 	X ( b[21] );
 	X ( b[22] );
 	ToffoliImpl ( h[0] , a[22] , b[22] );
 	X ( b[22] );
 	X ( b[23] );
 	ToffoliImpl ( h[0] , a[23] , b[23] );
 	X ( b[23] );
 	X ( b[24] );
 	ToffoliImpl ( h[0] , a[24] , b[24] );
 	X ( b[24] );
 	X ( b[25] );
 	ToffoliImpl ( h[0] , a[25] , b[25] );
 	X ( b[25] );
 	X ( b[26] );
 	ToffoliImpl ( h[0] , a[26] , b[26] );
 	X ( b[26] );
 	X ( b[27] );
 	ToffoliImpl ( h[0] , a[27] , b[27] );
 	X ( b[27] );
 	X ( b[28] );
 	ToffoliImpl ( h[0] , a[28] , b[28] );
 	X ( b[28] );
 	X ( b[29] );
 	ToffoliImpl ( h[0] , a[29] , b[29] );
 	X ( b[29] );
 	X ( b[30] );
 	ToffoliImpl ( h[0] , a[30] , b[30] );
 	X ( b[30] );
 	X ( b[31] );
 	ToffoliImpl ( h[0] , a[31] , b[31] );
 	X ( b[31] );
 	X ( b[32] );
 	ToffoliImpl ( h[0] , a[32] , b[32] );
 	X ( b[32] );
 	X ( b[33] );
 	ToffoliImpl ( h[0] , a[33] , b[33] );
 	X ( b[33] );
 	X ( b[34] );
 	ToffoliImpl ( h[0] , a[34] , b[34] );
 	X ( b[34] );
 	X ( b[35] );
 	ToffoliImpl ( h[0] , a[35] , b[35] );
 	X ( b[35] );
 	X ( b[36] );
 	ToffoliImpl ( h[0] , a[36] , b[36] );
 	X ( b[36] );
 	X ( b[37] );
 	ToffoliImpl ( h[0] , a[37] , b[37] );
 	X ( b[37] );
 	X ( b[38] );
 	ToffoliImpl ( h[0] , a[38] , b[38] );
 	X ( b[38] );
 	X ( b[39] );
 	ToffoliImpl ( h[0] , a[39] , b[39] );
 	X ( b[39] );
 	X ( b[40] );
 	ToffoliImpl ( h[0] , a[40] , b[40] );
 	X ( b[40] );
 	X ( b[41] );
 	ToffoliImpl ( h[0] , a[41] , b[41] );
 	X ( b[41] );
 	X ( b[42] );
 	ToffoliImpl ( h[0] , a[42] , b[42] );
 	X ( b[42] );
 	X ( b[43] );
 	ToffoliImpl ( h[0] , a[43] , b[43] );
 	X ( b[43] );
 	X ( b[44] );
 	ToffoliImpl ( h[0] , a[44] , b[44] );
 	X ( b[44] );
 	X ( r[0] );
 	controlled_expZ ( h , r );
 	X ( r[0] );
 	X ( b[44] );
 	ToffoliImpl ( h[0] , a[44] , b[44] );
 	X ( b[44] );
 	X ( b[43] );
 	ToffoliImpl ( h[0] , a[43] , b[43] );
 	X ( b[43] );
 	X ( b[42] );
 	ToffoliImpl ( h[0] , a[42] , b[42] );
 	X ( b[42] );
 	X ( b[41] );
 	ToffoliImpl ( h[0] , a[41] , b[41] );
 	X ( b[41] );
 	X ( b[40] );
 	ToffoliImpl ( h[0] , a[40] , b[40] );
 	X ( b[40] );
 	X ( b[39] );
 	ToffoliImpl ( h[0] , a[39] , b[39] );
 	X ( b[39] );
 	X ( b[38] );
 	ToffoliImpl ( h[0] , a[38] , b[38] );
 	X ( b[38] );
 	X ( b[37] );
 	ToffoliImpl ( h[0] , a[37] , b[37] );
 	X ( b[37] );
 	X ( b[36] );
 	ToffoliImpl ( h[0] , a[36] , b[36] );
 	X ( b[36] );
 	X ( b[35] );
 	ToffoliImpl ( h[0] , a[35] , b[35] );
 	X ( b[35] );
 	X ( b[34] );
 	ToffoliImpl ( h[0] , a[34] , b[34] );
 	X ( b[34] );
 	X ( b[33] );
 	ToffoliImpl ( h[0] , a[33] , b[33] );
 	X ( b[33] );
 	X ( b[32] );
 	ToffoliImpl ( h[0] , a[32] , b[32] );
 	X ( b[32] );
 	X ( b[31] );
 	ToffoliImpl ( h[0] , a[31] , b[31] );
 	X ( b[31] );
 	X ( b[30] );
 	ToffoliImpl ( h[0] , a[30] , b[30] );
 	X ( b[30] );
 	X ( b[29] );
 	ToffoliImpl ( h[0] , a[29] , b[29] );
 	X ( b[29] );
 	X ( b[28] );
 	ToffoliImpl ( h[0] , a[28] , b[28] );
 	X ( b[28] );
 	X ( b[27] );
 	ToffoliImpl ( h[0] , a[27] , b[27] );
 	X ( b[27] );
 	X ( b[26] );
 	ToffoliImpl ( h[0] , a[26] , b[26] );
 	X ( b[26] );
 	X ( b[25] );
 	ToffoliImpl ( h[0] , a[25] , b[25] );
 	X ( b[25] );
 	X ( b[24] );
 	ToffoliImpl ( h[0] , a[24] , b[24] );
 	X ( b[24] );
 	X ( b[23] );
 	ToffoliImpl ( h[0] , a[23] , b[23] );
 	X ( b[23] );
 	X ( b[22] );
 	ToffoliImpl ( h[0] , a[22] , b[22] );
 	X ( b[22] );
 	X ( b[21] );
 	ToffoliImpl ( h[0] , a[21] , b[21] );
 	X ( b[21] );
 	X ( b[20] );
 	ToffoliImpl ( h[0] , a[20] , b[20] );
 	X ( b[20] );
 	X ( b[19] );
 	ToffoliImpl ( h[0] , a[19] , b[19] );
 	X ( b[19] );
 	X ( b[18] );
 	ToffoliImpl ( h[0] , a[18] , b[18] );
 	X ( b[18] );
 	X ( b[17] );
 	ToffoliImpl ( h[0] , a[17] , b[17] );
 	X ( b[17] );
 	X ( b[16] );
 	ToffoliImpl ( h[0] , a[16] , b[16] );
 	X ( b[16] );
 	X ( b[15] );
 	ToffoliImpl ( h[0] , a[15] , b[15] );
 	X ( b[15] );
 	X ( b[14] );
 	ToffoliImpl ( h[0] , a[14] , b[14] );
 	X ( b[14] );
 	X ( b[13] );
 	ToffoliImpl ( h[0] , a[13] , b[13] );
 	X ( b[13] );
 	X ( b[12] );
 	ToffoliImpl ( h[0] , a[12] , b[12] );
 	X ( b[12] );
 	X ( b[11] );
 	ToffoliImpl ( h[0] , a[11] , b[11] );
 	X ( b[11] );
 	X ( b[10] );
 	ToffoliImpl ( h[0] , a[10] , b[10] );
 	X ( b[10] );
 	X ( b[9] );
 	ToffoliImpl ( h[0] , a[9] , b[9] );
 	X ( b[9] );
 	X ( b[8] );
 	ToffoliImpl ( h[0] , a[8] , b[8] );
 	X ( b[8] );
 	X ( b[7] );
 	ToffoliImpl ( h[0] , a[7] , b[7] );
 	X ( b[7] );
 	X ( b[6] );
 	ToffoliImpl ( h[0] , a[6] , b[6] );
 	X ( b[6] );
 	X ( b[5] );
 	ToffoliImpl ( h[0] , a[5] , b[5] );
 	X ( b[5] );
 	X ( b[4] );
 	ToffoliImpl ( h[0] , a[4] , b[4] );
 	X ( b[4] );
 	X ( b[3] );
 	ToffoliImpl ( h[0] , a[3] , b[3] );
 	X ( b[3] );
 	X ( b[2] );
 	ToffoliImpl ( h[0] , a[2] , b[2] );
 	X ( b[2] );
 	X ( b[1] );
 	ToffoliImpl ( h[0] , a[1] , b[1] );
 	X ( b[1] );
 	X ( b[0] );
 	ToffoliImpl ( h[0] , a[0] , b[0] );
 	X ( b[0] );
 	W ( a[0] , b[0] );
 	W ( a[1] , b[1] );
 	W ( a[2] , b[2] );
 	W ( a[3] , b[3] );
 	W ( a[4] , b[4] );
 	W ( a[5] , b[5] );
 	W ( a[6] , b[6] );
 	W ( a[7] , b[7] );
 	W ( a[8] , b[8] );
 	W ( a[9] , b[9] );
 	W ( a[10] , b[10] );
 	W ( a[11] , b[11] );
 	W ( a[12] , b[12] );
 	W ( a[13] , b[13] );
 	W ( a[14] , b[14] );
 	W ( a[15] , b[15] );
 	W ( a[16] , b[16] );
 	W ( a[17] , b[17] );
 	W ( a[18] , b[18] );
 	W ( a[19] , b[19] );
 	W ( a[20] , b[20] );
 	W ( a[21] , b[21] );
 	W ( a[22] , b[22] );
 	W ( a[23] , b[23] );
 	W ( a[24] , b[24] );
 	W ( a[25] , b[25] );
 	W ( a[26] , b[26] );
 	W ( a[27] , b[27] );
 	W ( a[28] , b[28] );
 	W ( a[29] , b[29] );
 	W ( a[30] , b[30] );
 	W ( a[31] , b[31] );
 	W ( a[32] , b[32] );
 	W ( a[33] , b[33] );
 	W ( a[34] , b[34] );
 	W ( a[35] , b[35] );
 	W ( a[36] , b[36] );
 	W ( a[37] , b[37] );
 	W ( a[38] , b[38] );
 	W ( a[39] , b[39] );
 	W ( a[40] , b[40] );
 	W ( a[41] , b[41] );
 	W ( a[42] , b[42] );
 	W ( a[43] , b[43] );
 	W ( a[44] , b[44] );
 }

module TESTISPARENT_1_1 ( qbit* a , qbit* root , qbit* even , qbit* isparent , qbit* ismatch ) {
 	X ( even[0] );
 	ToffoliImpl ( isparent[0] , even[0] , a[0] );
 	X ( even[0] );
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 }

module TESTISCHILD_1 ( qbit* even , qbit* ischild , qbit* direction ) {
 	CNOT ( ischild[0] , even[0] );
 	X ( direction[0] );
 }

module TESTISPARENT_1_0 ( qbit* a , qbit* root , qbit* even , qbit* isparent , qbit* ismatch ) {
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 	X ( even[0] );
 	ToffoliImpl ( isparent[0] , even[0] , a[0] );
 	X ( even[0] );
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 }

module ORACLE_1 ( qbit* a , qbit* b , qbit* r ) {
 	qbit root[1];
	qbit even[1];
	qbit isparent[1];
	qbit ischild[1];
	qbit ismatch[1];
	qbit direction[1];
	qbit g[43];
	PARSENODEROOT ( a , root , even );
 	PARSENODEEVEN ( a , even );
 	TESTISPARENT_1_1 ( a , root , even , isparent , ismatch );
 	TESTISCHILD_1 ( even , ischild , direction );
 	SETPARENT ( a , b , isparent );
 	SETCHILD ( a , b , ischild , direction , g );
 	X ( isparent[0] );
 	X ( ischild[0] );
 	ToffoliImpl ( r[0] , isparent[0] , ischild[0] );
 	X ( ischild[0] );
 	X ( isparent[0] );
 	TESTISCHILD_1 ( even , ischild , direction );
 	TESTISPARENT_1_0 ( a , root , even , isparent , ismatch );
 	PARSENODEEVEN ( a , even );
 	PARSENODEROOT ( a , root , even );
 }

module TESTISPARENT_2_1 ( qbit* a , qbit* root , qbit* even , qbit* isparent , qbit* ismatch ) {
 	X ( a[0] );
 	ToffoliImpl ( ismatch[0] , even[0] , a[0] );
 	X ( a[0] );
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 }

module TESTISCHILD_2 ( qbit* even , qbit* ischild ) {
 	X ( even[0] );
 	CNOT ( ischild[0] , even[0] );
 	X ( even[0] );
 }

module TESTISPARENT_2_0 ( qbit* a , qbit* root , qbit* even , qbit* isparent , qbit* ismatch ) {
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 	X ( a[0] );
 	ToffoliImpl ( ismatch[0] , even[0] , a[0] );
 	X ( a[0] );
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 }

module ORACLE_2 ( qbit* a , qbit* b , qbit* r ) {
 	qbit root[1];
	qbit even[1];
	qbit isparent[1];
	qbit ischild[1];
	qbit ismatch[1];
	qbit direction[1];
	qbit g[43];
	PARSENODEROOT ( a , root , even );
 	PARSENODEEVEN ( a , even );
 	TESTISPARENT_2_1 ( a , root , even , isparent , ismatch );
 	TESTISCHILD_2 ( even , ischild );
 	SETPARENT ( a , b , isparent );
 	SETCHILD ( a , b , ischild , direction , g );
 	X ( isparent[0] );
 	X ( ischild[0] );
 	ToffoliImpl ( r[0] , isparent[0] , ischild[0] );
 	X ( ischild[0] );
 	X ( isparent[0] );
 	TESTISCHILD_2 ( even , ischild );
 	TESTISPARENT_2_0 ( a , root , even , isparent , ismatch );
 	PARSENODEEVEN ( a , even );
 	PARSENODEROOT ( a , root , even );
 }

module TESTISPARENT_3_1 ( qbit* a , qbit* root , qbit* even , qbit* isparent , qbit* ismatch ) {
 	ToffoliImpl ( ismatch[0] , even[0] , a[0] );
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 }

module TESTISCHILD_3 ( qbit* even , qbit* ischild , qbit* direction ) {
 	X ( even[0] );
 	CNOT ( ischild[0] , even[0] );
 	X ( even[0] );
 	X ( direction[0] );
 }

module TESTISPARENT_3_0 ( qbit* a , qbit* root , qbit* even , qbit* isparent , qbit* ismatch ) {
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 	ToffoliImpl ( ismatch[0] , even[0] , a[0] );
 	X ( root[0] );
 	ToffoliImpl ( isparent[0] , root[0] , ismatch[0] );
 	X ( root[0] );
 }

module ORACLE_3 ( qbit* a , qbit* b , qbit* r ) {
 	qbit root[1];
	qbit even[1];
	qbit isparent[1];
	qbit ischild[1];
	qbit ismatch[1];
	qbit direction[1];
	qbit g[43];
	PARSENODEROOT ( a , root , even );
 	PARSENODEEVEN ( a , even );
 	TESTISPARENT_3_1 ( a , root , even , isparent , ismatch );
 	TESTISCHILD_3 ( even , ischild , direction );
 	SETPARENT ( a , b , isparent );
 	SETCHILD ( a , b , ischild , direction , g );
 	X ( isparent[0] );
 	X ( ischild[0] );
 	ToffoliImpl ( r[0] , isparent[0] , ischild[0] );
 	X ( ischild[0] );
 	X ( isparent[0] );
 	TESTISCHILD_3 ( even , ischild , direction );
 	TESTISPARENT_3_0 ( a , root , even , isparent , ismatch );
 	PARSENODEEVEN ( a , even );
 	PARSENODEROOT ( a , root , even );
 }

module main (  ) {
 	qbit a[45];
	qbit b[45];
	qbit r[1];
	cbit EXIT[45];
	PrepZ ( r[0] , 0 );
 	PrepZ ( a[0] , 1 );
 	PrepZ ( b[0] , 0 );
 	PrepZ ( a[1] , 0 );
 	PrepZ ( b[1] , 0 );
 	PrepZ ( a[2] , 0 );
 	PrepZ ( b[2] , 0 );
 	PrepZ ( a[3] , 0 );
 	PrepZ ( b[3] , 0 );
 	PrepZ ( a[4] , 0 );
 	PrepZ ( b[4] , 0 );
 	PrepZ ( a[5] , 0 );
 	PrepZ ( b[5] , 0 );
 	PrepZ ( a[6] , 0 );
 	PrepZ ( b[6] , 0 );
 	PrepZ ( a[7] , 0 );
 	PrepZ ( b[7] , 0 );
 	PrepZ ( a[8] , 0 );
 	PrepZ ( b[8] , 0 );
 	PrepZ ( a[9] , 0 );
 	PrepZ ( b[9] , 0 );
 	PrepZ ( a[10] , 0 );
 	PrepZ ( b[10] , 0 );
 	PrepZ ( a[11] , 0 );
 	PrepZ ( b[11] , 0 );
 	PrepZ ( a[12] , 0 );
 	PrepZ ( b[12] , 0 );
 	PrepZ ( a[13] , 0 );
 	PrepZ ( b[13] , 0 );
 	PrepZ ( a[14] , 0 );
 	PrepZ ( b[14] , 0 );
 	PrepZ ( a[15] , 0 );
 	PrepZ ( b[15] , 0 );
 	PrepZ ( a[16] , 0 );
 	PrepZ ( b[16] , 0 );
 	PrepZ ( a[17] , 0 );
 	PrepZ ( b[17] , 0 );
 	PrepZ ( a[18] , 0 );
 	PrepZ ( b[18] , 0 );
 	PrepZ ( a[19] , 0 );
 	PrepZ ( b[19] , 0 );
 	PrepZ ( a[20] , 0 );
 	PrepZ ( b[20] , 0 );
 	PrepZ ( a[21] , 0 );
 	PrepZ ( b[21] , 0 );
 	PrepZ ( a[22] , 0 );
 	PrepZ ( b[22] , 0 );
 	PrepZ ( a[23] , 0 );
 	PrepZ ( b[23] , 0 );
 	PrepZ ( a[24] , 0 );
 	PrepZ ( b[24] , 0 );
 	PrepZ ( a[25] , 0 );
 	PrepZ ( b[25] , 0 );
 	PrepZ ( a[26] , 0 );
 	PrepZ ( b[26] , 0 );
 	PrepZ ( a[27] , 0 );
 	PrepZ ( b[27] , 0 );
 	PrepZ ( a[28] , 0 );
 	PrepZ ( b[28] , 0 );
 	PrepZ ( a[29] , 0 );
 	PrepZ ( b[29] , 0 );
 	PrepZ ( a[30] , 0 );
 	PrepZ ( b[30] , 0 );
 	PrepZ ( a[31] , 0 );
 	PrepZ ( b[31] , 0 );
 	PrepZ ( a[32] , 0 );
 	PrepZ ( b[32] , 0 );
 	PrepZ ( a[33] , 0 );
 	PrepZ ( b[33] , 0 );
 	PrepZ ( a[34] , 0 );
 	PrepZ ( b[34] , 0 );
 	PrepZ ( a[35] , 0 );
 	PrepZ ( b[35] , 0 );
 	PrepZ ( a[36] , 0 );
 	PrepZ ( b[36] , 0 );
 	PrepZ ( a[37] , 0 );
 	PrepZ ( b[37] , 0 );
 	PrepZ ( a[38] , 0 );
 	PrepZ ( b[38] , 0 );
 	PrepZ ( a[39] , 0 );
 	PrepZ ( b[39] , 0 );
 	PrepZ ( a[40] , 0 );
 	PrepZ ( b[40] , 0 );
 	PrepZ ( a[41] , 0 );
 	PrepZ ( b[41] , 0 );
 	PrepZ ( a[42] , 0 );
 	PrepZ ( b[42] , 0 );
 	PrepZ ( a[43] , 0 );
 	PrepZ ( b[43] , 0 );
 	PrepZ ( a[44] , 0 );
 	PrepZ ( b[44] , 0 );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_0 ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_1 ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_2 ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	TIMESTEP ( a , b , r );
 	ORACLE_3 ( a , b , r );
 	EXIT[0] = MeasZ ( a[0] );
 	EXIT[1] = MeasZ ( a[1] );
 	EXIT[2] = MeasZ ( a[2] );
 	EXIT[3] = MeasZ ( a[3] );
 	EXIT[4] = MeasZ ( a[4] );
 	EXIT[5] = MeasZ ( a[5] );
 	EXIT[6] = MeasZ ( a[6] );
 	EXIT[7] = MeasZ ( a[7] );
 	EXIT[8] = MeasZ ( a[8] );
 	EXIT[9] = MeasZ ( a[9] );
 	EXIT[10] = MeasZ ( a[10] );
 	EXIT[11] = MeasZ ( a[11] );
 	EXIT[12] = MeasZ ( a[12] );
 	EXIT[13] = MeasZ ( a[13] );
 	EXIT[14] = MeasZ ( a[14] );
 	EXIT[15] = MeasZ ( a[15] );
 	EXIT[16] = MeasZ ( a[16] );
 	EXIT[17] = MeasZ ( a[17] );
 	EXIT[18] = MeasZ ( a[18] );
 	EXIT[19] = MeasZ ( a[19] );
 	EXIT[20] = MeasZ ( a[20] );
 	EXIT[21] = MeasZ ( a[21] );
 	EXIT[22] = MeasZ ( a[22] );
 	EXIT[23] = MeasZ ( a[23] );
 	EXIT[24] = MeasZ ( a[24] );
 	EXIT[25] = MeasZ ( a[25] );
 	EXIT[26] = MeasZ ( a[26] );
 	EXIT[27] = MeasZ ( a[27] );
 	EXIT[28] = MeasZ ( a[28] );
 	EXIT[29] = MeasZ ( a[29] );
 	EXIT[30] = MeasZ ( a[30] );
 	EXIT[31] = MeasZ ( a[31] );
 	EXIT[32] = MeasZ ( a[32] );
 	EXIT[33] = MeasZ ( a[33] );
 	EXIT[34] = MeasZ ( a[34] );
 	EXIT[35] = MeasZ ( a[35] );
 	EXIT[36] = MeasZ ( a[36] );
 	EXIT[37] = MeasZ ( a[37] );
 	EXIT[38] = MeasZ ( a[38] );
 	EXIT[39] = MeasZ ( a[39] );
 	EXIT[40] = MeasZ ( a[40] );
 	EXIT[41] = MeasZ ( a[41] );
 	EXIT[42] = MeasZ ( a[42] );
 	EXIT[43] = MeasZ ( a[43] );
 	EXIT[44] = MeasZ ( a[44] );
 }

--------End of QASM generation
